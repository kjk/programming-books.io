2252 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "b26071e0-5a74-46c4-9ec9-dfe727186d35"
      },
      "version": -1
    }
  ]
}
Response:+2000
{
  "recordMap": {
    "block": {
      "b26071e0-5a74-46c4-9ec9-dfe727186d35": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "329ef1a9-f3b2-4179-a717-439c996797ef",
            "30e8ed7d-1b95-43c4-832d-a514c73fb081",
            "d8d9537a-d748-4d27-80f1-3081a0f9e4f0",
            "3836f512-76e6-42ce-ac59-3ebb22fd68c1",
            "bd6de6a7-52fc-48c8-8c5e-fd23b7c10188",
            "cce4809a-03b0-4fe0-ba13-429cbd0d7558",
            "40df8489-75ae-4911-8f06-4a1f9acf16c1",
            "82ffafb4-45eb-49ac-849a-ba43a4506726",
            "7cd23b4c-736b-43cc-9db0-a5a9cb8d7a09",
            "362d1d71-37cd-4fd4-9a92-7918064b6d6d",
            "5f3947e3-6ff5-48d0-ae96-73055960f640",
            "012a2285-4471-4eba-a08f-53617a7b135a",
            "0dba74f0-de08-4b5e-b76c-ff8ffbf4ac8b",
            "0f4fb2eb-8090-4e2d-a691-c6bb8d787233",
            "2cd0be7d-15fb-44b9-9fa9-5154a20180bf",
            "0105bd35-87d1-4ab8-a06f-e8738ad0d837"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791332,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791332,
          "parent_id": "5e44bd54-3362-4b1a-934b-acecce2afc7f",
          "parent_table": "block",
          "properties": {
            "title": [["Allocating Memory"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      }
    }
  }
}
30802 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "b26071e0-5a74-46c4-9ec9-dfe727186d35"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+30542
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "0105bd35-87d1-4ab8-a06f-e8738ad0d837": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791332,
          "id": "0105bd35-87d1-4ab8-a06f-e8738ad0d837",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791332,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The C11 standard imposes two restrictions: 1) the "],
              ["size", [["i"]]],
              [
                " (second argument) requested must be an integral multiple of the "
              ],
              ["alignment", [["i"]]],
              [" (first argument) and 2) the value of "],
              ["alignment", [["i"]]],
              [
                " should be a valid alignment supported by the implementation. Failure to meet either of them results in "
              ],
              [
                "undefined behavior",
                [
                  [
                    "a",
                    "http://stackoverflow.com/documentation/c/364/undefined-behavior"
                  ]
                ]
              ],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "012a2285-4471-4eba-a08f-53617a7b135a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791330,
          "id": "012a2285-4471-4eba-a08f-53617a7b135a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791330,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["A note on ", [["i"]]],
              ["calloc", [["i"], ["c"]]],
              [":", [["i"]]],
              [" Most (commonly used) implementations will optimise "],
              ["calloc()", [["c"]]],
              [" for performance, so it will be "],
              ["faster", [["a", "http://stackoverflow.com/a/2688522/130580"]]],
              [" than calling "],
              ["malloc()", [["c"]]],
              [", then "],
              ["memset()", [["c"]]],
              [", even though the net effect is identical."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "0dba74f0-de08-4b5e-b76c-ff8ffbf4ac8b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791330,
          "id": "0dba74f0-de08-4b5e-b76c-ff8ffbf4ac8b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791330,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [["Aligned Memory"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "0f4fb2eb-8090-4e2d-a691-c6bb8d787233": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791331,
          "id": "0f4fb2eb-8090-4e2d-a691-c6bb8d787233",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791331,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["C11 introduced a new function "],
              ["aligned_alloc()", [["c"]]],
              [
                " which allocates space with the given alignment. It can be used if the memory to be allocated is needed to be aligned at certain boundaries which can’t be satisfied by "
              ],
              ["malloc()", [["c"]]],
              [" or "],
              ["calloc()", [["c"]]],
              [". "],
              ["malloc()", [["c"]]],
              [" and "],
              ["calloc()", [["c"]]],
              [" functions allocate memory that’s suitably aligned for "],
              ["any", [["i"]]],
              [" object type (i.e. the alignment is "],
              ["alignof(max_align_t)", [["c"]]],
              ["). But with "],
              ["aligned_alloc()", [["c"]]],
              [" greater alignments can be requested."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "2cd0be7d-15fb-44b9-9fa9-5154a20180bf": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791331,
          "id": "2cd0be7d-15fb-44b9-9fa9-5154a20180bf",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791331,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "/* Allocates 1024 bytes with 256 bytes alignment. */\nchar *ptr = aligned_alloc(256, 1024);\nif (ptr) {\n    perror(\"aligned_alloc()\");\n    return -1;\n}\nfree(ptr);"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "30e8ed7d-1b95-43c4-832d-a514c73fb081": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791326,
          "id": "30e8ed7d-1b95-43c4-832d-a514c73fb081",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791326,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The C dynamic memory allocation functions are defined in the "],
              ["<stdlib.h>", [["c"]]],
              [
                " header. If one wishes to allocate memory space for an object dynamically, the following code can be used:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "329ef1a9-f3b2-4179-a717-439c996797ef": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791323,
          "id": "329ef1a9-f3b2-4179-a717-439c996797ef",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791323,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [["Standard Allocation"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "362d1d71-37cd-4fd4-9a92-7918064b6d6d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791328,
          "id": "362d1d71-37cd-4fd4-9a92-7918064b6d6d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791328,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The memory returned by "],
              ["malloc", [["c"]]],
              [
                " may not be initialized to a reasonable value, and care should be taken to zero the memory with "
              ],
              ["memset", [["c"]]],
              [
                " or to immediately copy a suitable value into it. Alternatively, "
              ],
              ["calloc", [["c"]]],
              [
                " returns a block of the desired size where all bits are initialized to "
              ],
              ["0", [["c"]]],
              [
                ". This need not be the same as the representation of floating-point zero or a null pointer constant."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "3836f512-76e6-42ce-ac59-3ebb22fd68c1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791326,
          "id": "3836f512-76e6-42ce-ac59-3ebb22fd68c1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791326,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This computes the number of bytes that ten "],
              ["int", [["c"]]],
              ["s occupy in memory, then requests that many bytes from "],
              ["malloc", [["c"]]],
              [
                " and assigns the result (i.e., the starting address of the memory chunk that was just created using "
              ],
              ["malloc", [["c"]]],
              [") to a pointer named "],
              ["p", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "40df8489-75ae-4911-8f06-4a1f9acf16c1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791327,
          "id": "40df8489-75ae-4911-8f06-4a1f9acf16c1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791327,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Memory dynamically allocated using "],
              ["malloc()", [["c"]]],
              [" may be resized using "],
              ["realloc()", [["c"]]],
              [" or, when no longer needed, released using "],
              ["free()", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "5e44bd54-3362-4b1a-934b-acecce2afc7f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "21998b72-6fa2-436d-acf7-52b9b3bddbfe",
            "b26071e0-5a74-46c4-9ec9-dfe727186d35",
            "b9ae2373-8918-40ce-8fa1-62880e3843c7",
            "eda3203f-a7ba-4134-857a-e4c0750cb9f6",
            "4b91a871-c18a-4f25-a8fb-d5bfeed8209e",
            "82ab9d4d-78c2-4787-b21b-c2b74ec5dd1f",
            "7682bc76-3b57-4228-87df-f60f222f5f7f",
            "b7c4c6d1-5094-4e65-97b8-533c445b9f8b"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936780000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "5e44bd54-3362-4b1a-934b-acecce2afc7f",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551937020000,
          "parent_id": "84ae4145-718e-4b7b-8cb4-3cf10ee4db6a",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Memory management"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 35
        }
      },
      "5f3947e3-6ff5-48d0-ae96-73055960f640": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791328,
          "id": "5f3947e3-6ff5-48d0-ae96-73055960f640",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791328,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "int *p = calloc(10, sizeof *p);\nif (p == NULL) \n{\n    perror(\"calloc() failed\");\n    return -1;\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "7cd23b4c-736b-43cc-9db0-a5a9cb8d7a09": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791328,
          "id": "7cd23b4c-736b-43cc-9db0-a5a9cb8d7a09",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791328,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [["Zeroed Memory"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "82ffafb4-45eb-49ac-849a-ba43a4506726": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791328,
          "id": "82ffafb4-45eb-49ac-849a-ba43a4506726",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791328,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Alternatively, declaring "],
              ["int array[10];", [["c"]]],
              [
                " would allocate the same amount of memory. However, if it is declared inside a function without the keyword "
              ],
              ["static", [["c"]]],
              [
                ", it will only be usable within the function it is declared in and the functions it calls (because the array will be allocated on the stack and the space will be released for reuse when the function returns). Alternatively, if it is defined with "
              ],
              ["static", [["c"]]],
              [
                " inside a function, or if it is defined outside any function, then its lifetime is the lifetime of the program. Pointers can also be returned from a function, however a function in C can not return an array."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "84ae4145-718e-4b7b-8cb4-3cf10ee4db6a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "70354277-e3ea-4870-b354-e4ccea2f776f",
            "c88395f2-cfa3-4917-9b1d-77ad5ef5da03",
            "033ae011-39fb-4a86-9a89-54971c729ce8",
            "218cbf42-b3ba-4b2a-bdab-e522009865b7",
            "af9762cd-d032-4a74-a2b8-b8413c2edefb",
            "c613c743-331e-4cb0-8344-4963dbf825f3",
            "eff989d8-e4d4-4f97-952e-6c58e46dfb73",
            "44b99e73-a03b-41cc-b542-2de7e97ca081",
            "68e74303-cec6-4c9d-a46e-83274bc84bf4",
            "6ae1f6f3-0a87-4bec-b9ca-2ef03a059422",
            "f3c54523-5f2c-4d48-a50e-cd230eee34ae",
            "9b4c9f4c-5f47-45ba-86a9-461b3aaa1198",
            "b81cd45f-aa26-4f19-8238-7b90dd64a769",
            "fb6df079-bba6-489e-ac6a-3ea61d24e7af",
            "262dadd4-3655-45db-88b6-06e23e8e3a7b",
            "9dc6ce73-bdfa-4d4d-b5a1-db84c9227865",
            "f4db91d9-e502-4cf2-b8cc-184cb2d19911",
            "1e14553b-8aea-44fb-a0fe-fbc893ff529a",
            "fceea03f-c65b-4f89-8e06-817d0fcf3348",
            "fcadea6a-df33-4395-8abc-4c71f5599a2d",
            "690adfe7-1f94-4d22-83ad-47d3971f3325",
            "fb1c49da-f858-420f-804f-317776d975e9",
            "fe373c8a-dc77-4fbb-9ceb-fe91a58a5732",
            "92dc051b-09a3-4930-9dda-0fb318b57610",
            "9104b65f-88ef-4b77-89d3-248fa4934ff0",
            "f3ac34eb-110d-486b-9e30-6bd30082bba0",
            "ce0d7992-bb1e-4e62-ab26-2f99a9a2f78d",
            "b76c53dc-9124-4a10-9817-490e3504e93e",
            "042e8ddf-c9c4-4b73-8432-0a569a4f0a8a",
            "3615ca16-3d26-4800-98f4-4da1a5c4bef4",
            "873798b2-99a2-4a3f-9d7c-e6e95e01396f",
            "f9df1d91-a33b-4691-8612-45ec5ebf45e8",
            "218166d2-ae4c-4856-827d-6080353375ec",
            "d3fd04e6-166e-44c4-8df3-6eb488aec6fb",
            "476e4bcf-2254-4ffd-82b2-b3dcbd9fdf01",
            "70e63802-c8af-4573-9d30-82507679f19d",
            "2042e9e8-170e-4e88-a3c5-041aec6ba49b",
            "a25d942b-f182-4a59-8930-268903693536",
            "bbc16be7-a6da-4b3f-9e55-a68f0bcdb261",
            "ae1ce0ef-9ced-4caa-9c8d-f14041e087b0",
            "56054c40-d551-420f-9fd8-a44a9550fd1d",
            "a32e93b8-a175-40b5-b72f-e58c30d058bb",
            "86031ef1-ffce-4374-a32d-1f1886dc6593",
            "b0240e66-8da1-4190-bbe5-f47d5b561ed2",
            "898403c6-8861-4eca-b6cf-2fee9068ecce",
            "5e44bd54-3362-4b1a-934b-acecce2afc7f",
            "5c0a653d-4ce1-4234-bf16-7d29dc2f993e",
            "ae726a5e-8d12-41b2-9bd8-209da2cca404",
            "c45bb8ec-af6d-4f58-b094-cc6980d363e1",
            "f0f16c22-34d6-4125-8a87-63fdd135ef20",
            "5e4385c8-606f-406e-b1af-53b610c5bf4a",
            "e16223c3-400e-4968-bddc-3cc5edf4c5c0",
            "8ed525aa-8fab-4ee4-9fff-5b43085094dd",
            "f4f6d384-72dd-4d02-aa47-f083a22f6481",
            "d4a53a79-3ec2-426e-ac50-24d51d19d403",
            "52978246-4aff-47a0-915a-a90feded64cd",
            "19611889-e796-4311-ab76-561c41c4850a",
            "54f188ad-c5ec-49d7-8bf7-1c5c08e72d2e",
            "27ddd518-401c-43c0-bb68-381e630e5cfb",
            "109e287f-796b-4acd-8b1b-dae5f45129bd",
            "dab23b65-514a-455a-a0f6-c63668012233",
            "cb11a718-ba93-4278-a486-b649224f5923",
            "9d53db3a-6a86-4feb-bbea-f4bfb502ed5f",
            "af5ef860-337b-4d68-aa37-de9259c85852",
            "5ebf8b4e-135f-4d2e-8d6e-1f6b532dedb7"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551935474458,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "84ae4145-718e-4b7b-8cb4-3cf10ee4db6a",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298480000,
          "parent_id": "1ad0beae-92aa-49e1-add1-7960b1db8484",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential C"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 106
        }
      },
      "b26071e0-5a74-46c4-9ec9-dfe727186d35": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "329ef1a9-f3b2-4179-a717-439c996797ef",
            "30e8ed7d-1b95-43c4-832d-a514c73fb081",
            "d8d9537a-d748-4d27-80f1-3081a0f9e4f0",
            "3836f512-76e6-42ce-ac59-3ebb22fd68c1",
            "bd6de6a7-52fc-48c8-8c5e-fd23b7c10188",
            "cce4809a-03b0-4fe0-ba13-429cbd0d7558",
            "40df8489-75ae-4911-8f06-4a1f9acf16c1",
            "82ffafb4-45eb-49ac-849a-ba43a4506726",
            "7cd23b4c-736b-43cc-9db0-a5a9cb8d7a09",
            "362d1d71-37cd-4fd4-9a92-7918064b6d6d",
            "5f3947e3-6ff5-48d0-ae96-73055960f640",
            "012a2285-4471-4eba-a08f-53617a7b135a",
            "0dba74f0-de08-4b5e-b76c-ff8ffbf4ac8b",
            "0f4fb2eb-8090-4e2d-a691-c6bb8d787233",
            "2cd0be7d-15fb-44b9-9fa9-5154a20180bf",
            "0105bd35-87d1-4ab8-a06f-e8738ad0d837"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791332,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791332,
          "parent_id": "5e44bd54-3362-4b1a-934b-acecce2afc7f",
          "parent_table": "block",
          "properties": {
            "title": [["Allocating Memory"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      },
      "bd6de6a7-52fc-48c8-8c5e-fd23b7c10188": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791327,
          "id": "bd6de6a7-52fc-48c8-8c5e-fd23b7c10188",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791327,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["It is good practice to use "],
              ["sizeof", [["c"]]],
              [
                " to compute the amount of memory to request since the result of "
              ],
              ["sizeof", [["c"]]],
              [" is implementation defined (except for "],
              ["character types", [["i"]]],
              [", which are "],
              ["char", [["c"]]],
              [", "],
              ["signed char", [["c"]]],
              [" and "],
              ["unsigned char", [["c"]]],
              [", for which "],
              ["sizeof", [["c"]]],
              [" is defined to always give "],
              ["1", [["c"]]],
              [")."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "cce4809a-03b0-4fe0-ba13-429cbd0d7558": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791327,
          "id": "cce4809a-03b0-4fe0-ba13-429cbd0d7558",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791327,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Because ", [["b"]]],
              ["malloc", [["b"], ["c"]]],
              [
                " might not be able to service the request, it might return a null pointer. It is important to check for this to prevent later attempts to dereference the null pointer.",
                [["b"]]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "d8d9537a-d748-4d27-80f1-3081a0f9e4f0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551936791326,
          "id": "d8d9537a-d748-4d27-80f1-3081a0f9e4f0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551936791326,
          "parent_id": "b26071e0-5a74-46c4-9ec9-dfe727186d35",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "int *p = malloc(10 * sizeof *p);\nif (p == NULL) \n{\n    perror(\"malloc() failed\");\n    return -1;\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      }
    },
    "space": {}
  }
}
