2251 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e"
      },
      "version": -1
    }
  ]
}
Response:+1999
{
  "recordMap": {
    "block": {
      "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "7613511c-9e5d-4873-b7b3-641025cad0be",
            "1a6ce0cd-bdc3-4c7c-a5ef-6fa1f1e0bbc0",
            "bb52f5f3-31bd-415f-a641-976d42cef43d",
            "43fad728-fad7-4ed3-a0b8-6649c5e4c397",
            "3f6d711f-057c-4de7-80d5-d37d6ab02d35",
            "877d16b9-61fa-4b1e-bd8e-a46e4eb43a33",
            "0cd8dde0-0282-47cd-86a3-f31872ee9731",
            "a4d945c4-c584-4792-8cab-2406a0d1ff8b",
            "11e53b17-80c5-4daf-9477-0536b360e53a",
            "46936932-570f-4824-8060-f56f4e5f72f5",
            "f66d1937-54c5-4ef0-a9b3-fa2644c66f6b",
            "05aeac02-f7de-46b2-b2a9-308dcab97857",
            "277eb1e2-651d-44b4-a044-c29d9c02bf44",
            "0c0d7863-3b2d-4066-9601-58a0b4e86d10",
            "dffde78b-3044-4c5d-a798-ff341b73bb09",
            "ce37dcd4-d5f4-4209-af4a-30680f0c3e3b"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930060,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930060,
          "parent_id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
          "parent_table": "block",
          "properties": {
            "title": [["Graph Trie Stack"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      }
    }
  }
}
45812 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+45552
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "05aeac02-f7de-46b2-b2a9-308dcab97857": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930059,
          "id": "05aeac02-f7de-46b2-b2a9-308dcab97857",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930059,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [["The MIT License (MIT)"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "quote",
          "version": 1
        }
      },
      "0c0d7863-3b2d-4066-9601-58a0b4e86d10": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930060,
          "id": "0c0d7863-3b2d-4066-9601-58a0b4e86d10",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930060,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Permission is hereby granted, free of charge, to any person obtaining > a copy of this software and associated documentation files (the > “Software”), to deal in the Software without restriction, including > without limitation the rights to use, copy, modify, merge, publish, > distribute, sublicense, and/or sell copies of the Software, and to > permit persons to whom the Software is furnished to do so, subject to > the following conditions:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "0cd8dde0-0282-47cd-86a3-f31872ee9731": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930058,
          "id": "0cd8dde0-0282-47cd-86a3-f31872ee9731",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930058,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              ["(GitHub, "],
              [
                "source",
                [
                  [
                    "a",
                    "https://github.com/waynewbishop/SwiftStructures/blob/master/Source/Factories/Trie.swift"
                  ]
                ]
              ],
              [")"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "11e53b17-80c5-4daf-9477-0536b360e53a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930058,
          "id": "11e53b17-80c5-4daf-9477-0536b360e53a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930058,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "In computer science, a stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a stack gives rise to its alternative name, LIFO (for last in, first out). Additionally, a peek operation may give access to the top without modifying the stack. (Wikipedia, "
              ],
              [
                "source",
                [
                  [
                    "a",
                    "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"
                  ]
                ]
              ],
              [")"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "1a6ce0cd-bdc3-4c7c-a5ef-6fa1f1e0bbc0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930056,
          "id": "1a6ce0cd-bdc3-4c7c-a5ef-6fa1f1e0bbc0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930056,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "In computer science, a graph is an abstract data type that is meant to implement the undirected graph and directed graph concepts from mathematics. A graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected graph or a set of ordered pairs for a directed graph. These pairs are known as edges, arcs, or lines for an undirected graph and as arrows, directed edges, directed arcs, or directed lines for a directed graph. The vertices may be part of the graph structure, or may be external entities represented by integer indices or references. A graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.). (Wikipedia, "
              ],
              [
                "source",
                [
                  [
                    "a",
                    "https://en.wikipedia.org/wiki/Graph_(abstract_data_type)"
                  ]
                ]
              ],
              [")"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "277eb1e2-651d-44b4-a044-c29d9c02bf44": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930059,
          "id": "277eb1e2-651d-44b4-a044-c29d9c02bf44",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930059,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Copyright (c) 2015, Wayne Bishop & Arbutus Software Inc."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "36fdcbe2-b28e-4eae-96d0-f3255977fddc": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "877a9a0f-6c10-4e9d-8bdb-3cc2915c2b71",
            "f7ef1c23-b978-474b-b835-7ed8dad7b0d6",
            "8bede447-ce80-444c-82d1-2632b3456cc9",
            "53cdd726-1e8b-40b7-8448-6603b743fbd9",
            "028b4cd7-aa4e-4a49-8c97-ea4ee879b0e3",
            "be52f167-db0d-4708-9c59-56231f34906d",
            "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105920000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552106160000,
          "parent_id": "e76d4290-6b0e-4932-91a6-0bbd351f3b6b",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Algorithms with Swift"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 38
        }
      },
      "3f6d711f-057c-4de7-80d5-d37d6ab02d35": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930057,
          "id": "3f6d711f-057c-4de7-80d5-d37d6ab02d35",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930057,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "In computer science, a trie, also called digital tree and sometimes radix tree or prefix tree (as they can be searched by prefixes), is a kind of search tree—an ordered tree data structure that is used to store a dynamic set or associative array where the keys are usually strings. (Wikipedia, "
              ],
              ["source", [["a", "https://en.wikipedia.org/wiki/Trie"]]],
              [")"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "43fad728-fad7-4ed3-a0b8-6649c5e4c397": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930057,
          "id": "43fad728-fad7-4ed3-a0b8-6649c5e4c397",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930057,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [["Trie", [["b"]]]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "46936932-570f-4824-8060-f56f4e5f72f5": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930059,
          "id": "46936932-570f-4824-8060-f56f4e5f72f5",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930059,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              ["See license info below and original code source at ("],
              [
                "github",
                [
                  [
                    "a",
                    "https://github.com/waynewbishop/SwiftStructures/blob/master/Source/Factories/Stack.swift"
                  ]
                ]
              ],
              [")"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "7613511c-9e5d-4873-b7b3-641025cad0be": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930052,
          "id": "7613511c-9e5d-4873-b7b3-641025cad0be",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930052,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [["Graph", [["b"]]]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "877d16b9-61fa-4b1e-bd8e-a46e4eb43a33": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930057,
          "id": "877d16b9-61fa-4b1e-bd8e-a46e4eb43a33",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930057,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "//\n//  Trie.swift\n//  SwiftStructures\n//\n//  Created by Wayne Bishop on 10/14/14.\n//  Copyright (c) 2014 Arbutus Software Inc. All rights reserved.\n//\nimport Foundation\n\n\npublic class Trie {\n    \n    private var root: TrieNode!\n    \n    \n    init(){\n        root = TrieNode()\n    }\n    \n    \n    \n    //builds a tree hierarchy of dictionary content\n    func append(word keyword: String) {\n        \n        \n        //trivial case\n        guard keyword.length > 0 else {\n            return\n        }\n        \n        \n        var current: TrieNode = root\n        \n        \n        while keyword.length != current.level {\n            \n            var childToUse: TrieNode!\n            let searchKey = keyword.substring(to: current.level + 1)\n            \n            \n            //print(\"current has \\(current.children.count) children..\")\n            \n            \n            //iterate through child nodes\n            for child in current.children {\n                \n                if (child.key == searchKey) {\n                    childToUse = child\n                    break\n                }\n                \n            }\n            \n            \n            //new node\n            if childToUse == nil {\n                \n                childToUse = TrieNode()\n                childToUse.key = searchKey\n                childToUse.level = current.level + 1\n                current.children.append(childToUse)\n            }\n            \n            \n            current = childToUse\n            \n            \n        } //end while\n        \n        \n        //final end of word check\n        if (keyword.length == current.level) {\n            current.isFinal = true\n            print(\"end of word reached!\")\n            return\n        }\n        \n        \n        \n    } //end function\n    \n    \n\n    \n    //find words based on the prefix\n    func search(forWord keyword: String) -> Array<String>! {\n        \n        \n        //trivial case\n        guard keyword.length > 0 else {\n            return nil\n        }\n        \n        \n        var current: TrieNode = root\n        var wordList = Array<String>()\n        \n        \n        while keyword.length != current.level {\n            \n            var childToUse: TrieNode!\n            let searchKey = keyword.substring(to: current.level + 1)\n            \n\n            //print(\"looking for prefix: \\(searchKey)..\")\n            \n            \n            //iterate through any child nodes\n            for child in current.children {\n                \n                if (child.key == searchKey) {\n                    childToUse = child\n                    current = childToUse\n                    break\n                }\n                \n            }\n            \n \n            if childToUse == nil {\n               return nil\n            }\n            \n            \n        } //end while\n        \n        \n        \n        //retrieve the keyword and any descendants\n        if ((current.key == keyword) && (current.isFinal)) {\n            wordList.append(current.key)\n        }\n\n        \n        //include only children that are words\n        for child in current.children {\n            \n            if (child.isFinal == true) {\n                wordList.append(child.key)\n            }\n            \n        }\n        \n        \n        return wordList\n\n        \n    } //end function\n    \n\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "7613511c-9e5d-4873-b7b3-641025cad0be",
            "1a6ce0cd-bdc3-4c7c-a5ef-6fa1f1e0bbc0",
            "bb52f5f3-31bd-415f-a641-976d42cef43d",
            "43fad728-fad7-4ed3-a0b8-6649c5e4c397",
            "3f6d711f-057c-4de7-80d5-d37d6ab02d35",
            "877d16b9-61fa-4b1e-bd8e-a46e4eb43a33",
            "0cd8dde0-0282-47cd-86a3-f31872ee9731",
            "a4d945c4-c584-4792-8cab-2406a0d1ff8b",
            "11e53b17-80c5-4daf-9477-0536b360e53a",
            "46936932-570f-4824-8060-f56f4e5f72f5",
            "f66d1937-54c5-4ef0-a9b3-fa2644c66f6b",
            "05aeac02-f7de-46b2-b2a9-308dcab97857",
            "277eb1e2-651d-44b4-a044-c29d9c02bf44",
            "0c0d7863-3b2d-4066-9601-58a0b4e86d10",
            "dffde78b-3044-4c5d-a798-ff341b73bb09",
            "ce37dcd4-d5f4-4209-af4a-30680f0c3e3b"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930060,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930060,
          "parent_id": "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
          "parent_table": "block",
          "properties": {
            "title": [["Graph Trie Stack"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      },
      "a4d945c4-c584-4792-8cab-2406a0d1ff8b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930058,
          "id": "a4d945c4-c584-4792-8cab-2406a0d1ff8b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930058,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [["Stack", [["b"]]]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "bb52f5f3-31bd-415f-a641-976d42cef43d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930057,
          "id": "bb52f5f3-31bd-415f-a641-976d42cef43d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930057,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "//\n//  GraphFactory.swift\n//  SwiftStructures\n//\n//  Created by Wayne Bishop on 6/7/14.\n//  Copyright (c) 2014 Arbutus Software Inc. All rights reserved.\n//\nimport Foundation\n\n\npublic class SwiftGraph {\n   \n    \n    //declare a default directed graph canvas\n    private var canvas: Array<Vertex>\n    public var isDirected: Bool\n    \n    \n    init() {\n        canvas = Array<Vertex>()\n        isDirected = true\n    }\n    \n    \n    //create a new vertex\n    func addVertex(key: String) -> Vertex {\n        \n        \n        //set the key\n        let childVertex: Vertex = Vertex()\n        childVertex.key = key\n        \n        \n        //add the vertex to the graph canvas\n        canvas.append(childVertex)\n        \n        \n        return childVertex\n    }\n    \n    \n    \n    //add edge to source vertex\n    func addEdge(source: Vertex, neighbor: Vertex, weight: Int) {\n        \n        \n        //create a new edge\n        let newEdge = Edge()\n        \n        \n        //establish the default properties\n        newEdge.neighbor = neighbor\n        newEdge.weight = weight\n        source.neighbors.append(newEdge)\n        \n        \n        print(\"The neighbor of vertex: \\(source.key as String!) is \\(neighbor.key as String!)..\")\n        \n        \n        //check condition for an undirected graph\n        if isDirected == false {\n            \n            \n           //create a new reversed edge\n           let reverseEdge = Edge()\n            \n            \n           //establish the reversed properties\n           reverseEdge.neighbor = source\n           reverseEdge.weight = weight\n           neighbor.neighbors.append(reverseEdge)\n            \n           print(\"The neighbor of vertex: \\(neighbor.key as String!) is \\(source.key as String!)..\")\n            \n        }\n        \n        \n    }\n\n    \n    \n    \n    \n    /* reverse the sequence of paths given the shortest path.\n       process analagous to reversing a linked list. */\n\n    func reversePath(_ head: Path!, source: Vertex) -> Path! {\n        \n        \n        guard head != nil else {\n            return head\n        }\n        \n        //mutated copy\n        var output = head\n        \n        \n        var current: Path! = output\n        var prev: Path!\n        var next: Path!\n        \n        \n        while(current != nil) {\n            next = current.previous\n            current.previous = prev\n            prev = current\n            current = next\n        }\n        \n        \n        //append the source path to the sequence\n        let sourcePath: Path = Path()\n        \n        sourcePath.destination = source\n        sourcePath.previous = prev\n        sourcePath.total = nil\n        \n        output = sourcePath\n        \n        \n        return output\n        \n    }\n\n    \n    \n    \n    //process Dijkstra's shortest path algorthim\n    func processDijkstra(_ source: Vertex, destination: Vertex) -> Path? {\n        \n        \n        var frontier: Array<Path> = Array<Path>()\n        var finalPaths: Array<Path> = Array<Path>()\n        \n        \n        //use source edges to create the frontier\n        for e in source.neighbors {\n            \n            let newPath: Path = Path()\n            \n            \n            newPath.destination = e.neighbor\n            newPath.previous = nil\n            newPath.total = e.weight\n            \n            \n            //add the new path to the frontier\n            frontier.append(newPath)\n            \n        }\n        \n\n        //construct the best path\n        var bestPath: Path = Path()\n        \n        \n        while frontier.count != 0 {\n            \n            //support path changes using the greedy approach\n            bestPath = Path()\n            var pathIndex: Int = 0\n\n            \n            for x in 0..<frontier.count {\n               \n                let itemPath: Path = frontier[x]\n                \n                if  (bestPath.total == nil) || (itemPath.total < bestPath.total) {\n                    bestPath = itemPath\n                    pathIndex = x\n                }\n                \n            }\n            \n            \n            \n            //enumerate the bestPath edges\n            for e in bestPath.destination.neighbors {\n                \n                let newPath: Path = Path()\n                \n                newPath.destination = e.neighbor\n                newPath.previous = bestPath\n                newPath.total = bestPath.total + e.weight\n                \n                \n                //add the new path to the frontier\n                frontier.append(newPath)\n                \n            }\n            \n            \n            //preserve the bestPath\n            finalPaths.append(bestPath)\n            \n            \n            //remove the bestPath from the frontier\n            //frontier.removeAtIndex(pathIndex) - Swift2\n            frontier.remove(at: pathIndex)\n            \n            \n            \n        } //end while\n        \n        \n    \n        //establish the shortest path as an optional\n        var shortestPath: Path! = Path()\n        \n        \n        for itemPath in finalPaths {\n            \n            if (itemPath.destination.key == destination.key) {\n                \n                if  (shortestPath.total == nil) || (itemPath.total < shortestPath.total) {\n                    shortestPath = itemPath\n                }\n                \n            }\n            \n        }\n        \n        \n        return shortestPath\n        \n    }\n    \n    \n    \n    ///an optimized version of Dijkstra's shortest path algorthim\n    func processDijkstraWithHeap(_ source: Vertex, destination: Vertex) -> Path! {\n        \n        \n        let frontier: PathHeap = PathHeap()\n        let finalPaths: PathHeap = PathHeap()\n        \n        \n        //use source edges to create the frontier\n        for e in source.neighbors {\n            \n            let newPath: Path = Path()\n            \n            \n            newPath.destination = e.neighbor\n            newPath.previous = nil\n            newPath.total = e.weight\n            \n            \n            //add the new path to the frontier\n            frontier.enQueue(newPath)\n            \n        }\n        \n        \n        //construct the best path\n        var bestPath: Path = Path()\n        \n        \n        while frontier.count != 0 {\n                        \n            //use the greedy approach to obtain the best path\n            bestPath = Path()\n            bestPath = frontier.peek()\n            \n            \n            //enumerate the bestPath edges\n            for e in bestPath.destination.neighbors {\n                \n                let newPath: Path = Path()\n                \n                newPath.destination = e.neighbor\n                newPath.previous = bestPath\n                newPath.total = bestPath.total + e.weight\n                \n                \n                //add the new path to the frontier\n                frontier.enQueue(newPath)\n                \n            }\n            \n            \n            //preserve the bestPaths that match destination\n            if (bestPath.destination.key == destination.key) {\n                finalPaths.enQueue(bestPath)\n            }\n            \n            \n            //remove the bestPath from the frontier\n            frontier.deQueue()\n            \n            \n        } //end while\n        \n        \n        \n        //obtain the shortest path from the heap\n        var shortestPath: Path! = Path()\n        shortestPath = finalPaths.peek()\n        \n        \n        return shortestPath\n        \n    }\n    \n    \n    //MARK: traversal algorithms\n    \n    \n    //bfs traversal with inout closure function\n    func traverse(_ startingv: Vertex, formula: (_ node: inout Vertex) -> ()) {\n\n        \n        //establish a new queue\n        let graphQueue: Queue<Vertex> = Queue<Vertex>()\n        \n        \n        //queue a starting vertex\n        graphQueue.enQueue(startingv)\n        \n        \n        while !graphQueue.isEmpty() {\n            \n            //traverse the next queued vertex\n            var vitem: Vertex = graphQueue.deQueue() as Vertex!\n            \n            \n            //add unvisited vertices to the queue\n            for e in vitem.neighbors {\n                if e.neighbor.visited == false {\n                    print(\"adding vertex: \\(e.neighbor.key!) to queue..\")\n                    graphQueue.enQueue(e.neighbor)\n                }\n            }\n            \n\n            /*\n            notes: this demonstrates how to invoke a closure with an inout parameter.\n            By passing by reference no return value is required.\n            */\n            \n            //invoke formula\n            formula(&vitem)\n            \n            \n        } //end while\n        \n        \n        print(\"graph traversal complete..\")\n        \n        \n    }\n\n    \n    \n    \n    //breadth first search\n    func traverse(_ startingv: Vertex) {\n        \n        \n        //establish a new queue\n        let graphQueue: Queue<Vertex> = Queue<Vertex>()\n        \n        \n        //queue a starting vertex\n        graphQueue.enQueue(startingv)\n        \n        \n        while !graphQueue.isEmpty() {\n            \n            //traverse the next queued vertex\n            let vitem = graphQueue.deQueue() as Vertex!\n            \n            guard vitem != nil else {\n                return\n            }\n            \n            //add unvisited vertices to the queue\n            for e in vitem!.neighbors {\n                if e.neighbor.visited == false {\n                    print(\"adding vertex: \\(e.neighbor.key!) to queue..\")\n                    graphQueue.enQueue(e.neighbor)\n                }\n            }\n            \n            \n            vitem!.visited = true\n            print(\"traversed vertex: \\(vitem!.key!)..\")\n            \n            \n        } //end while\n        \n        \n        print(\"graph traversal complete..\")\n        \n        \n    } //end function\n    \n    \n    \n    //use bfs with trailing closure to update all values\n    func update(startingv: Vertex, formula:((Vertex) -> Bool)) {\n        \n        \n        //establish a new queue\n        let graphQueue: Queue<Vertex> = Queue<Vertex>()\n        \n        \n        //queue a starting vertex\n        graphQueue.enQueue(startingv)\n        \n        \n        while !graphQueue.isEmpty() {\n            \n            //traverse the next queued vertex\n            let vitem = graphQueue.deQueue() as Vertex!            \n            \n            guard vitem != nil else {\n                return\n            }\n            \n            //add unvisited vertices to the queue\n            for e in vitem!.neighbors {\n                if e.neighbor.visited == false {\n                    print(\"adding vertex: \\(e.neighbor.key!) to queue..\")\n                    graphQueue.enQueue(e.neighbor)\n                }\n            }\n            \n            \n            //apply formula..\n            if formula(vitem!) == false {\n                print(\"formula unable to update: \\(vitem!.key)\")\n            }\n            else {\n                print(\"traversed vertex: \\(vitem!.key!)..\")\n            }\n            \n            vitem!.visited = true\n            \n            \n        } //end while\n        \n        \n        print(\"graph traversal complete..\")\n        \n        \n    }\n\n    \n\n    \n    \n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "ce37dcd4-d5f4-4209-af4a-30680f0c3e3b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930060,
          "id": "ce37dcd4-d5f4-4209-af4a-30680f0c3e3b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930060,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, > EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF > MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. > IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY > CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, > TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE > SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "dffde78b-3044-4c5d-a798-ff341b73bb09": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930060,
          "id": "dffde78b-3044-4c5d-a798-ff341b73bb09",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930060,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The above copyright notice and this permission notice shall be > included in all copies or substantial portions of the Software."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "e76d4290-6b0e-4932-91a6-0bbd351f3b6b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "4743a9b3-3ba1-4406-8fd8-92f831177a73",
            "40e2faa7-5ff3-4654-a114-f19b837c574b",
            "743fc1c3-bc9c-4386-8bb8-37bb9430112f",
            "85fc985e-d4f6-470c-a50e-d230fb7f7029",
            "b3a03a81-83e5-4085-b462-4a9e0b487f4a",
            "5b89258e-bcc1-4c2b-b7ec-53d72cea9e9e",
            "752e5fcf-89e9-482f-8ab5-40b382d1513b",
            "0bbae402-0f8d-4c53-9284-2bfa4e450424",
            "9f9ac142-3746-4907-b806-661ae15321d3",
            "4007debc-6666-4d3f-8faa-5ba1ed7a30fb",
            "2ebad693-9dff-4aeb-bb97-2b78d049b25e",
            "08b06e18-c5f3-4e40-a0be-39eaaab9fdc5",
            "c7a9a16f-d660-4db7-8d5b-012a3f06c296",
            "aec11d9f-8e77-49ff-9784-b941666239e5",
            "8e0cbefa-bb13-46a7-ae47-5d4863fae390",
            "9926a540-7aa3-4e8b-a880-0d25223917b7",
            "cfa2de35-cd00-48e5-aa49-c7bc809cd199",
            "75f61437-dd57-4152-ba5d-e1d11169b6f5",
            "ab64a7f2-ccc3-4ffd-98ca-cb7cc7d65a64",
            "346889aa-bbe6-4248-9382-9d44810882db",
            "6eadf518-5b93-4d64-9bc2-0e88e97a1ad5",
            "45e8edb6-720b-4879-a3f9-bdeeebc97a9f",
            "5367e1b7-d8c9-42c1-a35c-1508743d5105",
            "ab0095d7-f330-4c2a-9564-40c927e04cdd",
            "995be302-8fbf-4acc-9c9b-db5cfdd0521f",
            "e9e7dd97-8907-4c61-94c8-873542c4221d",
            "9f971757-8f39-4d94-9d24-c0b8b7100e34",
            "b51b495d-f653-4e2b-b92d-5af0d351982e",
            "9da019f7-f538-42a4-bf9f-a95e812e2233",
            "b5d22e19-0056-4916-bf50-cc1dc2f38c0e",
            "f3aea850-966d-47e0-bbd2-8564c5d35715",
            "e80e058c-cecb-4b11-af4a-b91c85302b9d",
            "2f2b8c00-b4d8-4005-9764-71297a1f77f4",
            "a95c626d-6b55-449a-91a2-173c29e1c6a7",
            "41f7ad78-47df-4ba7-9750-0c3f2e60ce1b",
            "e1154a97-185d-4fcd-81a8-6d4e1e7d3a99",
            "9455a2c2-402a-4a70-8aeb-9762505167c3",
            "77ad070c-dd39-4425-a996-cc8967f74b4e",
            "9667daa4-8e9a-40c6-8498-5fd2b4e46a1e",
            "67e4333d-b244-489f-94a9-5033eda1d62f",
            "00935eb8-d316-43d4-9d14-f133a4cf1c91",
            "41bf5b92-7d0a-4e59-af5d-5b1468ffec68",
            "18f00844-2ce5-4c04-9bd7-9a256ae07a77",
            "2f6abffd-8151-4ec2-9a32-2f5da3b5a767",
            "35e9a1fb-1c65-4c4d-b44b-becc6cd9f6bd",
            "2e9691dd-0811-4161-964f-0af0c454280b",
            "cb46a744-6c26-43e6-ba4b-4058eb63b196",
            "1beb1f79-8f57-4bf1-8bcb-e6737d583cda",
            "9ae8b978-28e6-44f1-af9c-629e5306665c",
            "10e2f070-4018-4205-8a93-00bc8fa64375",
            "bec5b2af-554c-4a6c-87b2-a65a4523f654",
            "41dd6dc2-8607-4978-9306-8747c2240710",
            "36fdcbe2-b28e-4eae-96d0-f3255977fddc",
            "1a7a68fa-5ed7-4026-bd09-6c438ee3c996",
            "298a6998-40b4-4079-ae0e-f0fc31d96e18",
            "d04ea4c2-1d96-49c5-b911-1de41c18c770",
            "d9d0d23b-6862-4787-ba04-328a8305821b",
            "2a406142-9c5f-402d-939e-888df54da249",
            "3b5feb34-031d-402a-804d-16d2d230a001",
            "66275fb3-9144-4a6b-a878-f81e4a354aa6"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552104898140,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "e76d4290-6b0e-4932-91a6-0bbd351f3b6b",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1570605960000,
          "parent_id": "4a02310c-f1a7-4b8f-8aff-7088c1decd8b",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential Swift"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 148
        }
      },
      "f66d1937-54c5-4ef0-a9b3-fa2644c66f6b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1552105930059,
          "id": "f66d1937-54c5-4ef0-a9b3-fa2644c66f6b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552105930059,
          "parent_id": "a2ae7a48-40a7-4668-b1f2-86f1667a4b3e",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "//\n//  Stack.swift\n//  SwiftStructures\n//\n//  Created by Wayne Bishop on 8/1/14.\n//  Copyright (c) 2014 Arbutus Software Inc. All rights reserved.\n//\nimport Foundation\n\n\nclass Stack<T> {\n    \n    private var top: Node<T>\n    \n    init() {\n        top = Node<T>()\n    }\n    \n    \n    //the number of items - O(n)\n    var count: Int {\n        \n        \n        //return trivial case\n        guard top.key != nil else {\n          return 0\n        }\n                \n        \n        var current = top\n        var x: Int = 1\n        \n        \n        //cycle through list\n        while current.next != nil {\n            current = current.next!\n            x += 1\n        }\n            \n        return x        \n        \n    }\n    \n    \n    //add item to the stack\n    func push(withKey key: T) {\n        \n        \n        //return trivial case\n        guard top.key != nil else {\n            top.key = key\n            return\n        }\n        \n        \n        //create new item\n        let childToUse = Node<T>()\n        childToUse.key = key\n            \n            \n        //set new created item at top\n        childToUse.next = top\n        top = childToUse        \n\n    }\n    \n\n    //remove item from the stack\n    func pop() {\n        \n        if self.count > 1 {\n            top = top.next\n        }\n        else {\n            top.key = nil\n        }\n        \n    }\n    \n    \n    //retrieve the top most item\n    func peek() -> T! {\n\n        \n        //determine instance\n        if let topitem = top.key {\n            return topitem\n        }\n            \n        else {\n            return nil\n        }\n        \n    }\n    \n    \n    \n    //check for value\n    func isEmpty() -> Bool {\n        \n        if self.count == 0 {\n            return true\n        }\n        \n        else {\n            return false\n        }\n        \n    }\n    \n\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
