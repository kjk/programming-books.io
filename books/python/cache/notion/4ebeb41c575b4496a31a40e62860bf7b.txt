2475 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "4ebeb41c-575b-4496-a31a-40e62860bf7b"
      },
      "version": -1
    }
  ]
}
Response:+2223
{
  "recordMap": {
    "block": {
      "4ebeb41c-575b-4496-a31a-40e62860bf7b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "d208e59c-2687-4956-b9f9-fc0e67c70860",
            "617a0008-6f46-40f1-bb67-05ed38c83562",
            "e507cf2f-024f-41b2-b072-1ad29c7102d8",
            "a6ab81ef-230b-4fd2-9b13-d7e04afb2037",
            "94d1f7d3-d744-4f2e-97da-1488e79d8269",
            "30fdad2b-8a44-4887-9aed-fa2e00500592",
            "7301d5e1-7de2-4db5-82c3-fe3810fcaeff",
            "ff83e454-16f0-4b34-8e7c-1dcd09a93334",
            "5417e9c1-ed4f-4c7a-89c2-a1de25ca80ce",
            "fec00670-5952-499d-9bf7-d1a40c0fdfe2",
            "7304cd1b-3db2-4b3d-827e-cfa20331f1f1",
            "3889a527-1574-4ede-972e-79fa3af21ed0",
            "35456a67-4a6f-4cdd-ba96-21543b9c6179",
            "a080e2f7-6cff-4a25-a2d2-77999eabe083",
            "74be6da5-034f-472b-b68d-b34a79a8ab24",
            "27fcc5d6-4a55-42c0-abfc-fe1a42e5bd16",
            "afc67ec0-826f-43fd-80d9-31f3c863e702",
            "f2a8d08d-ec73-46fa-8545-d202e70913c0",
            "16741000-9730-4123-936d-7dc58180b32d",
            "a8918a73-eb27-45ea-afde-c41b507e605f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550477220000,
          "parent_id": "8178616c-a0f2-4a08-93be-0454eaeffb70",
          "parent_table": "block",
          "properties": {
            "title": [["Part 1 Tokenizing Input with Lex"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      }
    }
  }
}
43275 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "4ebeb41c-575b-4496-a31a-40e62860bf7b"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+43015
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "12e6f78e-68a5-4972-90c9-6e1365ae6259": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "d0fd9252-d46d-4ec6-9727-60b1d9766b8a",
            "eecffaeb-508c-45b9-93c4-ae07958e5f67",
            "783f9dec-fe4f-457d-9349-b76cabd133c6",
            "ae9aef3d-dc0a-4b63-9830-5e3b3a5fffd4",
            "e895cb09-a4b0-4965-a04d-695253fcf7c6",
            "03bb9294-3af1-4922-b21f-12ca8b68a4f2",
            "7b2ed094-b20e-4b46-88a8-b786c61a0c44",
            "e25219f1-745b-4ecf-829e-e2ced443c394",
            "f6e30863-cc14-4b77-b9e4-678af9da3339",
            "19bec823-bee1-4db8-aae7-3c94b3289eb2",
            "2c5f9f60-b3bb-4af9-9650-f3854cc26954",
            "ded3913a-88c5-4173-b2a5-ee3d56b4fbd4",
            "e679da23-62f3-4936-a885-358039351210",
            "5101a914-c687-4402-85e8-f60ea14e09d2",
            "e7c7de31-d271-44c8-ac67-6bf3fe8fd35a",
            "104e530a-2d33-4e08-ba99-6add8955df0e",
            "8ee64259-4cde-4221-b561-4fa00141ee12",
            "61d34cb1-e32c-45a0-89c4-f6bcc8106406",
            "055ee7cf-dde6-4ae3-92be-cdc631da8800",
            "1fe63b14-6a86-4d94-bb88-fd772aa9e50a",
            "a0d16770-ed43-43f6-8843-dfd332e9a62a",
            "5cd586b9-f93d-45b5-8b42-389131f3b98a",
            "baeef860-4ff0-4b6a-aad7-4e8f498e193c",
            "a27718c5-df77-4fd4-b80b-880f0a024099",
            "b9edb898-2ed3-4d8d-b860-4fea918682e0",
            "59a19594-3471-4d12-94f1-36e9bd676676",
            "6b99d971-0b0a-4277-b11a-b8a0a2e65767",
            "305111c8-efce-4cf2-b2ae-7b5e31a27b42",
            "e69eaeab-d086-4d16-bfdf-ed205568003a",
            "7e17d23d-5054-4107-ac76-16ed47a9bab9",
            "a19ec278-02d7-497e-9253-2d8ba401504c",
            "8c1668f0-5926-46c6-bcc9-afb867f72fff",
            "678dc7c0-fc0a-4096-a589-e96b0c59b689",
            "5111db63-ec34-48fa-9385-65f1ed412544",
            "ce5582e1-265e-4411-b5ad-310114bbe696",
            "8e5d1469-2131-40f5-80a1-37775f6a92bf",
            "9a8d08e0-a7fc-4734-b98e-c6aa502c0296",
            "d0dd18a7-d6eb-4149-9290-6d2c0563e346",
            "8335872d-9934-4232-9e3b-d4a867eeb53b",
            "6b6906c1-a818-41da-b196-40ce5c79d75d",
            "d358cdeb-35cf-4d2c-bc1d-2cd972e06d1c",
            "0fe598dd-669d-4597-865b-a70269f22739",
            "f0827f02-6ec3-43d8-b5e7-1e8154aea2e4",
            "2f958caa-d35e-4318-8653-1bc5b9dd8d29",
            "ec88d89c-f50d-4507-ae65-fbd967413251",
            "3e59d57b-4794-4bea-8393-b15491a78daf",
            "7ad8cf4b-5e6d-4587-a7a4-5baeac3ddd3e",
            "71fc79ae-18b5-47de-ae64-7e006c4197b1",
            "f5cb76a8-3daa-457b-bd07-cba1128f36be",
            "db51fd68-7539-4de8-9163-adf389315acf",
            "4d1bdc86-f591-483d-af08-311471872e00",
            "64f7fb76-a905-459f-9848-39f70a91d717",
            "ead7b4b8-21f1-44cb-985a-91d4177083c6",
            "36a317ca-78d0-4ecb-9b15-5ef93e80050a",
            "58a3d205-85cc-4e4c-b6a7-120ac6ffe8c2",
            "923d79e7-da69-458a-afaf-02c5878265b7",
            "c45739b9-b62b-412d-a2f1-543a46098471",
            "93160469-58b6-4748-9409-736590c5a088",
            "3b4ea310-e6a8-46c2-8611-a6bb42f4a830",
            "a6af32a9-e16b-4cf0-b47b-d3233db8fe1c",
            "6ff391c5-7fe6-43e5-85af-4be549f51ef2",
            "1df53c02-b773-43f6-aa28-608e62986b60",
            "36ec32ec-9810-403d-8744-950ef6ffd6e0",
            "fbd6ee98-3b2f-4047-8c89-f040e48632d1",
            "452808ad-96bf-49e7-9654-c63c69b0f943",
            "4f60f5af-a6ef-47f6-a803-de208abc45dc",
            "57a8ac20-fb15-4105-ba66-5e964b980ece",
            "8af885bc-9e29-4a5d-bbbe-2fa89f676360",
            "7ac8c6ac-3435-4b87-9a15-8964e565a5ea",
            "59ee9eef-d549-4b36-9a78-dc16c6931074",
            "69f0ba3a-4a7a-4d7e-b1e4-66175a2bc4a5",
            "b6889a68-481f-4717-ad92-69e3fbc6822b",
            "4471bb80-6a8d-4231-991c-993b1f1b4546",
            "e2a2360d-afa8-4fa3-a587-ff33491a5d82",
            "18853f83-1609-44ff-b666-d773db031815",
            "2a4bdab1-4a05-4c5d-9f05-61c2e4d09b32",
            "c8a5f087-4aec-4ab9-ae1b-32be0e8f2c03",
            "79702721-88d2-434e-a365-7b5955374843",
            "344fdad6-1793-40af-955e-a3d442e7017f",
            "e523f3a8-2608-4666-b4e2-50623f6845b5",
            "116dbbe6-6d26-483b-804d-c272cdbc69cf",
            "219f109c-6616-4106-8423-d991c02e3117",
            "6d63d0c5-50ae-4db4-9f07-35143758ec99",
            "e843fa99-86d7-4bfb-9166-2033eb1f992d",
            "2ff15102-67d6-459f-83df-0746ba2ad07a",
            "6f02e2b4-2630-4916-8284-461d35c0ceba",
            "bb94a0ec-517f-4697-be69-5583e000f4ce",
            "154b1b38-7004-4d41-8644-1bd8e63d12f1",
            "0948c7f9-eb2d-4bcd-a594-61f186fbde1b",
            "79b6c8f7-9277-4e92-8a65-bca74759f010",
            "02086c81-c0ab-4fde-bbcc-a2658d63fb9a",
            "d227661a-e9f9-40ca-9433-51e50de93a16",
            "f3368a25-ea73-47b9-a00b-14f9df284000",
            "838f934b-d7fa-41ec-8322-b1f5da29ed00",
            "03f9f8c3-3d64-4e52-8b0d-e6593b8e594d",
            "46947443-a813-49e0-9b74-5160674f4c00",
            "b52ee895-5b14-4fff-9135-19763b0c3363",
            "0b9e0e51-5eaf-4610-9728-abc0e494ca3d",
            "9ee5c4a1-d9cd-4e14-bdd6-51c07187448e",
            "53044c34-0237-4d51-babf-695ec30cd5ea",
            "ec883772-3307-46a3-8831-ebcc8479e939",
            "bac53be2-2a1b-48e3-aa1b-79e8ac18c928",
            "17d7a738-de55-45b9-92c4-4e36da4283d1",
            "0e5b5bae-7af8-47d9-93b5-1f9a4d8945db",
            "eb6e22e5-db57-40af-8d3f-410dcb87c9ac",
            "95fbf7cb-40e2-4c36-a501-c03c481d163e",
            "927b026f-81fd-4293-9892-e5bf7326d371",
            "4bd133ec-d8bb-49c4-b2af-77f12d05a275",
            "4ea0cbdf-2998-42b4-a26c-5beff308a3ed",
            "324e4591-6ae9-4da8-bcc5-30139a2e19ac",
            "83a774bd-c15f-4309-8977-f8e4f50be338",
            "5c10db74-6c9b-46a8-a67d-444ca123464f",
            "7a32ead6-2e2c-468c-8903-97ef5c1f5826",
            "1f200c14-a05e-489f-8ec8-434c986484e9",
            "30ceef65-7546-4bf2-b6e1-1e5c9f9b6a0b",
            "01f7c429-57b5-471b-98a8-060161296f87",
            "18e7a2f0-3a77-43c9-ad5e-921f24d0b614",
            "d6a48c3e-ab2d-4744-b2a2-60c8cf2b7596",
            "e4b799b8-8e9f-453c-8f08-0bfd4dbbd9a3",
            "da277847-f950-4459-ad97-133ea0ad78ce",
            "bbb17854-7fc8-415c-abb4-0f00e1bc377f",
            "d63754fb-7075-40e8-8a0b-d5c6c3159c14",
            "622ea0d5-eb28-479d-b491-0064b7bd3e2b",
            "7aeced73-daff-461a-beb3-ac9281908249",
            "c281e326-821b-4954-bc04-26a84669525f",
            "29b739db-388a-4ad3-82fd-518387266590",
            "57fb5e91-5823-43c4-bc33-3fc05403acc6",
            "d94956a1-d35b-4d0c-b680-721f546f1f71",
            "5e4a2054-a560-4d77-a5e6-caf211dfdf17",
            "0614e7c4-ab7e-48a6-b4f9-4e18b5c80960",
            "67aee09a-004e-4bbf-b975-0c78a4095c91",
            "f7049071-561c-4389-a7ae-7fba8393467e",
            "d67efb92-a613-48d0-a8f1-a49d1ad758d4",
            "3f08a52f-b6f4-44de-9493-f92470261e38",
            "9b4abcde-038e-4074-917e-69a9e7d12d68",
            "946c9cce-1f0e-4a13-b4c7-2ab21decf95d",
            "a5a5e494-3b2c-4a74-93c1-5e2a040783d1",
            "23529713-0635-4f4c-baf6-a0026d2eb302",
            "3793b9f0-ce6b-49f1-8be0-025fb0d43d5e",
            "9638add4-a0c9-4d65-a501-54f781282862",
            "56040901-bae6-4815-99c7-24b34f763276",
            "7758f5fa-c162-4982-a60c-990e25f2419e",
            "eb073ef9-daa7-4761-914b-df41e5ac8f9c",
            "4af994c0-f79e-413f-862b-75aef3091427",
            "832edc59-a181-4ff4-b2b3-8d46d7010cea",
            "823f4633-26ba-47d4-9fc3-16d5a0be9ddd",
            "f113a62e-8bf0-48cd-8849-516dc9c9142d",
            "37612f35-daec-4874-88cb-f47a1ff0fff0",
            "2b7d3509-6e7a-4433-bf2b-39b4b72907ed",
            "e80e2a5b-7524-40b6-8186-2ac58eba60a7",
            "021cf1eb-bae2-4a94-9ca5-ca3f97013c4b",
            "b93a3b1f-470e-40af-81be-b68615dc6cbc",
            "99b97665-f73b-431d-8712-604d0d293cdc",
            "beba4a21-fb22-4446-8380-2bfb813087fb",
            "b488e901-dd9d-4c29-9888-3b6571294f72",
            "31b6443c-8138-4d48-b42c-32d0ad2c35b3",
            "bb7ade0c-7dde-4bcb-a99e-55b8e7ad129b",
            "f06187e3-3b77-40f0-998e-ac238a51d70e",
            "940db400-6eb3-414b-bbc3-e323fb10c228",
            "352e7478-0777-4eed-a7dc-6c5cfda8c228",
            "cbc04179-2f75-41aa-a735-d8f89d777a98",
            "b7ab1cfb-d43a-4580-afef-57329559b8ee",
            "c6b2440e-5845-4855-b9a7-6e71fa475380",
            "6dd13112-48b0-45e5-96f5-9dac91ba9add",
            "e7935abe-c453-4cbf-8d12-5413dca4ff3d",
            "bf96a1a7-3539-4716-81b7-6a29f26bc4a3",
            "c742053f-2405-4922-b77b-415630b20ec0",
            "553252d7-00dc-456d-87d0-04505400b5ea",
            "39449295-b064-4370-95d7-222daf5301cb",
            "e5aff37c-1f58-4f58-8ff7-d640f6d9085a",
            "e0ba4ef1-e15c-4c90-9f33-a87e69b01ebc",
            "4bc3ba38-2f91-455b-9146-7b9ec3c23c41",
            "37d7e8bb-3276-415a-8b97-5c22afc9b343",
            "bca69887-c59f-48b3-b7e3-8c5f47ba0299",
            "fc100f71-43db-4563-adaa-317499f09cab",
            "588fa72e-5672-4fb4-b59b-e280d96c75c0",
            "3271cae5-4c4e-4a3a-8d77-5b75883fc73b",
            "e3d3b26b-78cf-43c3-b162-dce28c8daa76",
            "54a59120-a30d-42cd-b0f4-c32a2ad7588f",
            "2cdd2bed-a4b4-40cf-b5d7-3fb625da5ee0",
            "fc45418d-1be6-4e18-9a27-24e6e11d79c5",
            "683952d7-a1ec-424e-8f20-3a013af52765",
            "f626e7c5-fff9-42f1-a676-69541e32b76c",
            "37b428aa-fab0-4996-9a57-03ceebfc4b72",
            "1b6bda3f-47f9-47a6-b6d5-cd0237482cdc",
            "37fb371c-61ec-457e-9cd5-41c7ee24b388",
            "b4555977-cdf4-41fa-a236-4580d30cf4f7",
            "6f6206ab-6bb5-4d46-bbb1-21eeeb808940",
            "a93c6203-4955-47e1-b729-0ef2b3170fa0",
            "3efa0cfc-4e46-4489-836e-7016854363b9",
            "0ceaa160-1640-4a18-b7ac-67eb3f6c07f3",
            "8178616c-a0f2-4a08-93be-0454eaeffb70",
            "4feeec83-7517-45bf-be00-827d7b0cc408",
            "071421a0-386d-4ff3-917e-c9fec4f2e56e",
            "0c3e026c-5232-4ace-b58a-709c31d3def1",
            "8df338c9-0989-456f-9c89-7e7d8181508f",
            "198107a6-91fb-470c-9532-d585ee573ef8",
            "688e0643-fc4a-4089-aec9-83a1e1160397",
            "12342696-83f5-4d3d-9ab5-b962ab2c61cb",
            "c3660f29-75e9-432c-b5a7-04be1cb80540",
            "91b30b9a-1632-4fea-b027-aad50145f929",
            "4c60cfca-6221-4f7a-a896-3b3a6401374c",
            "cfe93318-a8a0-463e-a3d7-a6f82855014e",
            "2668de0f-218b-4cb1-a992-0ffc286d78f5",
            "f9cef861-fa11-469e-9688-07cce105be5c",
            "abf8b5bd-5ca5-4f57-9ed7-8cf45afc823f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550227635308,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "12e6f78e-68a5-4972-90c9-6e1365ae6259",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571297100000,
          "parent_id": "91cce933-c759-48c0-ba99-d72c2ada4883",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential Python"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 817
        }
      },
      "16741000-9730-4123-936d-7dc58180b32d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "id": "16741000-9730-4123-936d-7dc58180b32d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450919,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [["Final preparations:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "numbered_list",
          "version": 1
        }
      },
      "27fcc5d6-4a55-42c0-abfc-fe1a42e5bd16": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "id": "27fcc5d6-4a55-42c0-abfc-fe1a42e5bd16",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450919,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "def t_COMMENT(t):\n    r'\\#.*'\n    pass\n    # No return value. Token discarded\n\n...Is the same as:\n\nt_ignore_COMMENT = r'\\#.*'\n##\n\n<sup>This is of course invalid if you're carrying out some action when you see a comment. In which case, use a function to define the regex rule.</sup> \n\nIf you haven't defined a token for some characters but still want to ignore it, use `t_ignore = \"<characters to ignore>\"` (these prefixes are necessary):          \n\nt_ignore_COMMENT = r'\\#.*'\nt_ignore  = ' \\t'    # ignores spaces and tabs\n\n##\n- When building the master regex, lex will add the regexes specified in the file as follows: \n1) Tokens defined by functions are added in the same order as they appear in the file. \n2) Tokens defined by strings are added in decreasing order of the string length of the string defining the regex for that token.\n\nIf you are matching `==` and `=` in the same file, take advantage of these rules.\n##\n- Literals are tokens that are returned as they are. Both `t.type` and `t.value` will be set to the character itself."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "30fdad2b-8a44-4887-9aed-fa2e00500592": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450917,
          "id": "30fdad2b-8a44-4887-9aed-fa2e00500592",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450917,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [["Breakdown"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "header",
          "version": 5
        }
      },
      "35456a67-4a6f-4cdd-ba96-21543b9c6179": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450918,
          "id": "35456a67-4a6f-4cdd-ba96-21543b9c6179",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450918,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "If some kind of action needs to be performed, a token rule can be specified as a function."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "3889a527-1574-4ede-972e-79fa3af21ed0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450918,
          "id": "3889a527-1574-4ede-972e-79fa3af21ed0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450918,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "For simple tokens, the regular expression can be specified as strings: "
              ],
              ["t_PLUS = r'\\+'", [["c"]]]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 5
        }
      },
      "4ebeb41c-575b-4496-a31a-40e62860bf7b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "d208e59c-2687-4956-b9f9-fc0e67c70860",
            "617a0008-6f46-40f1-bb67-05ed38c83562",
            "e507cf2f-024f-41b2-b072-1ad29c7102d8",
            "a6ab81ef-230b-4fd2-9b13-d7e04afb2037",
            "94d1f7d3-d744-4f2e-97da-1488e79d8269",
            "30fdad2b-8a44-4887-9aed-fa2e00500592",
            "7301d5e1-7de2-4db5-82c3-fe3810fcaeff",
            "ff83e454-16f0-4b34-8e7c-1dcd09a93334",
            "5417e9c1-ed4f-4c7a-89c2-a1de25ca80ce",
            "fec00670-5952-499d-9bf7-d1a40c0fdfe2",
            "7304cd1b-3db2-4b3d-827e-cfa20331f1f1",
            "3889a527-1574-4ede-972e-79fa3af21ed0",
            "35456a67-4a6f-4cdd-ba96-21543b9c6179",
            "a080e2f7-6cff-4a25-a2d2-77999eabe083",
            "74be6da5-034f-472b-b68d-b34a79a8ab24",
            "27fcc5d6-4a55-42c0-abfc-fe1a42e5bd16",
            "afc67ec0-826f-43fd-80d9-31f3c863e702",
            "f2a8d08d-ec73-46fa-8545-d202e70913c0",
            "16741000-9730-4123-936d-7dc58180b32d",
            "a8918a73-eb27-45ea-afde-c41b507e605f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550477220000,
          "parent_id": "8178616c-a0f2-4a08-93be-0454eaeffb70",
          "parent_table": "block",
          "properties": {
            "title": [["Part 1 Tokenizing Input with Lex"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      },
      "5417e9c1-ed4f-4c7a-89c2-a1de25ca80ce": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450918,
          "id": "5417e9c1-ed4f-4c7a-89c2-a1de25ca80ce",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450918,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "tokens = [\n   'NUMBER',\n   'PLUS',\n   'MINUS',\n   'TIMES',\n   'DIVIDE',\n   'LPAREN',\n   'RPAREN',\n]"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "617a0008-6f46-40f1-bb67-05ed38c83562": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450916,
          "id": "617a0008-6f46-40f1-bb67-05ed38c83562",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450916,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This section provides a simple example of how to "],
              ["tokenize", [["i"]]],
              [" user input, and then breaks it down line by line."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "7301d5e1-7de2-4db5-82c3-fe3810fcaeff": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450917,
          "id": "7301d5e1-7de2-4db5-82c3-fe3810fcaeff",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450917,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Import the module using "],
              ["import ply.lex", [["c"]]]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "numbered_list",
          "version": 1
        }
      },
      "7304cd1b-3db2-4b3d-827e-cfa20331f1f1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450918,
          "id": "7304cd1b-3db2-4b3d-827e-cfa20331f1f1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450918,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The regex rule for each string may be defined either as a string or as a function. In either case, the variable name should be prefixed by t_ to denote it is a rule for matching tokens."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "numbered_list",
          "version": 1
        }
      },
      "74be6da5-034f-472b-b68d-b34a79a8ab24": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "id": "74be6da5-034f-472b-b68d-b34a79a8ab24",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450919,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "If nothing is returned from a regex rule function, the token is discarded. If you want to discard a token, you can alternatively add t_ignore_ prefix to a regex rule variable instead of defining a function for the same rule."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "8178616c-a0f2-4a08-93be-0454eaeffb70": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "e2b8d242-5342-49aa-a768-fe900acfa763",
            "f632d5eb-6d34-40e6-9600-67eea3752500",
            "c4f33e6a-96b2-44f0-a6b7-654f49de1606",
            "4ebeb41c-575b-4496-a31a-40e62860bf7b",
            "e118ba4d-b89e-41cb-82de-bf7355406325"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393400000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "8178616c-a0f2-4a08-93be-0454eaeffb70",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550477220000,
          "parent_id": "12e6f78e-68a5-4972-90c9-6e1365ae6259",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Python Lex-Yacc"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 39
        }
      },
      "94d1f7d3-d744-4f2e-97da-1488e79d8269": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450917,
          "id": "94d1f7d3-d744-4f2e-97da-1488e79d8269",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450917,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "divider",
          "version": 1
        }
      },
      "a080e2f7-6cff-4a25-a2d2-77999eabe083": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450918,
          "id": "a080e2f7-6cff-4a25-a2d2-77999eabe083",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450918,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "def t_NUMBER(t):\n    r'\\d+'\n    t.value = int(t.value)\n    return t\nNote, the rule is specified as a doc string within the function. The function accepts one argument which is an instance of `LexToken`, performs some action and then returns back the argument. \n\nIf you want to use an external string as the regex rule for the function instead of specifying a doc string, consider the following example:\n\n@TOKEN(identifier)         # identifier is a string holding the regex\ndef t_ID(t):\n    ...      # actions\n\n* An instance of `LexToken` object (let's call this object `t`) has the following attributes:\n1) `t.type` which is the token type (as a string) (eg: `'NUMBER'`, `'PLUS'`, etc). By default, `t.type` is set to the name following the `t_` prefix.\n2) `t.value` which is the lexeme (the actual text matched) \n3) `t.lineno` which is the current line number (this is not automatically updated, as the lexer knows nothing of line numbers). Update lineno using a function called `t_newline`.\n\n## \n\ndef t_newline(t):\n    r'\\n+'\n    t.lexer.lineno += len(t.value)\n\n##\n4) `t.lexpos` which is the position of the token relative to the beginning of the input text."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "a6ab81ef-230b-4fd2-9b13-d7e04afb2037": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450917,
          "id": "a6ab81ef-230b-4fd2-9b13-d7e04afb2037",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450917,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Save this file as "],
              ["calclex.py", [["c"]]],
              [". We’ll be using this when building our Yacc parser."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "a8918a73-eb27-45ea-afde-c41b507e605f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "id": "a8918a73-eb27-45ea-afde-c41b507e605f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450919,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "Build the lexer using `lexer = lex.lex()`.\n\n##\n You can also put everything inside a class and call use instance of the class to define the lexer. Eg:\n\n##  \n   import ply.lex as lex  \n   class MyLexer(object):            \n         ...     # everything relating to token rules and error handling comes here as usual \n\n         # Build the lexer\n         def build(self, **kwargs):\n             self.lexer = lex.lex(module=self, **kwargs)\n\n         def test(self, data):\n             self.lexer.input(data)\n             for token in self.lexer.token():\n                 print(token)\n\n         # Build the lexer and try it out\n\n   m = MyLexer()\n   m.build()           # Build the lexer\n   m.test(\"3 + 4\")     #\n\nProvide input using `lexer.input(data)` where data is a string \n\nTo get the tokens, use `lexer.token()` which returns tokens matched. You can iterate over lexer in a loop as in:\n\n##\n\n  for i in lexer: \n      print(i)"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "afc67ec0-826f-43fd-80d9-31f3c863e702": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "id": "afc67ec0-826f-43fd-80d9-31f3c863e702",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450919,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [["Define a list of literals as such:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "d208e59c-2687-4956-b9f9-fc0e67c70860": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450914,
          "id": "d208e59c-2687-4956-b9f9-fc0e67c70860",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450914,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "There are two steps that the code from example 1 carried out: one was "
              ],
              ["tokenizing", [["i"]]],
              [
                " the input, which means it looked for symbols that constitute the arithmetic expression, and the second step was "
              ],
              ["parsing", [["i"]]],
              [
                ", which involves analysing the extracted tokens and evaluating the result."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "e507cf2f-024f-41b2-b072-1ad29c7102d8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450917,
          "id": "e507cf2f-024f-41b2-b072-1ad29c7102d8",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450917,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "import ply.lex as lex\n\n# List of token names. This is always required\ntokens = [\n   'NUMBER',\n   'PLUS',\n   'MINUS',\n   'TIMES',\n   'DIVIDE',\n   'LPAREN',\n   'RPAREN',\n]\n\n# Regular expression rules for simple tokens\nt_PLUS    = r'\\+'\nt_MINUS   = r'-'\nt_TIMES   = r'\\*'\nt_DIVIDE  = r'/'\nt_LPAREN  = r'\\('\nt_RPAREN  = r'\\)'\n\n# A regular expression rule with some action code\ndef t_NUMBER(t):\n    r'\\d+'\n    t.value = int(t.value)    \n    return t\n\n# Define a rule so we can track line numbers\ndef t_newline(t):\n    r'\\n+'\n    t.lexer.lineno += len(t.value)\n\n# A string containing ignored characters (spaces and tabs)\nt_ignore  = ' \\t'\n\n# Error handling rule\ndef t_error(t):\n    print(\"Illegal character '%s'\" % t.value[0])\n    t.lexer.skip(1)\n\n# Build the lexer\nlexer = lex.lex()\n\n# Give the lexer some input\nlexer.input(data)\n\n# Tokenize\nwhile True:\n    tok = lexer.token()\n    if not tok: \n        break      # No more input\n    print(tok)"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "f2a8d08d-ec73-46fa-8545-d202e70913c0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450919,
          "id": "f2a8d08d-ec73-46fa-8545-d202e70913c0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450919,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "literals = [ '+', '-', '*', '/' ]\n\nor,\n\nliterals = \"+-*/\"\n\n##\n\nIt is possible to write token functions that perform additional actions when literals are matched. However, you'll need to set the token type appropriately. For example:\n\nliterals = [ '{', '}' ]\n\ndef t_lbrace(t):\n    r'\\{'\n    t.type = '{'  # Set token type to the expected literal (ABSOLUTE MUST if this is a literal)\n    return t\n\n##\n- Handle errors with t_error function.\n\n# Error handling rule\ndef t_error(t):\n  print(\"Illegal character '%s'\" % t.value[0])\n  t.lexer.skip(1) # skip the illegal token (don't process it)\n\nIn general, `t.lexer.skip(n)` skips n characters in the input string."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "fec00670-5952-499d-9bf7-d1a40c0fdfe2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450918,
          "id": "fec00670-5952-499d-9bf7-d1a40c0fdfe2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450918,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              ["tokens", [["c"]]],
              [
                " could also be a tuple of strings (rather than a string), where each string denotes a token as before."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "ff83e454-16f0-4b34-8e7c-1dcd09a93334": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550393450918,
          "id": "ff83e454-16f0-4b34-8e7c-1dcd09a93334",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550393450918,
          "parent_id": "4ebeb41c-575b-4496-a31a-40e62860bf7b",
          "parent_table": "block",
          "properties": {
            "title": [
              ["All lexers must provide a list called "],
              ["tokens", [["c"]]],
              [
                " that defines all of the possible token names that can be produced by the lexer. This list is always required."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "numbered_list",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
