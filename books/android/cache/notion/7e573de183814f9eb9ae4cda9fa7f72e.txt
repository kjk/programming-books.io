1746 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e"
      },
      "version": -1
    }
  ]
}
Response:+1494
{
  "recordMap": {
    "block": {
      "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "731cca2c-3790-4223-ae95-3cddecdcf0a7",
            "09f8e89e-f3c4-4869-9bf5-51e1841a684e",
            "d27f9a97-7ff6-41e6-9714-50f8c04aa195",
            "1293b690-5582-4b77-8086-bfdeb9970889",
            "18b9cc3a-9a41-45f7-992b-dc23d8f17f4b",
            "0f7eca36-110b-4e1d-a541-c69251fc37d1"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558050,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558050,
          "parent_id": "1132475f-3f52-4abc-8b7e-1d1ad503adaa",
          "parent_table": "block",
          "properties": {
            "title": [["Optimized VideoView in ListView"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      }
    }
  }
}
48644 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+48384
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "09f8e89e-f3c4-4869-9bf5-51e1841a684e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558048,
          "id": "09f8e89e-f3c4-4869-9bf5-51e1841a684e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558048,
          "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "parent_table": "block",
          "properties": {
            "title": [["Custom VideoView Layout:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "0f7eca36-110b-4e1d-a541-c69251fc37d1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558050,
          "id": "0f7eca36-110b-4e1d-a541-c69251fc37d1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558050,
          "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Help from this "],
              [
                "gitub repository",
                [
                  [
                    "a",
                    "https://github.com/aizhang/Android-VideoView/blob/master/src/com/ai/videoview/widget/VideoView.java"
                  ]
                ]
              ],
              [
                ". Though It has some issues as it was written 3 years ago I managed to fix them on my own as written above."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "1132475f-3f52-4abc-8b7e-1d1ad503adaa": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "6288bef9-9a9c-42f9-b66b-d53a22c1f859",
            "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456520000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "1132475f-3f52-4abc-8b7e-1d1ad503adaa",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456640000,
          "parent_id": "f90b0a6b-6483-43e2-8dc5-ed6e8f5c0780",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Optimized VideoView"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 36
        }
      },
      "1293b690-5582-4b77-8086-bfdeb9970889": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558048,
          "id": "1293b690-5582-4b77-8086-bfdeb9970889",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558048,
          "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Code for custom Optimized "],
              ["VideoView", [["c"]]],
              [":"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "18b9cc3a-9a41-45f7-992b-dc23d8f17f4b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558048,
          "id": "18b9cc3a-9a41-45f7-992b-dc23d8f17f4b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558048,
          "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "package your.package.com.whateveritis;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.SurfaceTexture;\nimport android.media.AudioManager;\nimport android.media.MediaPlayer;\nimport android.media.MediaPlayer.OnCompletionListener;\nimport android.media.MediaPlayer.OnErrorListener;\nimport android.media.MediaPlayer.OnInfoListener;\nimport android.net.Uri;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.MotionEvent;\nimport android.view.Surface;\nimport android.view.TextureView;\nimport android.view.View;\nimport android.widget.MediaController;\nimport android.widget.MediaController.MediaPlayerControl;\n\nimport java.io.IOException;\n\n\n/**\n * VideoView is used to play video, just like\n * {@link android.widget.VideoView VideoView}. We define a custom view, because\n * we could not use {@link android.widget.VideoView VideoView} in ListView. <br/>\n * VideoViews inside ScrollViews do not scroll properly. Even if you use the\n * workaround to set the background color, the MediaController does not scroll\n * along with the VideoView. Also, the scrolling video looks horrendous with the\n * workaround, lots of flickering.\n *\n * @author leo\n */\npublic class VideoView extends TextureView implements MediaPlayerControl {\n\n    private static final String TAG = \"tag\";\n\n    // all possible internal states\n    private static final int STATE_ERROR = -1;\n    private static final int STATE_IDLE = 0;\n    private static final int STATE_PREPARING = 1;\n    private static final int STATE_PREPARED = 2;\n    private static final int STATE_PLAYING = 3;\n    private static final int STATE_PAUSED = 4;\n    private static final int STATE_PLAYBACK_COMPLETED = 5;\n\n    // currentState is a VideoView object's current state.\n    // targetState is the state that a method caller intends to reach.\n    // For instance, regardless the VideoView object's current state,\n    // calling pause() intends to bring the object to a target state\n    // of STATE_PAUSED.\n    private int mCurrentState = STATE_IDLE;\n    private int mTargetState = STATE_IDLE;\n\n    // Stuff we need for playing and showing a video\n    private MediaPlayer mMediaPlayer;\n    private int mVideoWidth;\n    private int mVideoHeight;\n    private int mSurfaceWidth;\n    private int mSurfaceHeight;\n    private SurfaceTexture mSurfaceTexture;\n    private Surface mSurface;\n    private MediaController mMediaController;\n    private MediaPlayer.OnCompletionListener mOnCompletionListener;\n    private MediaPlayer.OnPreparedListener mOnPreparedListener;\n\n    private MediaPlayer.OnErrorListener mOnErrorListener;\n    private MediaPlayer.OnInfoListener mOnInfoListener;\n\n    private int mSeekWhenPrepared; // recording the seek position while\n    // preparing\n    private int mCurrentBufferPercentage;\n    private int mAudioSession;\n    private Uri mUri;\n\n    private Context mContext;\n\n    public VideoView(final Context context) {\n        super(context);\n        mContext = context;\n        initVideoView();\n    }\n\n    public VideoView(final Context context, final AttributeSet attrs) {\n        super(context, attrs);\n        mContext = context;\n        initVideoView();\n    }\n\n    public VideoView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        mContext = context;\n        initVideoView();\n    }\n\n    public void initVideoView() {\n        mVideoHeight = 0;\n        mVideoWidth = 0;\n        setFocusable(false);\n        setSurfaceTextureListener(mSurfaceTextureListener);\n    }\n\n    public int resolveAdjustedSize(int desiredSize, int measureSpec) {\n        int result = desiredSize;\n        int specMode = MeasureSpec.getMode(measureSpec);\n        int specSize = MeasureSpec.getSize(measureSpec);\n\n        switch (specMode) {\n            case MeasureSpec.UNSPECIFIED:\n            /*\n             * Parent says we can be as big as we want. Just don't be larger\n             * than max size imposed on ourselves.\n             */\n                result = desiredSize;\n                break;\n\n            case MeasureSpec.AT_MOST:\n            /*\n             * Parent says we can be as big as we want, up to specSize. Don't be\n             * larger than specSize, and don't be larger than the max size\n             * imposed on ourselves.\n             */\n                result = Math.min(desiredSize, specSize);\n                break;\n\n            case MeasureSpec.EXACTLY:\n                // No choice. Do what we are told.\n                result = specSize;\n                break;\n        }\n        return result;\n    }\n\n    public void setVideoPath(String path) {\n        Log.d(TAG, \"Setting video path to: \" + path);\n        setVideoURI(Uri.parse(path));\n    }\n\n    public void setVideoURI(Uri _videoURI) {\n        mUri = _videoURI;\n        mSeekWhenPrepared = 0;\n        requestLayout();\n        invalidate();\n        openVideo();\n    }\n\n    public Uri getUri() {\n        return mUri;\n    }\n\n    public void setSurfaceTexture(SurfaceTexture _surfaceTexture) {\n        mSurfaceTexture = _surfaceTexture;\n    }\n\n    public void openVideo() {\n        if ((mUri == null) || (mSurfaceTexture == null)) {\n            Log.d(TAG, \"Cannot open video, uri or surface texture is null.\");\n            return;\n        }\n        // Tell the music playback service to pause\n        // TODO: these constants need to be published somewhere in the\n        // framework.\n        Intent i = new Intent(\"com.android.music.musicservicecommand\");\n        i.putExtra(\"command\", \"pause\");\n        mContext.sendBroadcast(i);\n        release(false);\n        try {\n            mSurface = new Surface(mSurfaceTexture);\n            mMediaPlayer = new MediaPlayer();\n            if (mAudioSession != 0) {\n                mMediaPlayer.setAudioSessionId(mAudioSession);\n            } else {\n                mAudioSession = mMediaPlayer.getAudioSessionId();\n            }\n\n            mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);\n            mMediaPlayer.setOnCompletionListener(mCompleteListener);\n            mMediaPlayer.setOnPreparedListener(mPreparedListener);\n            mMediaPlayer.setOnErrorListener(mErrorListener);\n            mMediaPlayer.setOnInfoListener(mOnInfoListener);\n            mMediaPlayer.setOnVideoSizeChangedListener(mVideoSizeChangedListener);\n\n            mMediaPlayer.setSurface(mSurface);\n            mCurrentBufferPercentage = 0;\n            mMediaPlayer.setDataSource(mContext, mUri);\n\n            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\n            mMediaPlayer.setScreenOnWhilePlaying(true);\n\n            mMediaPlayer.prepareAsync();\n            mCurrentState = STATE_PREPARING;\n        } catch (IllegalStateException e) {\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n            String msg = (e.getMessage()==null)?\"\":e.getMessage();\n            Log.i(\"\",msg);  // TODO auto-generated catch block\n        } catch (IOException e) {\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n            String msg = (e.getMessage()==null)?\"\":e.getMessage();\n            Log.i(\"\",msg);  // TODO auto-generated catch block\n        }\n    }\n\n    public void stopPlayback() {\n        if (mMediaPlayer != null) {\n            mMediaPlayer.stop();\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n            if (null != mMediaControllListener) {\n                mMediaControllListener.onStop();\n            }\n        }\n    }\n\n    public void setMediaController(MediaController controller) {\n        if (mMediaController != null) {\n            mMediaController.hide();\n        }\n        mMediaController = controller;\n        attachMediaController();\n    }\n\n    private void attachMediaController() {\n        if (mMediaPlayer != null && mMediaController != null) {\n            mMediaController.setMediaPlayer(this);\n            View anchorView = this.getParent() instanceof View ? (View) this.getParent() : this;\n            mMediaController.setAnchorView(anchorView);\n            mMediaController.setEnabled(isInPlaybackState());\n        }\n    }\n\n    private void release(boolean cleartargetstate) {\n        Log.d(TAG, \"Releasing media player.\");\n        if (mMediaPlayer != null) {\n            mMediaPlayer.reset();\n            mMediaPlayer.release();\n            mMediaPlayer = null;\n            mCurrentState = STATE_IDLE;\n            if (cleartargetstate) {\n                mTargetState = STATE_IDLE;\n            }\n        } else {\n            Log.d(TAG, \"Media player was null, did not release.\");\n        }\n    }\n\n    @Override\n    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {\n        // Will resize the view if the video dimensions have been found.\n        // video dimensions are found after onPrepared has been called by\n        // MediaPlayer\n        int width = getDefaultSize(mVideoWidth, widthMeasureSpec);\n        int height = getDefaultSize(mVideoHeight, heightMeasureSpec);\n        if ((mVideoWidth > 0) && (mVideoHeight > 0)) {\n            if ((mVideoWidth * height) > (width * mVideoHeight)) {\n                Log.d(TAG, \"Video too tall, change size.\");\n                height = (width * mVideoHeight) / mVideoWidth;\n            } else if ((mVideoWidth * height) < (width * mVideoHeight)) {\n                Log.d(TAG, \"Video too wide, change size.\");\n                width = (height * mVideoWidth) / mVideoHeight;\n            } else {\n                Log.d(TAG, \"Aspect ratio is correct.\");\n            }\n        }\n        setMeasuredDimension(width, height);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        if (isInPlaybackState() && mMediaController != null) {\n            toggleMediaControlsVisiblity();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onTrackballEvent(MotionEvent ev) {\n        if (isInPlaybackState() && mMediaController != null) {\n            toggleMediaControlsVisiblity();\n        }\n        return false;\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        boolean isKeyCodeSupported = keyCode != KeyEvent.KEYCODE_BACK && keyCode != KeyEvent.KEYCODE_VOLUME_UP && keyCode != KeyEvent.KEYCODE_VOLUME_DOWN\n                && keyCode != KeyEvent.KEYCODE_VOLUME_MUTE && keyCode != KeyEvent.KEYCODE_MENU && keyCode != KeyEvent.KEYCODE_CALL\n                && keyCode != KeyEvent.KEYCODE_ENDCALL;\n        if (isInPlaybackState() && isKeyCodeSupported && mMediaController != null) {\n            if (keyCode == KeyEvent.KEYCODE_HEADSETHOOK || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {\n                if (mMediaPlayer.isPlaying()) {\n                    pause();\n                    mMediaController.show();\n                } else {\n                    start();\n                    mMediaController.hide();\n                }\n                return true;\n            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_PLAY) {\n                if (!mMediaPlayer.isPlaying()) {\n                    start();\n                    mMediaController.hide();\n                }\n                return true;\n            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_STOP || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE) {\n                if (mMediaPlayer.isPlaying()) {\n                    pause();\n                    mMediaController.show();\n                }\n                return true;\n            } else {\n                toggleMediaControlsVisiblity();\n            }\n        }\n\n        return super.onKeyDown(keyCode, event);\n    }\n\n    private void toggleMediaControlsVisiblity() {\n        if (mMediaController.isShowing()) {\n            mMediaController.hide();\n        } else {\n            mMediaController.show();\n        }\n    }\n\n    public void start() {\n        // This can potentially be called at several points, it will go through\n        // when all conditions are ready\n        // 1. When setting the video URI\n        // 2. When the surface becomes available\n        // 3. From the activity\n        if (isInPlaybackState()) {\n            mMediaPlayer.start();\n            mCurrentState = STATE_PLAYING;\n            if (null != mMediaControllListener) {\n                mMediaControllListener.onStart();\n            }\n        } else {\n            Log.d(TAG, \"Could not start. Current state \" + mCurrentState);\n        }\n        mTargetState = STATE_PLAYING;\n    }\n\n    public void pause() {\n        if (isInPlaybackState()) {\n            if (mMediaPlayer.isPlaying()) {\n                mMediaPlayer.pause();\n                mCurrentState = STATE_PAUSED;\n                if (null != mMediaControllListener) {\n                    mMediaControllListener.onPause();\n                }\n            }\n        }\n        mTargetState = STATE_PAUSED;\n    }\n\n    public void suspend() {\n        release(false);\n    }\n\n    public void resume() {\n        openVideo();\n    }\n\n    @Override\n    public int getDuration() {\n        if (isInPlaybackState()) {\n            return mMediaPlayer.getDuration();\n        }\n\n        return -1;\n    }\n\n    @Override\n    public int getCurrentPosition() {\n        if (isInPlaybackState()) {\n            return mMediaPlayer.getCurrentPosition();\n        }\n        return 0;\n    }\n\n    @Override\n    public void seekTo(int msec) {\n        if (isInPlaybackState()) {\n            mMediaPlayer.seekTo(msec);\n            mSeekWhenPrepared = 0;\n        } else {\n            mSeekWhenPrepared = msec;\n        }\n    }\n\n    @Override\n    public boolean isPlaying() {\n        return isInPlaybackState() && mMediaPlayer.isPlaying();\n    }\n\n    @Override\n    public int getBufferPercentage() {\n        if (mMediaPlayer != null) {\n            return mCurrentBufferPercentage;\n        }\n        return 0;\n    }\n\n    private boolean isInPlaybackState() {\n        return ((mMediaPlayer != null) && (mCurrentState != STATE_ERROR) && (mCurrentState != STATE_IDLE) && (mCurrentState != STATE_PREPARING));\n    }\n\n    @Override\n    public boolean canPause() {\n        return false;\n    }\n\n    @Override\n    public boolean canSeekBackward() {\n        return false;\n    }\n\n    @Override\n    public boolean canSeekForward() {\n        return false;\n    }\n\n    @Override\n    public int getAudioSessionId() {\n        if (mAudioSession == 0) {\n            MediaPlayer foo = new MediaPlayer();\n            mAudioSession = foo.getAudioSessionId();\n            foo.release();\n        }\n        return mAudioSession;\n    }\n\n    // Listeners\n    private MediaPlayer.OnBufferingUpdateListener mBufferingUpdateListener = new MediaPlayer.OnBufferingUpdateListener() {\n        @Override\n        public void onBufferingUpdate(final MediaPlayer mp, final int percent) {\n            mCurrentBufferPercentage = percent;\n        }\n    };\n\n    private MediaPlayer.OnCompletionListener mCompleteListener = new MediaPlayer.OnCompletionListener() {\n        @Override\n        public void onCompletion(final MediaPlayer mp) {\n            mCurrentState = STATE_PLAYBACK_COMPLETED;\n            mTargetState = STATE_PLAYBACK_COMPLETED;\n            mSurface.release();\n\n            if (mMediaController != null) {\n                mMediaController.hide();\n            }\n\n            if (mOnCompletionListener != null) {\n                mOnCompletionListener.onCompletion(mp);\n            }\n\n            if (mMediaControllListener != null) {\n                mMediaControllListener.onComplete();\n            }\n        }\n    };\n\n    private MediaPlayer.OnPreparedListener mPreparedListener = new MediaPlayer.OnPreparedListener() {\n        @Override\n        public void onPrepared(final MediaPlayer mp) {\n            mCurrentState = STATE_PREPARED;\n\n            mMediaController = new MediaController(getContext());\n\n            if (mOnPreparedListener != null) {\n                mOnPreparedListener.onPrepared(mMediaPlayer);\n            }\n            if (mMediaController != null) {\n                mMediaController.setEnabled(true);\n                //mMediaController.setAnchorView(getRootView());\n            }\n\n            mVideoWidth = mp.getVideoWidth();\n            mVideoHeight = mp.getVideoHeight();\n\n            int seekToPosition = mSeekWhenPrepared; // mSeekWhenPrepared may be\n            // changed after seekTo()\n            // call\n            if (seekToPosition != 0) {\n                seekTo(seekToPosition);\n            }\n\n            requestLayout();\n            invalidate();\n            if ((mVideoWidth != 0) && (mVideoHeight != 0)) {\n                if (mTargetState == STATE_PLAYING) {\n                    mMediaPlayer.start();\n                    if (null != mMediaControllListener) {\n                        mMediaControllListener.onStart();\n                    }\n                }\n            } else {\n                if (mTargetState == STATE_PLAYING) {\n                    mMediaPlayer.start();\n                    if (null != mMediaControllListener) {\n                        mMediaControllListener.onStart();\n                    }\n                }\n            }\n        }\n    };\n\n    private MediaPlayer.OnVideoSizeChangedListener mVideoSizeChangedListener = new MediaPlayer.OnVideoSizeChangedListener() {\n        @Override\n        public void onVideoSizeChanged(final MediaPlayer mp, final int width, final int height) {\n            mVideoWidth = mp.getVideoWidth();\n            mVideoHeight = mp.getVideoHeight();\n            if (mVideoWidth != 0 && mVideoHeight != 0) {\n                requestLayout();\n            }\n        }\n    };\n\n    private MediaPlayer.OnErrorListener mErrorListener = new MediaPlayer.OnErrorListener() {\n        @Override\n        public boolean onError(final MediaPlayer mp, final int what, final int extra) {\n            Log.d(TAG, \"Error: \" + what + \",\" + extra);\n            mCurrentState = STATE_ERROR;\n            mTargetState = STATE_ERROR;\n\n            if (mMediaController != null) {\n                mMediaController.hide();\n            }\n\n            /* If an error handler has been supplied, use it and finish. */\n            if (mOnErrorListener != null) {\n                if (mOnErrorListener.onError(mMediaPlayer, what, extra)) {\n                    return true;\n                }\n            }\n\n            /*\n             * Otherwise, pop up an error dialog so the user knows that\n             * something bad has happened. Only try and pop up the dialog if\n             * we're attached to a window. When we're going away and no longer\n             * have a window, don't bother showing the user an error.\n             */\n            if (getWindowToken() != null) {\n\n//                new AlertDialog.Builder(mContext).setMessage(\"Error: \" + what + \",\" + extra).setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n//                    public void onClick(DialogInterface dialog, int whichButton) {\n//                        /*\n//                         * If we get here, there is no onError listener, so at\n//                         * least inform them that the video is over.\n//                         */\n//                        if (mOnCompletionListener != null) {\n//                            mOnCompletionListener.onCompletion(mMediaPlayer);\n//                        }\n//                    }\n//                }).setCancelable(false).show();\n            }\n            return true;\n        }\n    };\n\n    SurfaceTextureListener mSurfaceTextureListener = new SurfaceTextureListener() {\n        @Override\n        public void onSurfaceTextureAvailable(final SurfaceTexture surface, final int width, final int height) {\n            Log.d(TAG, \"onSurfaceTextureAvailable.\");\n            mSurfaceTexture = surface;\n            openVideo();\n        }\n\n        @Override\n        public void onSurfaceTextureSizeChanged(final SurfaceTexture surface, final int width, final int height) {\n            Log.d(TAG, \"onSurfaceTextureSizeChanged: \" + width + '/' + height);\n            mSurfaceWidth = width;\n            mSurfaceHeight = height;\n            boolean isValidState = (mTargetState == STATE_PLAYING);\n            boolean hasValidSize = (mVideoWidth == width && mVideoHeight == height);\n            if (mMediaPlayer != null && isValidState && hasValidSize) {\n                if (mSeekWhenPrepared != 0) {\n                    seekTo(mSeekWhenPrepared);\n                }\n                start();\n            }\n        }\n\n        @Override\n        public boolean onSurfaceTextureDestroyed(final SurfaceTexture surface) {\n\n            mSurface = null;\n            if (mMediaController != null)\n                mMediaController.hide();\n            release(true);\n            return true;\n        }\n\n        @Override\n        public void onSurfaceTextureUpdated(final SurfaceTexture surface) {\n\n        }\n    };\n\n    /**\n     * Register a callback to be invoked when the media file is loaded and ready\n     * to go.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnPreparedListener(MediaPlayer.OnPreparedListener l) {\n        mOnPreparedListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when the end of a media file has been\n     * reached during playback.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnCompletionListener(OnCompletionListener l) {\n        mOnCompletionListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when an error occurs during playback or\n     * setup. If no listener is specified, or if the listener returned false,\n     * VideoView will inform the user of any errors.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnErrorListener(OnErrorListener l) {\n        mOnErrorListener = l;\n    }\n\n    /**\n     * Register a callback to be invoked when an informational event occurs\n     * during playback or setup.\n     *\n     * @param l The callback that will be run\n     */\n    public void setOnInfoListener(OnInfoListener l) {\n        mOnInfoListener = l;\n    }\n\n    public static interface MediaControllListener {\n        public void onStart();\n\n        public void onPause();\n\n        public void onStop();\n\n        public void onComplete();\n    }\n\n    MediaControllListener mMediaControllListener;\n\n    public void setMediaControllListener(MediaControllListener mediaControllListener) {\n        mMediaControllListener = mediaControllListener;\n    }\n\n\n    @Override\n    public void setVisibility(int visibility) {\n        System.out.println(\"setVisibility: \" + visibility);\n        super.setVisibility(visibility);\n    }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "731cca2c-3790-4223-ae95-3cddecdcf0a7": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558045,
          "id": "731cca2c-3790-4223-ae95-3cddecdcf0a7",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558045,
          "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This the custom "],
              ["VideoView", [["c"]]],
              [" that you need to have it in your package."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "731cca2c-3790-4223-ae95-3cddecdcf0a7",
            "09f8e89e-f3c4-4869-9bf5-51e1841a684e",
            "d27f9a97-7ff6-41e6-9714-50f8c04aa195",
            "1293b690-5582-4b77-8086-bfdeb9970889",
            "18b9cc3a-9a41-45f7-992b-dc23d8f17f4b",
            "0f7eca36-110b-4e1d-a541-c69251fc37d1"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558050,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558050,
          "parent_id": "1132475f-3f52-4abc-8b7e-1d1ad503adaa",
          "parent_table": "block",
          "properties": {
            "title": [["Optimized VideoView in ListView"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      },
      "d27f9a97-7ff6-41e6-9714-50f8c04aa195": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550456558048,
          "id": "d27f9a97-7ff6-41e6-9714-50f8c04aa195",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550456558048,
          "parent_id": "7e573de1-8381-4f9e-b9ae-4cda9fa7f72e",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "<your.packagename.VideoView\n    android:id=\"@+id/video_view\"\n    android:layout_width=\"300dp\"\n    android:layout_height=\"300dp\" />"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "f90b0a6b-6483-43e2-8dc5-ed6e8f5c0780": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "27fdf592-c1e2-48bf-ad9e-f2f466767a20",
            "354073c9-7040-4528-8c35-dbbbf7992ed5",
            "40c765e7-6562-4ee9-8ed0-8024e3def515",
            "b9098913-7e61-4386-8d02-ca92ab88b324",
            "f23a5cf1-4ba4-434a-b57a-4f6b72fa1dfd",
            "4b7449f0-077a-4e41-841b-d5c551629808",
            "f7aa3cbf-18e0-4aee-8ec1-725bd9ccb0bc",
            "b12b5220-f26c-4aeb-8130-af5506f0f546",
            "ffa90cd3-3eea-424c-8f80-34de4ba10bac",
            "3cf74dd2-01e2-497e-a2e0-ef450e2751fd",
            "60c44f62-2826-4f4e-b62c-62999d7b5b08",
            "b504a8f4-8c84-4c2e-8acd-bca678ce8ae8",
            "58b149d4-6a66-400d-bae4-6d84bc9e8211",
            "b81f95e2-9af4-43b2-ae8a-eacf3d61b9e0",
            "dad79538-df78-4fb3-ab61-93449f54b92e",
            "e5da3f10-048a-4ac6-8dfe-d0f8b834b9b8",
            "09fb42bc-c08a-479e-85ec-dcd14413d8e1",
            "9cd3cdb2-fb8b-4bc2-916b-a38f0022b43b",
            "a2530ba9-8b01-4c7b-ad00-037bf9f232a2",
            "20f73399-dea2-4d47-bee6-68060ec883f9",
            "3061cbb2-214c-4375-b975-440c3b41e566",
            "577ee794-a9c3-4ded-8824-6307ea4044f3",
            "e851dd0d-078a-4cf4-b0e2-4fb9a34577ba",
            "daef7c65-a1e3-4cb4-a562-7e81aabc337c",
            "edbd8f8d-6b57-43d2-9269-0b0cf3e6165c",
            "ae4c3948-e722-49ba-a5df-65778b9c1e91",
            "b698fa46-dece-4676-a681-eecc1a3388d2",
            "7519d0d9-ef43-40c7-bea1-eb520af1f62f",
            "f2b20dc9-ee75-45ae-b0ee-88e0ced263c9",
            "2d6f6857-e53d-4b60-b433-e156d81c55e5",
            "1096b9a5-3f3a-425e-ac66-0adc4166be45",
            "6190cb6e-dc43-458e-9fc6-34c0e0c69fa6",
            "b33bd62e-4631-43c5-a9ae-ac47eadfb3e0",
            "e5dfd590-a7f4-4ea2-b744-e87d7d45fabf",
            "e5dbc80b-9ce3-4932-9808-0a7fbefb59b3",
            "2bfda67f-291e-4f52-a037-53bdbbc944bc",
            "7145866f-7d62-48b0-a57b-66c494eb5a9f",
            "3ffccc71-cbb9-4ebc-8ff8-78efb3575845",
            "3fe483f2-e060-41f7-9bc7-8fa4711fa6bb",
            "826a2947-547d-46b5-8714-0282f94a1967",
            "45ae2e3d-3201-45c2-9924-4c3dd873a5c3",
            "1ef1aff9-7d3c-456d-abfd-937eb8756547",
            "6a6fe5f1-6362-47c6-bac7-61c76a0a464d",
            "fad6acf8-b0d5-4770-85ab-bd87a2e5410d",
            "f505a59f-f887-4749-88d5-2d8b5be7947f",
            "621f346c-f9c6-4d5c-8e6e-6106d643fcce",
            "6a7c57a2-8f24-43b5-974d-d38ab99fdee8",
            "80a93a9d-a581-423a-8907-8a480a93f52d",
            "6ffff372-f722-4664-9978-ad7101e6d3c6",
            "cf2c473f-5e00-4648-971f-43398123cc33",
            "1930100d-c8dd-4c8d-ab3f-7ad60a4616a4",
            "6349c926-1894-426b-9bd7-9ce6b6ce8b2f",
            "f5d212d3-d5ba-4aa5-b670-a737a4d6a212",
            "19ac457b-73f1-4fa2-960e-88f42ddbee76",
            "42ecfc4e-4f11-4487-8d7a-15abe78a4672",
            "3d7c457d-2120-4fab-9620-ddd6e746e8ef",
            "c170b80b-c39f-46ce-b311-2debae2f2082",
            "14ad6c73-b15c-4c75-8f07-1c859944f790",
            "16002345-cebc-40e9-8de5-7cc0659be0f3",
            "331f90f3-9311-486a-8bcd-c5e4e171ee84",
            "2e2716b4-5b9a-4670-8a00-377992b3a547",
            "9cbb47b7-a65c-4cc4-865d-1a66536aefa1",
            "7bedcd95-c04f-4865-a298-247d34206277",
            "8abb0bb2-e8f7-4eec-bab7-3a47c7c1bffd",
            "5186a864-9440-434b-b19a-c32d326a3fef",
            "e8b25d81-c867-4e20-8829-1264867cb1b8",
            "e3584a94-a9f0-4362-8875-ecc7887d08a7",
            "47b7faa3-6e5d-420d-8798-507e43f9639f",
            "9c91430d-940a-46b8-894c-258836f7d0f4",
            "f16ce3be-cc8a-428d-aa92-06106c08bb78",
            "322f7adc-aa8e-4dd0-90bc-e3822856448b",
            "6f9a7fa3-564a-46a2-a9f0-375a21c8e251",
            "c5099681-f7f6-42fc-90d3-a6a0ee90f908",
            "92a41c6c-4c93-4fb6-a347-2f5cf0a7d2db",
            "199c82a7-fe1c-4163-8405-c17464a5f76c",
            "9491365b-e249-4a75-ac25-cc1cc02f408f",
            "22af4132-01f0-4467-9bea-e645f470fd96",
            "ca11d4e6-9cd7-4136-9232-859b2e1467de",
            "c78edde1-b73e-43d7-ab97-ddf82241f21f",
            "a50a635e-1226-4210-baec-32b24d8676e4",
            "7822bd2e-1f30-4ca7-9aec-dc44e8b70697",
            "91c05e15-76e6-4d60-ba05-c776f6f8fda9",
            "b608fb79-1b53-486d-8fde-90d4b61fc2f1",
            "862b5ddf-f996-490c-9d71-0fcfa7309bad",
            "095bece4-4a5b-4544-a96a-9b32ab97785f",
            "4ed76ccc-0516-40c8-97cc-501741884fac",
            "09da8235-6e71-43ae-825b-1e3ee72d1ad9",
            "6068a6db-1477-454d-9131-f7d2eef506e8",
            "32904bc0-ceb7-4a01-b5ef-8a0bf7941852",
            "6838a528-7474-4647-bef7-4cf6c1e816b5",
            "3be0ee0d-3f99-4321-870f-1c84f52188a9",
            "761f15e8-3ef3-4bb0-bef6-598eb45647a6",
            "d1699fdd-2bda-4161-96bb-2b2502fb6e0a",
            "db56e9e4-397a-4b38-a33f-a2324e683304",
            "d75c0cae-6a9d-433a-91d1-96901cb34d26",
            "95044da4-c747-4fa5-b31f-4fb3ed5adb6c",
            "4521a76c-21a4-4542-8b83-322d8ffd692c",
            "5472d135-1ceb-48a7-856f-747de64f3e6b",
            "c1066830-e268-4ff2-9f0f-37841d485046",
            "963e797e-dea4-4392-8454-e58d4d898886",
            "016f7476-6abd-4773-ada7-0c01bafd51ea",
            "44d0c151-0367-453d-9879-ef7e4d456c6c",
            "7a899cd4-cc0a-4ef1-b758-42cf9f5b48b9",
            "8011ec06-ee27-49a4-bcbc-493592df26b0",
            "574bb08c-f784-4dcb-b2e1-98fb6ef32949",
            "e1987a71-9e13-4ebe-855e-e347fd6cc937",
            "9b6546ec-87e7-4f0d-97af-9dd8a76e52a2",
            "669038f0-8cb0-496b-9673-04b1042e0e5c",
            "8dc4486d-cab9-46ba-a583-6946731415e6",
            "03c9507a-d4bc-4e38-a41b-437f05849261",
            "1e659fc3-474d-4557-a94d-835ee0c85264",
            "d6acfbca-5bf9-4a01-93a6-9c974a46400e",
            "2ea54c48-49ac-4fde-be2b-e43bbc4bbf66",
            "830c8731-8c33-4c19-ae58-4b8ff19d4cc7",
            "2d77e910-ecf3-4151-95e5-d2476592ed5f",
            "b4ea2393-6248-4273-be5c-b3ff2586a146",
            "41515ac4-ab76-4fea-b463-e1a26b6f69bb",
            "e8c3ea27-aa2b-44ad-a95b-4ea00469fc83",
            "f752bf5b-91bd-44d1-8388-898770ff7adb",
            "4d9ab42a-8f21-4c13-9db4-9eecf9315a5d",
            "0cd1dd2f-b110-4916-a707-6a988d46c973",
            "a52e40c1-3556-4e99-a114-0488389ebe90",
            "d5074d5e-8d31-43ae-8069-c4edd1cc1ddb",
            "c88c7b1a-46a1-4423-b1b9-859c4b025b3d",
            "4748d604-7768-48d9-86be-1ce724d425ce",
            "ded10fc3-bae1-4c26-8166-2d92cbfe0f49",
            "68e828c6-f314-441c-b64a-ba28f0d1cc35",
            "f337f4f5-1ff3-4215-a0a8-1980b7c8d662",
            "a4053bc6-4f68-4f49-baf6-41ba500ed7c7",
            "94542bbc-752e-48c7-ac75-9b3e818d84eb",
            "3ce1e736-2768-4f19-9c41-5c91c15b7dfb",
            "51bc39d7-7e67-4f75-bc6d-697297d52287",
            "f8d5ea25-5e82-4f79-924b-0049690bfc32",
            "77f833e9-2996-4ded-b5af-7e17de12e8bf",
            "038616cc-b67b-4c1f-a9ad-af80ec2fb110",
            "97ef53c0-5293-453a-aff1-0439da147a44",
            "c5f8b539-4640-4ad9-85bc-1c855ef9dfde",
            "839cd454-9096-4e4d-9665-a3fb54dd4705",
            "c47838e4-3cab-4329-a3c4-d1afd70fdcb9",
            "56e44bd4-0e66-480f-b26a-730a862f5652",
            "24941973-4747-4d43-8317-8aad489543af",
            "d61fb0ab-dd90-4099-b2ec-024f6a2c279f",
            "3d365296-5561-464b-9301-04d4f320fea9",
            "7948e7ab-b399-4557-8504-4f81f50dc8ec",
            "8f925deb-b6fa-4c08-9646-5c7646eb4b89",
            "65a401f2-544a-4a8a-ab65-a3071f51031e",
            "dc81327b-cb66-4261-865d-bb7d14306f11",
            "e624cc34-7c87-4335-9bb5-d350a02910f5",
            "f6365667-18d0-4273-9222-c5586157da7d",
            "905db9f7-4839-45af-b211-113a4a6999aa",
            "96cf5a86-7732-431c-be7c-7c753d92a46a",
            "0af82c96-4dd6-4720-a409-bf67041be6e0",
            "710dbb9e-bd86-4ba2-a18a-5401a3046ece",
            "677b8f26-3ed2-4974-8569-2df0f1293a73",
            "3c934d65-d622-4b05-a0d0-bb5e84d75218",
            "8dcd9530-0e0f-4f14-b111-afc50cc08324",
            "2d086d76-fb34-4b13-bbc7-3d5dc05ef97d",
            "a23d145a-771f-4f05-b84c-07d16a56a6aa",
            "b240a8de-0f36-4239-9c95-bc79a5dddd40",
            "8e556e15-f5fd-43fa-bf95-98cee5a7bc8f",
            "82f1624b-f3af-4c45-a893-f8bca5957cf0",
            "deb49da5-8f12-4105-b9da-710ff265582f",
            "524569ba-6a1f-44a4-8a5d-5439de5b2a40",
            "ac526877-fd57-46f4-b83b-972b1c58fad6",
            "47e0b249-e53b-4f62-a257-6d0813594d72",
            "acd0006b-0353-4ba6-8a0b-87336f61c97d",
            "9d26f612-3468-4d2c-a80b-ad718b6e877e",
            "4cad6e5b-3f30-4564-8735-751ca7db042c",
            "b4034989-a291-40b9-9713-ee02a8ac0da2",
            "3360b9ba-8b02-41c9-bd93-6f6a02109330",
            "f15f4120-70ca-4a10-be77-f9d582fb8790",
            "f1c95c46-1481-4241-a8ee-571b2f83a310",
            "8090fbc5-84d0-4f94-b1f9-ed8020f780d3",
            "c6e1394e-9cad-4673-bd57-f2405d39c2cf",
            "27c2cc4b-0924-448f-ab99-7a67b399c2ab",
            "cf75254e-e8e2-41e2-81e9-77d30e203cb5",
            "db5df703-aa7a-4910-b457-cd3a922a981e",
            "c8ac0909-a19f-471e-a271-487222887abd",
            "fe8b6a8a-2e2d-43a0-a149-73689c84f390",
            "10d74f61-cdd5-494d-8c51-8312b3ba8de8",
            "fdb69422-5411-4296-b9d8-962b4d7831c2",
            "110fdb13-f9c4-46fc-9fa4-10ffd91c395f",
            "7fd7fa0a-adbb-469e-be55-da9a0c015ed8",
            "705eba44-ab0e-462d-9b8d-1773c364e997",
            "8678671e-3d0f-4498-ba9e-00f1a91c2dec",
            "d0f4d361-3ebe-433f-8d61-aa782fae1629",
            "509e8fc8-6805-42af-92e1-71d6eabd0266",
            "da4ebfb0-d0f7-4d87-b12a-91812d2c6a04",
            "9a1c0f18-5ce2-448f-a802-d53af20a31c1",
            "d392164c-cafa-46be-8893-b28c2272b578",
            "56de8949-916b-48d9-b3ed-5e5600fc9ca2",
            "8fb3ee5c-576a-4bf5-ba7e-b2edb63764dc",
            "cf617cc7-abc9-4c02-b109-8817de9e1fe8",
            "32623ca4-06d3-4b9b-9941-e741eb577347",
            "f44828a7-258c-4f49-a93d-61c1a597943f",
            "cc215dc0-9705-46ac-9ab1-1396de51bf7c",
            "71e5a001-12f9-41d1-aa62-8c79dd517256",
            "0240c422-4914-40ff-84e3-4f91c035951c",
            "1ed90bad-9ded-4cad-879b-073029c2669a",
            "82649e41-2072-452a-afc0-98a8e55e8d07",
            "b08308eb-a210-4991-8937-c9bbd18c4d9c",
            "7747dd70-20a4-4759-b346-990b9ab27c0c",
            "64e3b499-cbcc-4659-bb34-dbd1bb2f2e94",
            "4f2bdf6e-5f2e-4181-9559-dd8fc0fd7782",
            "124ec7ef-0d81-4d96-af62-32ba7e181dc2",
            "5ae01620-6217-429c-a6ee-f3c90a1813fe",
            "cea43ac2-635b-47f0-8e22-31dd43944c2b",
            "80ed906b-d3d8-4eff-a382-f3ccfe770fbd",
            "a6284cb9-0ec4-4644-ac38-9df2c430d565",
            "0e61b3b3-d822-42b9-b2db-e1147a055864",
            "e10e6b37-8c81-449f-8b06-953d9e7232e3",
            "742574bd-3734-45df-81cb-664bc6fc3d9b",
            "f3a57f3d-21ee-498d-99ee-965ce6b883a4",
            "73695f31-fd69-4514-b8d6-d72c6cdbb87c",
            "ad0c3fdb-eee5-4ba0-bc81-169b78ed8365",
            "fd7264ef-c538-432f-848b-1d838ced284a",
            "ba1fc3a4-bf86-41a3-98d4-3ca0974b9be8",
            "9fe092dc-5c09-4876-b941-b37ae675d813",
            "b0ec8c0c-dd90-4b58-b356-37134394c78d",
            "015b7891-f102-4c8f-b06d-9269dd58b44d",
            "3bbdbd66-d299-4cba-8c12-51c8786d3091",
            "2baf451b-0056-4891-8d40-684b89573e1b",
            "73f8cadc-ec5d-4f49-a839-67d47b03c77f",
            "f0b1f166-bf21-4323-a98c-97cb5ce7179b",
            "5430b2ef-658c-4221-aa29-4325b466d13f",
            "c80231fa-3653-43c4-83ec-af2060de32e6",
            "30d7bc46-2e9e-48f7-935c-807f4d3a3874",
            "187a4b2d-7c67-4c5a-b15d-04a9f83933c2",
            "021946e3-c36d-4a13-b45d-198da0ecadfc",
            "b3067692-7417-4b7d-8599-72f2c733f340",
            "58505de6-57ea-4156-83ec-21d3e032fcee",
            "90bf0114-63fa-4f8f-beac-8c8844a22459",
            "5f4ad035-8ade-4422-a698-42777d881b04",
            "1214e547-4439-466c-b7cf-0dfce91ca8a9",
            "6f41ff49-d3e3-4067-8644-4ed8b7416461",
            "114e231f-0e4f-4f0c-b594-af8e235bb7ba",
            "85d3184b-facb-42d7-9fa2-68a756ba59ff",
            "242333a5-01c6-4a03-a125-aa9fe7a1566c",
            "21c58509-8ad4-4956-93ec-9e01f51f7731",
            "a57c3cbd-cbcb-4b79-bbd2-bc492cc4c6de",
            "e74c5ca7-a98f-4cee-8a20-402df5f04c12",
            "20896cc4-7e6c-4191-90ca-0fcbaf782a1a",
            "ac2e3135-2507-45a0-9eb5-eb87267b5aa3",
            "f8a97bdd-4988-408e-b26b-09909b8984f4",
            "ca128910-13b5-4ca4-bb5d-59b2a0923021",
            "608881e1-3112-44fb-8163-a0e1375bdab0",
            "011dfad9-c5b2-433c-8550-1f442912c6b3",
            "e64074c1-1af7-4c9b-b712-3fc5e62da994",
            "5bc3338f-922a-47ff-aae1-08fb7b8dde43",
            "19cb62d2-9b26-4a60-aab3-cc40a4aef43a",
            "9d27e5e1-c938-4f26-a90d-25a7b894cc4a",
            "c4ce4396-9c90-4cec-9485-46cea79f4295",
            "af0972ed-d3b8-4ac2-90ab-75ce1bb915d6",
            "71277395-eef6-428b-9609-e3637eda9594",
            "e659044e-5803-4435-846f-2c49eb9f27ef",
            "1132475f-3f52-4abc-8b7e-1d1ad503adaa",
            "cbfdead0-07e3-4ff0-960c-65310ce08197",
            "c2583e33-3aa5-444b-9369-d1257f91d902",
            "b3f557a3-b586-4969-9586-4e7548d1c510",
            "174f69df-274c-48fb-87c1-579d48cbd326",
            "786f5a33-fe08-45e1-b4a3-d87fee25c003",
            "25357792-eaea-49a7-a61f-3c39c0385ebe",
            "03d85aeb-9a2e-46de-8eee-c72d3db4f4ec",
            "eaf84068-3115-4f77-a190-8dda88806b57",
            "2bfa597a-3cc4-4bc0-88a4-357178faaf9e",
            "45431a02-f4a1-43f5-b9cb-bde2609e996c",
            "9dcef566-3377-416f-9a07-00a81f06c66d",
            "0a7e7d49-fbc6-48a3-b125-26138aebe090",
            "358395f1-b91c-4d7b-8673-1b3e1c3879f5",
            "aa8e64b4-0552-4771-b979-5178b6269656"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550443475316,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f90b0a6b-6483-43e2-8dc5-ed6e8f5c0780",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298720000,
          "parent_id": "c74c72f4-6ba6-4002-83c5-0fe2e400a3bc",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential Android"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 367
        }
      }
    },
    "space": {}
  }
}
