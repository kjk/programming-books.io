3308 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "332b894c-29e0-4699-b035-a7bbee6ba9b3"
      },
      "version": -1
    }
  ]
}
Response:+3056
{
  "recordMap": {
    "block": {
      "332b894c-29e0-4699-b035-a7bbee6ba9b3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "92dafc50-c6af-4268-8711-ce1c4d83f6a5",
            "188cb694-ee05-43d2-9f6b-d371e3f65565",
            "38d2741d-182d-4d9a-93c4-4bb3bc0fef27",
            "0bb00d26-8ea6-47e1-97c4-b215b9adfd38",
            "f2e0b57b-e6b8-4ef4-90ca-dcb1dedcd103",
            "3a436412-4ef0-4200-bd2d-33b1c6d44a16",
            "f117f2ce-c8a1-4808-b3ff-3b97fa9bf18c",
            "23819803-ab12-4c11-8adf-7b72e595c997",
            "f15cc50d-324d-4463-8be0-6f39ddc166b3",
            "b84ec73f-8f32-4e35-8d06-f29519f8f344",
            "e9d8eff5-07c0-4b9b-b6e8-b5aff2a9ade1",
            "b513beae-1cf9-411f-a58d-01acd45fb749",
            "c8f204a9-62de-41cc-bb2d-ad36fc94c3de",
            "91090f49-134f-4a79-a325-49e08ef68264",
            "1de9f955-3902-41fc-8111-bbbb50e85665",
            "52871b71-449a-4142-8866-7fef5c267928",
            "f20cef8b-3fed-442a-98be-f01bb1c01530",
            "5720cfc1-3208-4c6d-bbac-4ac0d40e0996",
            "6d8cf1e1-2013-4514-a7a1-d1cae17dfb27",
            "970ac94b-a7c4-42d2-815c-e724deb4c84f",
            "39542abf-7987-4f71-aa97-ef922820998d",
            "ea08654a-51e5-4590-9c11-d3bf45f560e2",
            "233f63ec-f1be-4057-a884-54991aa74c0b",
            "c46f49d1-0ef9-4291-9b86-a4d38688272e",
            "79fa44eb-f8f6-4fdd-b8e2-be820dba628e",
            "657f1faf-e5f9-4f12-945d-dc7f093ff939",
            "3fff2b34-aad8-4e30-8e1d-a42b1cc5657f",
            "10b65dbe-530e-41a2-adef-051ebbcf28cf",
            "ba038757-ee96-49d2-a8d6-d05a2a35eb70",
            "09ca142b-6dfb-4c27-87aa-deaf3883723a",
            "b0f22590-a1ec-4d39-8040-2287c5aee6c0",
            "8154f98b-1509-42a7-a876-6545a3e16171",
            "18afebde-af38-4388-8887-d61336db77ad",
            "b75fa8d3-e5bd-47aa-ab21-d94e7d42b37a",
            "fd6a8e99-f7bf-4ab9-aafe-c1b9e683ed1c",
            "3ad20a39-64fd-4824-9c30-7b649a018898"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502687,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1595147100000,
          "parent_id": "f00ac53f-26f5-4356-bd05-744ca9c233b1",
          "parent_table": "block",
          "properties": {
            "title": [["Dijkstras Shortest Path Algorithm"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 9
        }
      }
    }
  }
}
60193 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "332b894c-29e0-4699-b035-a7bbee6ba9b3"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+59933
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "039ec42e-e62f-412e-983e-6d5b6b201b60": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "91fee7b5-614e-44ac-9c69-2c43b78c7706",
            "1b2f4c66-4ea6-4d7b-a266-531792730534",
            "6eb693f8-f70b-45c9-a6db-644dea3bc144",
            "ee1a4539-5889-4a51-bc45-1ed4ce501170",
            "8ae5c9b5-b80d-4e27-930b-0dbbf5b2a075",
            "0483f45c-fa31-493e-bd1b-b9e924123210",
            "e737c451-edb2-4ee1-8b50-4891f751f559",
            "fb292c5c-1e2c-4d16-9d29-fce0aff04b2b",
            "c8277fc4-6841-459e-81f4-c90a99fd83fa",
            "adfec1cf-4941-4483-b98d-9550de7e3916",
            "2bfd570f-dc07-4daa-b3b2-a794ef12f08e",
            "a034d8c3-224b-46dc-bc26-d44b569e39e0",
            "8c1be630-50c9-4162-b355-a5d6917f9e65",
            "56228e72-edf0-4f14-b6c7-1d113093b22a",
            "2885c26f-5511-47a5-900d-5d725326f99d",
            "e800516e-b244-4000-89c7-0041f1acd148",
            "7c62ae2d-e334-4dc4-a641-184b79672747",
            "ec9d0bba-8ded-4256-866e-28adfde6676e",
            "f00ac53f-26f5-4356-bd05-744ca9c233b1",
            "07b6aee1-86e2-4b06-9533-93f2f24dd419",
            "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
            "aed1f400-b221-4067-80e6-2fda841c33f0",
            "a747cf00-d05a-4132-9b34-4cea62968a38",
            "0abdd157-bda8-4285-b8a7-5aa4dd7e132b",
            "e79c088d-5ede-4b22-b5dc-16273a672796",
            "721fb53c-f240-4ce6-aaaa-9f4be08c3460",
            "38ae0e5d-81ea-45b2-b7f4-8eb197662514",
            "c06d75d6-1a6d-48da-8e09-4d63502dedee",
            "3cca89f6-4b6c-48b0-957b-2efc26b23041",
            "db10fdd2-ea0b-4236-ae14-94781b2f7586",
            "9bd5a67d-2c30-4b51-a6b7-b9eb3583b888",
            "29a89f00-863f-4084-8ec5-db4c455fc788",
            "2734ccd8-075a-412f-8976-e67dfd9416da",
            "a5ee9280-35d0-4aac-89a2-decbe44f483e",
            "790101e3-fd8c-47e3-bcc4-54b18dc2fd9a",
            "aa2725ad-e1d1-40ed-ab4f-0042fe8e222f",
            "7261d2a3-9d9d-43cb-9e3a-4b432a018d9e",
            "7e7202cf-172e-479e-b1d4-2842091d8b3e",
            "ee364118-8538-4817-87be-3e716db337cb",
            "4ee11beb-a38d-47e3-8227-7414b7e09239",
            "f82e52a5-bc15-4106-8c59-2d323c6aa2f1",
            "547abd24-965c-44ce-b5f0-e452aeea3821",
            "d33782ab-d4ee-4ba9-938d-2922e11247be",
            "0c0e3472-dac8-416a-833b-40ef5e725f54",
            "c677c530-6036-4f08-810c-5e2b963b6ded",
            "d1c46e3a-31cb-41e0-acf1-907b405548a3",
            "24e66a7f-c2cb-4c77-b424-5e08b603ee59",
            "15b863c2-28b5-4b31-9379-ff8091b43c28",
            "5eb1332d-741d-47f8-ad4c-da01f28ef2ed",
            "88259ac2-4526-4ea5-b9e9-d03f7dd06c8e",
            "0652a44d-8a63-47b5-b7cf-af85d0c3655a",
            "61f46cc6-d7e0-4aeb-ae8a-47f4eb52c2bc",
            "a3747844-afb9-4883-bbb2-bea5662e919d",
            "e567adff-577f-4fa6-849a-1a112f689048",
            "c96af0be-a3eb-4385-a674-0f83049a23fd",
            "1357e166-4a61-43ab-a4f0-d9cbd7ba53de",
            "e7f85180-91d1-4075-8feb-5b5f495422a9",
            "2a8a00f4-a540-41b4-87f7-465c42e6a071",
            "f11f3084-c84d-4f6e-91d0-8c55df0d8c59",
            "491070bf-06ff-4de8-bf7f-3e121c11c49f",
            "2a95e83b-1c1e-40d2-b8e0-8917aa02703e",
            "a30ef162-2edd-4b12-90d7-25d5049ed098",
            "eaba21c7-6ac1-482f-bdc2-9410e7140b3d",
            "1f7d7534-a522-4df6-a495-44f1c3e4179d",
            "924ef53c-fe52-4d0f-8233-1cbc0f7eb8f7",
            "d9ba24fd-508b-4ddc-9d8c-15467083ba43"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928257468,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298780000,
          "parent_id": "d79ccaee-4168-4c48-920b-7005c81675ea",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            },
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential Algorithms"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 135
        }
      },
      "09ca142b-6dfb-4c27-87aa-deaf3883723a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502686,
          "id": "09ca142b-6dfb-4c27-87aa-deaf3883723a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502686,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Now, does Dijkstra’s Algorithm work when there’s a negative edge? If there’s a negative cycle, then infinity loop will occur, as it will keep reducing the cost every time. Even if there is a negative edge, Dijkstra won’t work, unless we return right after the target is popped. But then, it won’t be a Dijkstra algorithm. We’ll need "
              ],
              [
                "Bellman–Ford",
                [
                  [
                    "a",
                    "http://stackoverflow.com/documentation/algorithm/4791/bellman-ford-algorithm/24021/single-source-shortest-path-algorithm-given-there-is-a-negative-cycle-in-a-grap"
                  ]
                ]
              ],
              [" algorithm for processing negative edge/cycle."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "0bb00d26-8ea6-47e1-97c4-b215b9adfd38": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502676,
          "id": "0bb00d26-8ea6-47e1-97c4-b215b9adfd38",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502676,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "At first we will see, how to modify BFS to write Dijkstra’s algorithm, then we will add priority queue to make it a complete Dijkstra’s algorithm."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "10b65dbe-530e-41a2-adef-051ebbcf28cf": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502684,
          "id": "10b65dbe-530e-41a2-adef-051ebbcf28cf",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502684,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "procedure dijkstra(G, source):\nQ = priority_queue()\ndistance[] = infinity\nQ.enqueue(source)\ndistance[source] = 0\nwhile Q is not empty\n    u <- nodes in Q with minimum distance[]\n    remove u from the Q\n    for all edges from u to v in G.adjacentEdges(v) do\n        if distance[u] + cost[u][v] < distance[v]\n            distance[v] = distance[u] + cost[u][v]\n            Q.enqueue(v)\n        end if\n    end for\nend while\nReturn distance"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "188cb694-ee05-43d2-9f6b-d371e3f65565": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502676,
          "id": "188cb694-ee05-43d2-9f6b-d371e3f65565",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502676,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Dijkstra’s algorithm",
                [["a", "https://en.wikipedia.org/wiki/Dijkstra's_algorithm"]]
              ],
              [
                " is known as single-source shortest path algorithm. It is used for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by "
              ],
              [
                "Edsger W. Dijkstra",
                [["a", "https://en.wikipedia.org/wiki/Edsger_W._Dijkstra"]]
              ],
              [" in 1956 and published three years later."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "18afebde-af38-4388-8887-d61336db77ad": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502686,
          "id": "18afebde-af38-4388-8887-d61336db77ad",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502686,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Below is a Java example to solve Dijkstra’s Shortest Path Algorithm using Adjacency Matrix"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "1de9f955-3902-41fc-8111-bbbb50e85665": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502679,
          "id": "1de9f955-3902-41fc-8111-bbbb50e85665",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502679,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This is called relaxation. We will go from node "],
              ["u", [["b"]]],
              [" to node "],
              ["v", [["b"]]],
              [" and if "],
              ["d[u] + cost[u][v] < d[v]", [["b"]]],
              [" then we will update "],
              ["d[v] = d[u] + cost[u][v]", [["b"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "233f63ec-f1be-4057-a884-54991aa74c0b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502682,
          "id": "233f63ec-f1be-4057-a884-54991aa74c0b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502682,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "procedure BFSmodified(G, source):\nQ = queue()\ndistance[] = infinity\nQ.enqueue(source)\ndistance[source]=0\nwhile Q is not empty\n    u <- Q.pop()\n    for all edges from u to v in G.adjacentEdges(v) do\n        if distance[u] + cost[u][v] < distance[v]\n            distance[v] = distance[u] + cost[u][v]\n        end if\n    end for\nend while\nReturn distance"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "23819803-ab12-4c11-8adf-7b72e595c997": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502678,
          "id": "23819803-ab12-4c11-8adf-7b72e595c997",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502678,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [["d[A] = 10\nd[B] = 25"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "332b894c-29e0-4699-b035-a7bbee6ba9b3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "92dafc50-c6af-4268-8711-ce1c4d83f6a5",
            "188cb694-ee05-43d2-9f6b-d371e3f65565",
            "38d2741d-182d-4d9a-93c4-4bb3bc0fef27",
            "0bb00d26-8ea6-47e1-97c4-b215b9adfd38",
            "f2e0b57b-e6b8-4ef4-90ca-dcb1dedcd103",
            "3a436412-4ef0-4200-bd2d-33b1c6d44a16",
            "f117f2ce-c8a1-4808-b3ff-3b97fa9bf18c",
            "23819803-ab12-4c11-8adf-7b72e595c997",
            "f15cc50d-324d-4463-8be0-6f39ddc166b3",
            "b84ec73f-8f32-4e35-8d06-f29519f8f344",
            "e9d8eff5-07c0-4b9b-b6e8-b5aff2a9ade1",
            "b513beae-1cf9-411f-a58d-01acd45fb749",
            "c8f204a9-62de-41cc-bb2d-ad36fc94c3de",
            "91090f49-134f-4a79-a325-49e08ef68264",
            "1de9f955-3902-41fc-8111-bbbb50e85665",
            "52871b71-449a-4142-8866-7fef5c267928",
            "f20cef8b-3fed-442a-98be-f01bb1c01530",
            "5720cfc1-3208-4c6d-bbac-4ac0d40e0996",
            "6d8cf1e1-2013-4514-a7a1-d1cae17dfb27",
            "970ac94b-a7c4-42d2-815c-e724deb4c84f",
            "39542abf-7987-4f71-aa97-ef922820998d",
            "ea08654a-51e5-4590-9c11-d3bf45f560e2",
            "233f63ec-f1be-4057-a884-54991aa74c0b",
            "c46f49d1-0ef9-4291-9b86-a4d38688272e",
            "79fa44eb-f8f6-4fdd-b8e2-be820dba628e",
            "657f1faf-e5f9-4f12-945d-dc7f093ff939",
            "3fff2b34-aad8-4e30-8e1d-a42b1cc5657f",
            "10b65dbe-530e-41a2-adef-051ebbcf28cf",
            "ba038757-ee96-49d2-a8d6-d05a2a35eb70",
            "09ca142b-6dfb-4c27-87aa-deaf3883723a",
            "b0f22590-a1ec-4d39-8040-2287c5aee6c0",
            "8154f98b-1509-42a7-a876-6545a3e16171",
            "18afebde-af38-4388-8887-d61336db77ad",
            "b75fa8d3-e5bd-47aa-ab21-d94e7d42b37a",
            "fd6a8e99-f7bf-4ab9-aafe-c1b9e683ed1c",
            "3ad20a39-64fd-4824-9c30-7b649a018898"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502687,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1595147100000,
          "parent_id": "f00ac53f-26f5-4356-bd05-744ca9c233b1",
          "parent_table": "block",
          "properties": {
            "title": [["Dijkstras Shortest Path Algorithm"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 9
        }
      },
      "38d2741d-182d-4d9a-93c4-4bb3bc0fef27": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502676,
          "id": "38d2741d-182d-4d9a-93c4-4bb3bc0fef27",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502676,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "We can find shortest path using Breadth First Search (BFS) searching algorithm. This algorithm works fine, but the problem is, it assumes the cost of traversing each path is same, that means the cost of each edge is same. Dijkstra’s algorithm helps us to find the shortest path where the cost of each path is not the same."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "39542abf-7987-4f71-aa97-ef922820998d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502681,
          "id": "39542abf-7987-4f71-aa97-ef922820998d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502681,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["We can clearly see that "],
              ["5", [["i"]]],
              [" is not the shortest distance we can cross to go to "],
              ["node 3", [["b"]]],
              [
                ". So traversing a node only once, like BFS, doesn’t work here. If we go from "
              ],
              ["node 2", [["b"]]],
              [" to "],
              ["node 3", [["b"]]],
              [" using "],
              ["edge 2-3", [["b"]]],
              [", we can update "],
              ["d[3] = d[2] + 1 = 3", [["b"]]],
              [
                ". So we can see that one node can be updated many times. How many times you ask? The maximum number of times a node can be updated is the number of in-degree of a node."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "3a436412-4ef0-4200-bd2d-33b1c6d44a16": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1595147040000,
          "file_ids": ["188959f1-e3c4-46ca-b606-7c3f4cd77462"],
          "format": {
            "block_aspect_ratio": 0.35294117647058826,
            "block_full_width": false,
            "block_height": 132,
            "block_page_width": false,
            "block_preserve_scale": true,
            "block_width": 374,
            "display_source": "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/188959f1-e3c4-46ca-b606-7c3f4cd77462/Untitled.png"
          },
          "id": "3a436412-4ef0-4200-bd2d-33b1c6d44a16",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1595147040000,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "source": [
              [
                "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/188959f1-e3c4-46ca-b606-7c3f4cd77462/Untitled.png"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "image",
          "version": 13
        }
      },
      "3ad20a39-64fd-4824-9c30-7b649a018898": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502687,
          "id": "3ad20a39-64fd-4824-9c30-7b649a018898",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502687,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "Vertex   Distance from Source\n0                0\n1                4\n2                12\n3                19\n4                21\n5                11\n6                9\n7                8\n8                14"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "3fff2b34-aad8-4e30-8e1d-a42b1cc5657f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502684,
          "id": "3fff2b34-aad8-4e30-8e1d-a42b1cc5657f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502684,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [["Let’s see the pseudo-code:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "52871b71-449a-4142-8866-7fef5c267928": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502680,
          "id": "52871b71-449a-4142-8866-7fef5c267928",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502680,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "In BFS, we didn’t need to visit any node twice. We only checked if a node is visited or not. If it was not visited, we pushed the node in queue, marked it as visited and incremented the distance by 1. In Dijkstra, we can push a node in queue and instead of updating it with visited, we "
              ],
              ["relax", [["i"]]],
              [" or update the new edge. Let’s look at one example:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "5720cfc1-3208-4c6d-bbac-4ac0d40e0996": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502680,
          "id": "5720cfc1-3208-4c6d-bbac-4ac0d40e0996",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502680,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Let’s assume, "],
              ["Node 1", [["b"]]],
              [" is the "],
              ["Source", [["b"]]],
              [". Then,"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "657f1faf-e5f9-4f12-945d-dc7f093ff939": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502684,
          "id": "657f1faf-e5f9-4f12-945d-dc7f093ff939",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502684,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Dijkstra", [["i"]]],
              [" proposed, instead of going for "],
              ["First come, first serve", [["i"]]],
              [
                " method, if we update the nearest nodes first, then it’ll take less updates. If we processed "
              ],
              ["node 2", [["b"]]],
              [" before, then "],
              ["node 3", [["b"]]],
              [" would have been updated before, and after updating "],
              ["node 4", [["b"]]],
              [
                " accordingly, we’d easily get the shortest distance! The idea is to choose from the queue, the node, that is closest to the "
              ],
              ["source", [["b"]]],
              [". So we will use "],
              ["Priority Queue", [["i"]]],
              [
                " here so that when we pop the queue, it will bring us the closest node "
              ],
              ["u", [["b"]]],
              [" from "],
              ["source", [["b"]]],
              [". How will it do that? It’ll check the value of "],
              ["d[u]", [["b"]]],
              [" with it."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "6d8cf1e1-2013-4514-a7a1-d1cae17dfb27": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502680,
          "id": "6d8cf1e1-2013-4514-a7a1-d1cae17dfb27",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502680,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              ["d[1] = 0\nd[2] = d[3] = d[4] = infinity (or a large value)"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "79fa44eb-f8f6-4fdd-b8e2-be820dba628e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502683,
          "id": "79fa44eb-f8f6-4fdd-b8e2-be820dba628e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502683,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["In BFS, when we go from "],
              ["node 1", [["b"]]],
              [" to all other nodes, we follow "],
              ["first come, first serve", [["i"]]],
              [" method. For example, we went to "],
              ["node 3", [["b"]]],
              [" from "],
              ["source", [["b"]]],
              [" before processing "],
              ["node 2", [["b"]]],
              [". If we go to "],
              ["node 3", [["b"]]],
              [" from "],
              ["source", [["b"]]],
              [", we update "],
              ["node 4", [["b"]]],
              [" as "],
              ["5 + 3 = 8", [["b"]]],
              [". When we again update "],
              ["node 3", [["b"]]],
              [" from "],
              ["node 2", [["b"]]],
              [", we need to update "],
              ["node 4", [["b"]]],
              [" as "],
              ["3 + 3 = 6", [["b"]]],
              [" again! So "],
              ["node 4", [["b"]]],
              [" is updated twice."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "8154f98b-1509-42a7-a876-6545a3e16171": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502686,
          "id": "8154f98b-1509-42a7-a876-6545a3e16171",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502686,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The complexity of BFS is "],
              ["O(log(V+E))", [["b"]]],
              [" where "],
              ["V", [["b"]]],
              [" is the number of nodes and "],
              ["E", [["b"]]],
              [
                " is the number of edges. For Dijkstra, the complexity is similar, but sorting of "
              ],
              ["Priority Queue", [["i"]]],
              [" takes "],
              ["O(logV)", [["b"]]],
              [". So the total complexity is: "],
              ["O(Vlog(V)+E)", [["b"]]]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "91090f49-134f-4a79-a325-49e08ef68264": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502679,
          "id": "91090f49-134f-4a79-a325-49e08ef68264",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502679,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [["d[B] = d[A] + cost[A][B]"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "92dafc50-c6af-4268-8711-ce1c4d83f6a5": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502673,
          "id": "92dafc50-c6af-4268-8711-ce1c4d83f6a5",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502673,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Before proceeding, it is recommended to have a brief idea about Adjacency Matrix and BFS",
                [["i"]]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "970ac94b-a7c4-42d2-815c-e724deb4c84f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502681,
          "id": "970ac94b-a7c4-42d2-815c-e724deb4c84f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502681,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["We set, "],
              ["d[2], d[3]", [["b"]]],
              [" and "],
              ["d[4]", [["b"]]],
              [" to "],
              ["infinity", [["i"]]],
              [
                " because we don’t know the distance yet. And the distance of "
              ],
              ["source", [["b"]]],
              [" is of course "],
              ["0", [["i"]]],
              [". Now, we go to other nodes from "],
              ["source", [["b"]]],
              [
                " and if we can update them, then we’ll push them in the queue. Say for example, we’ll traverse "
              ],
              ["edge 1-2", [["b"]]],
              [". As "],
              ["d[1] + 2 < d[2]", [["b"]]],
              [" which will make "],
              ["d[2] = 2", [["b"]]],
              [". Similarly, we’ll traverse "],
              ["edge 1-3", [["b"]]],
              [" which makes "],
              ["d[3] = 5", [["b"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "b0f22590-a1ec-4d39-8040-2287c5aee6c0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502686,
          "id": "b0f22590-a1ec-4d39-8040-2287c5aee6c0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502686,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [["Complexity:", [["b"]]]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "b513beae-1cf9-411f-a58d-01acd45fb749": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502679,
          "id": "b513beae-1cf9-411f-a58d-01acd45fb749",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502679,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [["d[A] + cost[A][B] < d[B]"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "b75fa8d3-e5bd-47aa-ab21-d94e7d42b37a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502687,
          "id": "b75fa8d3-e5bd-47aa-ab21-d94e7d42b37a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502687,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass ShortestPath\n{\n    static final int V=9;\n    int minDistance(int dist[], Boolean sptSet[])\n    {\n        int min = Integer.MAX_VALUE, min_index=-1;\n\n        for (int v = 0; v < V; v++)\n            if (sptSet[v] == false && dist[v] <= min)\n            {\n                min = dist[v];\n                min_index = v;\n            }\n\n        return min_index;\n    }\n\n    void printSolution(int dist[], int n)\n    {\n        System.out.println(\"Vertex Distance from Source\");\n        for (int i = 0; i < V; i++)\n            System.out.println(i+\" \\t\\t \"+dist[i]);\n    }\n\n    void dijkstra(int graph[][], int src)\n    {\n\n        Boolean sptSet[] = new Boolean[V];\n\n        for (int i = 0; i < V; i++)\n        {\n            dist[i] = Integer.MAX_VALUE;\n            sptSet[i] = false;\n        }\n\n        dist[src] = 0;\n\n        for (int count = 0; count < V-1; count++)\n        {\n            int u = minDistance(dist, sptSet);\n\n            sptSet[u] = true;\n\n            for (int v = 0; v < V; v++)\n\n                if (!sptSet[v] && graph[u][v]!=0 &&\n                        dist[u] != Integer.MAX_VALUE &&\n                        dist[u]+graph[u][v] < dist[v])\n                    dist[v] = dist[u] + graph[u][v];\n        }\n\n        printSolution(dist, V);\n    }\n\n    public static void main (String[] args)\n    {\n    int graph[][] = new int[][]{{0, 4, 0, 0, 0, 0, 0, 8, 0},\n                                {4, 0, 8, 0, 0, 0, 0, 11, 0},\n                                {0, 8, 0, 7, 0, 4, 0, 0, 2},\n                                {0, 0, 7, 0, 9, 14, 0, 0, 0},\n                                {0, 0, 0, 9, 0, 10, 0, 0, 0},\n                                {0, 0, 4, 14, 10, 0, 2, 0, 0},\n                                {0, 0, 0, 0, 0, 2, 0, 1, 6},\n                                {8, 11, 0, 0, 0, 0, 1, 0, 7},\n                                {0, 0, 2, 0, 0, 0, 6, 7, 0}\n                                };\n        ShortestPath t = new ShortestPath();\n        t.dijkstra(graph, 0);\n    }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "b84ec73f-8f32-4e35-8d06-f29519f8f344": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502678,
          "id": "b84ec73f-8f32-4e35-8d06-f29519f8f344",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502678,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [["cost[A][B] = 7"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "ba038757-ee96-49d2-a8d6-d05a2a35eb70": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502685,
          "id": "ba038757-ee96-49d2-a8d6-d05a2a35eb70",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502685,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The pseudo-code returns distance of all other nodes from the "],
              ["source", [["b"]]],
              [". If we want to know distance of a single node "],
              ["v", [["b"]]],
              [", we can simply return the value when "],
              ["v", [["b"]]],
              [" is popped from the queue."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "c46f49d1-0ef9-4291-9b86-a4d38688272e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502682,
          "id": "c46f49d1-0ef9-4291-9b86-a4d38688272e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502682,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "This can be used to find the shortest path of all node from the source. The complexity of this code is not so good. Here’s why,"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "c8f204a9-62de-41cc-bb2d-ad36fc94c3de": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502679,
          "id": "c8f204a9-62de-41cc-bb2d-ad36fc94c3de",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502679,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [["Then we update,"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "e9d8eff5-07c0-4b9b-b6e8-b5aff2a9ade1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502679,
          "id": "e9d8eff5-07c0-4b9b-b6e8-b5aff2a9ade1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502679,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Then we can go to place "],
              ["B", [["b"]]],
              [" from "],
              ["source", [["b"]]],
              [" by going to place "],
              ["A", [["b"]]],
              [" from "],
              ["source", [["b"]]],
              [" and then from place "],
              ["A", [["b"]]],
              [", going to place "],
              ["B", [["b"]]],
              [", which will take "],
              ["10 + 7 = 17", [["i"]]],
              [" minutes, instead of "],
              ["25", [["i"]]],
              [" minutes. So,"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "ea08654a-51e5-4590-9c11-d3bf45f560e2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502681,
          "id": "ea08654a-51e5-4590-9c11-d3bf45f560e2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502681,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Let’s see the pseudo-code for visiting any node multiple times. We will simply modify BFS:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "f00ac53f-26f5-4356-bd05-744ca9c233b1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "059b9272-2d37-4eb0-9ec4-885111c067cc",
            "332b894c-29e0-4699-b035-a7bbee6ba9b3"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928500000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f00ac53f-26f5-4356-bd05-744ca9c233b1",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928680000,
          "parent_id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Dijkstras Algorithm"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 35
        }
      },
      "f117f2ce-c8a1-4808-b3ff-3b97fa9bf18c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502678,
          "id": "f117f2ce-c8a1-4808-b3ff-3b97fa9bf18c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502678,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "We need to understand Edge Relaxation. Let’s say, from your house, that is "
              ],
              ["source", [["b"]]],
              [", it takes "],
              ["10", [["i"]]],
              [" minutes to go to place "],
              ["A", [["b"]]],
              [". And it takes "],
              ["25", [["i"]]],
              [" minutes to go to place "],
              ["B", [["b"]]],
              [". We have,"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "f15cc50d-324d-4463-8be0-6f39ddc166b3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502678,
          "id": "f15cc50d-324d-4463-8be0-6f39ddc166b3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502678,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Now let’s say it takes "],
              ["7", [["i"]]],
              [" minutes to go from place "],
              ["A", [["b"]]],
              [" to place "],
              ["B", [["b"]]],
              [", that means:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "f20cef8b-3fed-442a-98be-f01bb1c01530": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1595147100000,
          "file_ids": ["f20c2fd8-5c0f-40e7-b48b-e6de702e4aa4"],
          "format": {
            "block_aspect_ratio": 0.7509727626459144,
            "block_full_width": false,
            "block_height": 386,
            "block_page_width": false,
            "block_preserve_scale": true,
            "block_width": 514,
            "display_source": "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f20c2fd8-5c0f-40e7-b48b-e6de702e4aa4/Untitled.png"
          },
          "id": "f20cef8b-3fed-442a-98be-f01bb1c01530",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1595147100000,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "source": [
              [
                "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f20c2fd8-5c0f-40e7-b48b-e6de702e4aa4/Untitled.png"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "image",
          "version": 13
        }
      },
      "f2e0b57b-e6b8-4ef4-90ca-dcb1dedcd103": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502677,
          "id": "f2e0b57b-e6b8-4ef4-90ca-dcb1dedcd103",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502677,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Let’s say, the distance of each node from the source is kept in "
              ],
              ["d[]", [["b"]]],
              [" array. As in, "],
              ["d[3]", [["b"]]],
              [" represents that "],
              ["d[3]", [["b"]]],
              [" time is taken to reach "],
              ["node 3", [["b"]]],
              [" from "],
              ["source", [["b"]]],
              [". If we don’t know the distance, we will store "],
              ["infinity", [["i"]]],
              [" in "],
              ["d[3]", [["b"]]],
              [". Also, let "],
              ["cost[u][v]", [["b"]]],
              [" represent the cost of "],
              ["u-v", [["b"]]],
              [". That means it takes "],
              ["cost[u][v]", [["b"]]],
              [" to go from "],
              ["u", [["b"]]],
              [" node to "],
              ["v", [["b"]]],
              [" node."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "fd6a8e99-f7bf-4ab9-aafe-c1b9e683ed1c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928502687,
          "id": "fd6a8e99-f7bf-4ab9-aafe-c1b9e683ed1c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928502687,
          "parent_id": "332b894c-29e0-4699-b035-a7bbee6ba9b3",
          "parent_table": "block",
          "properties": {
            "title": [["Expected output of the program is"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
