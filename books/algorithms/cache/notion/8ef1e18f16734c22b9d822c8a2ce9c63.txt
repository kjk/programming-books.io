2022 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63"
      },
      "version": -1
    }
  ]
}
Response:+1770
{
  "recordMap": {
    "block": {
      "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "1317b4a1-6694-4779-83b4-e0b7b2a5775d",
            "77f39c0a-73b3-45a2-8a0c-4a1d6ac6cf8c",
            "226c26ab-e7d4-4eff-8322-0ee090d58f54",
            "79a65bec-be82-44c9-a829-c1892a001b83",
            "6c702536-d614-4ebd-94d3-118ae1cdc65b",
            "c1b5fb58-913b-41b3-803d-1756b8f0dfd3",
            "4553c661-e62b-47b1-b5d7-86a3ad2dfcfc",
            "7539a302-76ac-4b15-95f3-349955290856",
            "a05cfa55-d52f-4532-95ad-97280f468283",
            "712c86c5-1416-47be-8588-0855cd8e1454",
            "eb6d12c8-8e2e-4902-b0d5-287779e07215"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757091,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757091,
          "parent_id": "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
          "parent_table": "block",
          "properties": {
            "title": [["Finding Shortest Path from Source in a 2D graph"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      }
    }
  }
}
23646 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+23386
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "039ec42e-e62f-412e-983e-6d5b6b201b60": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "91fee7b5-614e-44ac-9c69-2c43b78c7706",
            "1b2f4c66-4ea6-4d7b-a266-531792730534",
            "6eb693f8-f70b-45c9-a6db-644dea3bc144",
            "ee1a4539-5889-4a51-bc45-1ed4ce501170",
            "8ae5c9b5-b80d-4e27-930b-0dbbf5b2a075",
            "0483f45c-fa31-493e-bd1b-b9e924123210",
            "e737c451-edb2-4ee1-8b50-4891f751f559",
            "fb292c5c-1e2c-4d16-9d29-fce0aff04b2b",
            "c8277fc4-6841-459e-81f4-c90a99fd83fa",
            "adfec1cf-4941-4483-b98d-9550de7e3916",
            "2bfd570f-dc07-4daa-b3b2-a794ef12f08e",
            "a034d8c3-224b-46dc-bc26-d44b569e39e0",
            "8c1be630-50c9-4162-b355-a5d6917f9e65",
            "56228e72-edf0-4f14-b6c7-1d113093b22a",
            "2885c26f-5511-47a5-900d-5d725326f99d",
            "e800516e-b244-4000-89c7-0041f1acd148",
            "7c62ae2d-e334-4dc4-a641-184b79672747",
            "ec9d0bba-8ded-4256-866e-28adfde6676e",
            "f00ac53f-26f5-4356-bd05-744ca9c233b1",
            "07b6aee1-86e2-4b06-9533-93f2f24dd419",
            "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
            "aed1f400-b221-4067-80e6-2fda841c33f0",
            "a747cf00-d05a-4132-9b34-4cea62968a38",
            "0abdd157-bda8-4285-b8a7-5aa4dd7e132b",
            "e79c088d-5ede-4b22-b5dc-16273a672796",
            "721fb53c-f240-4ce6-aaaa-9f4be08c3460",
            "38ae0e5d-81ea-45b2-b7f4-8eb197662514",
            "c06d75d6-1a6d-48da-8e09-4d63502dedee",
            "3cca89f6-4b6c-48b0-957b-2efc26b23041",
            "db10fdd2-ea0b-4236-ae14-94781b2f7586",
            "9bd5a67d-2c30-4b51-a6b7-b9eb3583b888",
            "29a89f00-863f-4084-8ec5-db4c455fc788",
            "2734ccd8-075a-412f-8976-e67dfd9416da",
            "a5ee9280-35d0-4aac-89a2-decbe44f483e",
            "790101e3-fd8c-47e3-bcc4-54b18dc2fd9a",
            "aa2725ad-e1d1-40ed-ab4f-0042fe8e222f",
            "7261d2a3-9d9d-43cb-9e3a-4b432a018d9e",
            "7e7202cf-172e-479e-b1d4-2842091d8b3e",
            "ee364118-8538-4817-87be-3e716db337cb",
            "4ee11beb-a38d-47e3-8227-7414b7e09239",
            "f82e52a5-bc15-4106-8c59-2d323c6aa2f1",
            "547abd24-965c-44ce-b5f0-e452aeea3821",
            "d33782ab-d4ee-4ba9-938d-2922e11247be",
            "0c0e3472-dac8-416a-833b-40ef5e725f54",
            "c677c530-6036-4f08-810c-5e2b963b6ded",
            "d1c46e3a-31cb-41e0-acf1-907b405548a3",
            "24e66a7f-c2cb-4c77-b424-5e08b603ee59",
            "15b863c2-28b5-4b31-9379-ff8091b43c28",
            "5eb1332d-741d-47f8-ad4c-da01f28ef2ed",
            "88259ac2-4526-4ea5-b9e9-d03f7dd06c8e",
            "0652a44d-8a63-47b5-b7cf-af85d0c3655a",
            "61f46cc6-d7e0-4aeb-ae8a-47f4eb52c2bc",
            "a3747844-afb9-4883-bbb2-bea5662e919d",
            "e567adff-577f-4fa6-849a-1a112f689048",
            "c96af0be-a3eb-4385-a674-0f83049a23fd",
            "1357e166-4a61-43ab-a4f0-d9cbd7ba53de",
            "e7f85180-91d1-4075-8feb-5b5f495422a9",
            "2a8a00f4-a540-41b4-87f7-465c42e6a071",
            "f11f3084-c84d-4f6e-91d0-8c55df0d8c59",
            "491070bf-06ff-4de8-bf7f-3e121c11c49f",
            "2a95e83b-1c1e-40d2-b8e0-8917aa02703e",
            "a30ef162-2edd-4b12-90d7-25d5049ed098",
            "eaba21c7-6ac1-482f-bdc2-9410e7140b3d",
            "1f7d7534-a522-4df6-a495-44f1c3e4179d",
            "924ef53c-fe52-4d0f-8233-1cbc0f7eb8f7",
            "d9ba24fd-508b-4ddc-9d8c-15467083ba43"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928257468,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298780000,
          "parent_id": "d79ccaee-4168-4c48-920b-7005c81675ea",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            },
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential Algorithms"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 135
        }
      },
      "1317b4a1-6694-4779-83b4-e0b7b2a5775d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757088,
          "id": "1317b4a1-6694-4779-83b4-e0b7b2a5775d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757088,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Most of the time, we’ll need to find out the shortest path from single source to all other nodes or a specific node in a 2D graph. Say for example: we want to find out how many moves are required for a knight to reach a certain square in a chessboard, or we have an array where some cells are blocked, we have to find out the shortest path from one cell to another. We can move only horizontally and vertically. Even diagonal moves can be possible too. For these cases, we can convert the squares or cells in nodes and solve these problems easily using BFS. Now our "
              ],
              ["visited", [["b"]]],
              [", "],
              ["parent", [["b"]]],
              [" and "],
              ["level", [["b"]]],
              [
                " will be 2D arrays. For each node, we’ll consider all possible moves. To find the distance to a specific node, we’ll also check whether we have reached our destination."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "226c26ab-e7d4-4eff-8322-0ee090d58f54": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757089,
          "id": "226c26ab-e7d4-4eff-8322-0ee090d58f54",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757089,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "+----+-----+-----+-----+-----+\n| dx |  1  |  -1 |  0  |  0  |\n+----+-----+-----+-----+-----+\n| dy |  0  |   0 |  1  |  -1 |\n+----+-----+-----+-----+-----+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "3104f50a-b7e2-41fe-97d7-f6e02201ccb8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "a9857e85-a474-4f80-ab84-f665acb992ee",
            "fc0bcc1c-2ee8-47d3-9daa-48c8751d9d90",
            "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
            "262aa6ca-4dd5-455d-9332-1fa70ce2c760",
            "1cee0dbf-0e1c-460d-950f-19a158fe568e"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928740000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551929100000,
          "parent_id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Breadth-First Search"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 52
        }
      },
      "4553c661-e62b-47b1-b5d7-86a3ad2dfcfc": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757089,
          "id": "4553c661-e62b-47b1-b5d7-86a3ad2dfcfc",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757089,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "We’ll also check if we have gone out of bounds, that is we’ve crossed the array boundaries."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "6c702536-d614-4ebd-94d3-118ae1cdc65b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757089,
          "id": "6c702536-d614-4ebd-94d3-118ae1cdc65b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757089,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [["The additional part we need to keep in mind is:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "712c86c5-1416-47be-8588-0855cd8e1454": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757090,
          "id": "712c86c5-1416-47be-8588-0855cd8e1454",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757090,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "Procedure BFS2D(Graph, blocksign, row, column):\nfor i from 1 to row\n    for j from 1 to column\n        visited[i][j] := false\n    end for\nend for\nvisited[source.x][source.y] := true\nlevel[source.x][source.y] := 0\nQ = queue()\nQ.push(source)\nm := dx.size\nwhile Q is not empty\n    top := Q.pop\n    for i from 1 to m\n        temp.x := top.x + dx[i]\n        temp.y := top.y + dy[i]\n        if temp is inside the row and column and top doesn't equal to blocksign\n            visited[temp.x][temp.y] := true\n            level[temp.x][temp.y] := level[top.x][top.y] + 1\n            Q.push(temp)\n        end if\n    end for\nend while\nReturn level"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "7539a302-76ac-4b15-95f3-349955290856": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757090,
          "id": "7539a302-76ac-4b15-95f3-349955290856",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757090,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [["The number of rows and columns will be given."]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "77f39c0a-73b3-45a2-8a0c-4a1d6ac6cf8c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757089,
          "id": "77f39c0a-73b3-45a2-8a0c-4a1d6ac6cf8c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757089,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "There will be one additional thing called direction array. This will simply store the all possible combinations of directions we can go to. Let’s say, for horizontal and vertical moves, our direction arrays will be:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "79a65bec-be82-44c9-a829-c1892a001b83": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757089,
          "id": "79a65bec-be82-44c9-a829-c1892a001b83",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757089,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Here "],
              ["dx", [["i"]]],
              [" represents move in x-axis and "],
              ["dy", [["i"]]],
              [
                " represents move in y-axis. Again this part is optional. You can also write all the possible combinations separately. But it’s easier to handle it using direction array. There can be more and even different combinations for diagonal moves or knight moves."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "1317b4a1-6694-4779-83b4-e0b7b2a5775d",
            "77f39c0a-73b3-45a2-8a0c-4a1d6ac6cf8c",
            "226c26ab-e7d4-4eff-8322-0ee090d58f54",
            "79a65bec-be82-44c9-a829-c1892a001b83",
            "6c702536-d614-4ebd-94d3-118ae1cdc65b",
            "c1b5fb58-913b-41b3-803d-1756b8f0dfd3",
            "4553c661-e62b-47b1-b5d7-86a3ad2dfcfc",
            "7539a302-76ac-4b15-95f3-349955290856",
            "a05cfa55-d52f-4532-95ad-97280f468283",
            "712c86c5-1416-47be-8588-0855cd8e1454",
            "eb6d12c8-8e2e-4902-b0d5-287779e07215"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757091,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757091,
          "parent_id": "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
          "parent_table": "block",
          "properties": {
            "title": [["Finding Shortest Path from Source in a 2D graph"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      },
      "a05cfa55-d52f-4532-95ad-97280f468283": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757090,
          "id": "a05cfa55-d52f-4532-95ad-97280f468283",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757090,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [["Our pseudo-code will be:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "c1b5fb58-913b-41b3-803d-1756b8f0dfd3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757089,
          "id": "c1b5fb58-913b-41b3-803d-1756b8f0dfd3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757089,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "If any of the cell is blocked, for every possible moves, we’ll check if the cell is blocked or not."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "eb6d12c8-8e2e-4902-b0d5-287779e07215": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928757091,
          "id": "eb6d12c8-8e2e-4902-b0d5-287779e07215",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928757091,
          "parent_id": "8ef1e18f-1673-4c22-b9d8-22c8a2ce9c63",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "As we have discussed earlier, BFS only works for unweighted graphs. For weighted graphs, we’ll need "
              ],
              [
                "Dijkstra",
                [
                  [
                    "a",
                    "http://stackoverflow.com/documentation/algorithm/7151/dijkstra-s-algorithm/23947/dijkstras-shortest-path-algorithm"
                  ]
                ]
              ],
              ["’s algorithm. For negative edge cycles, we need "],
              [
                "Bellman-Ford",
                [
                  [
                    "a",
                    "http://stackoverflow.com/documentation/algorithm/4791/bellman-ford-algorithm"
                  ]
                ]
              ],
              [
                "‘s algorithm. Again this algorithm is single source shortest path algorithm. If we need to find out distance from each nodes to all other nodes, we’ll need "
              ],
              [
                "Floyd-Warshall",
                [
                  [
                    "a",
                    "http://stackoverflow.com/documentation/algorithm/7193/floyd-warshall-algorithm"
                  ]
                ]
              ],
              ["’s algorithm."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
