2751 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "9e69da83-fd17-43db-a31b-4f119ca3155c"
      },
      "version": -1
    }
  ]
}
Response:+2499
{
  "recordMap": {
    "block": {
      "9e69da83-fd17-43db-a31b-4f119ca3155c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "21ae21e7-2160-4f87-8af9-c20a083ff080",
            "0500300a-a9a2-4b9e-ad70-7d7cf2696217",
            "0e1bedce-7c28-4755-8631-fc80d55f3dd6",
            "374b723d-201f-4e88-856a-799198490f09",
            "f523adf0-f4e7-4946-a16e-fee24b212a81",
            "963e3b96-8ad9-439b-aafd-e68d89ddec50",
            "c36606de-0383-4faa-944d-abcb63bd0dc2",
            "7d2a08eb-614b-4077-a4c8-3cf92416cb90",
            "2831eb51-6254-4883-aa3a-5ce03659eb9d",
            "e3228ed6-e766-449f-85ed-117966db6e31",
            "436b12de-4014-460c-8991-51d9e1995b15",
            "8225809e-260c-4bd1-9764-3ef1d62bae42",
            "41c8aff1-4404-43d8-b0a6-fdc58e14acf6",
            "68f933d0-e246-4b4a-91ce-5a429903e6b4",
            "0595abc1-da6c-4fcf-ad33-f89e000a1393",
            "600964a6-2eee-4430-a91c-ba6ae68ee253",
            "92852da1-a85d-4662-ba13-263bd2cdbe1e",
            "facd66f8-3521-4ae4-8494-0c0197722c43",
            "c8bf1eb4-ee1a-48d7-8348-14766bf710a3",
            "bd83fab8-e7e5-446a-a308-bb2f7667e622",
            "d72e631d-c2df-4118-b7f0-e5be37118a72",
            "ae0d2de1-3e78-4c8a-a7be-0abba977e6b3",
            "019daf51-8985-4424-8967-5d4b99c703fc",
            "e71d9c3b-00d6-4f22-b9e7-30fef6d8f017",
            "0be6099f-8ae6-4ed8-8853-6225925aea14"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503591,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503591,
          "parent_id": "ec9d0bba-8ded-4256-866e-28adfde6676e",
          "parent_table": "block",
          "properties": {
            "title": [["Introduction To Knuth-Morris-Pratt KMP Algorithm"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      }
    }
  }
}
58348 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "9e69da83-fd17-43db-a31b-4f119ca3155c"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+58088
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "019daf51-8985-4424-8967-5d4b99c703fc": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503591,
          "id": "019daf51-8985-4424-8967-5d4b99c703fc",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503591,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "Procedure KMP(Text, Pattern)\nGenerateSuffixArray(Pattern)\nm := Text.Length\nn := Pattern.Length\ni := 0\nj := 0\nwhile i is less than m\n    if Pattern[j] is equal to Text[i]\n        j := j + 1\n        i := i + 1\n    if j is equal to n\n        Return (j-i)\n    else if i < m and Pattern[j] is not equal t Text[i]\n        if j is not equal to 0\n            j = S[j-1]\n        else\n            i := i + 1\n        end if\n    end if\nend while\nReturn -1"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "039ec42e-e62f-412e-983e-6d5b6b201b60": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "91fee7b5-614e-44ac-9c69-2c43b78c7706",
            "1b2f4c66-4ea6-4d7b-a266-531792730534",
            "6eb693f8-f70b-45c9-a6db-644dea3bc144",
            "ee1a4539-5889-4a51-bc45-1ed4ce501170",
            "8ae5c9b5-b80d-4e27-930b-0dbbf5b2a075",
            "0483f45c-fa31-493e-bd1b-b9e924123210",
            "e737c451-edb2-4ee1-8b50-4891f751f559",
            "fb292c5c-1e2c-4d16-9d29-fce0aff04b2b",
            "c8277fc4-6841-459e-81f4-c90a99fd83fa",
            "adfec1cf-4941-4483-b98d-9550de7e3916",
            "2bfd570f-dc07-4daa-b3b2-a794ef12f08e",
            "a034d8c3-224b-46dc-bc26-d44b569e39e0",
            "8c1be630-50c9-4162-b355-a5d6917f9e65",
            "56228e72-edf0-4f14-b6c7-1d113093b22a",
            "2885c26f-5511-47a5-900d-5d725326f99d",
            "e800516e-b244-4000-89c7-0041f1acd148",
            "7c62ae2d-e334-4dc4-a641-184b79672747",
            "ec9d0bba-8ded-4256-866e-28adfde6676e",
            "f00ac53f-26f5-4356-bd05-744ca9c233b1",
            "07b6aee1-86e2-4b06-9533-93f2f24dd419",
            "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
            "aed1f400-b221-4067-80e6-2fda841c33f0",
            "a747cf00-d05a-4132-9b34-4cea62968a38",
            "0abdd157-bda8-4285-b8a7-5aa4dd7e132b",
            "e79c088d-5ede-4b22-b5dc-16273a672796",
            "721fb53c-f240-4ce6-aaaa-9f4be08c3460",
            "38ae0e5d-81ea-45b2-b7f4-8eb197662514",
            "c06d75d6-1a6d-48da-8e09-4d63502dedee",
            "3cca89f6-4b6c-48b0-957b-2efc26b23041",
            "db10fdd2-ea0b-4236-ae14-94781b2f7586",
            "9bd5a67d-2c30-4b51-a6b7-b9eb3583b888",
            "29a89f00-863f-4084-8ec5-db4c455fc788",
            "2734ccd8-075a-412f-8976-e67dfd9416da",
            "a5ee9280-35d0-4aac-89a2-decbe44f483e",
            "790101e3-fd8c-47e3-bcc4-54b18dc2fd9a",
            "aa2725ad-e1d1-40ed-ab4f-0042fe8e222f",
            "7261d2a3-9d9d-43cb-9e3a-4b432a018d9e",
            "7e7202cf-172e-479e-b1d4-2842091d8b3e",
            "ee364118-8538-4817-87be-3e716db337cb",
            "4ee11beb-a38d-47e3-8227-7414b7e09239",
            "f82e52a5-bc15-4106-8c59-2d323c6aa2f1",
            "547abd24-965c-44ce-b5f0-e452aeea3821",
            "d33782ab-d4ee-4ba9-938d-2922e11247be",
            "0c0e3472-dac8-416a-833b-40ef5e725f54",
            "c677c530-6036-4f08-810c-5e2b963b6ded",
            "d1c46e3a-31cb-41e0-acf1-907b405548a3",
            "24e66a7f-c2cb-4c77-b424-5e08b603ee59",
            "15b863c2-28b5-4b31-9379-ff8091b43c28",
            "5eb1332d-741d-47f8-ad4c-da01f28ef2ed",
            "88259ac2-4526-4ea5-b9e9-d03f7dd06c8e",
            "0652a44d-8a63-47b5-b7cf-af85d0c3655a",
            "61f46cc6-d7e0-4aeb-ae8a-47f4eb52c2bc",
            "a3747844-afb9-4883-bbb2-bea5662e919d",
            "e567adff-577f-4fa6-849a-1a112f689048",
            "c96af0be-a3eb-4385-a674-0f83049a23fd",
            "1357e166-4a61-43ab-a4f0-d9cbd7ba53de",
            "e7f85180-91d1-4075-8feb-5b5f495422a9",
            "2a8a00f4-a540-41b4-87f7-465c42e6a071",
            "f11f3084-c84d-4f6e-91d0-8c55df0d8c59",
            "491070bf-06ff-4de8-bf7f-3e121c11c49f",
            "2a95e83b-1c1e-40d2-b8e0-8917aa02703e",
            "a30ef162-2edd-4b12-90d7-25d5049ed098",
            "eaba21c7-6ac1-482f-bdc2-9410e7140b3d",
            "1f7d7534-a522-4df6-a495-44f1c3e4179d",
            "924ef53c-fe52-4d0f-8233-1cbc0f7eb8f7",
            "d9ba24fd-508b-4ddc-9d8c-15467083ba43"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928257468,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298780000,
          "parent_id": "d79ccaee-4168-4c48-920b-7005c81675ea",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            },
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential Algorithms"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 135
        }
      },
      "0500300a-a9a2-4b9e-ad70-7d7cf2696217": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503577,
          "id": "0500300a-a9a2-4b9e-ad70-7d7cf2696217",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503577,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "+-------+---+---+---+---+---+---+---+---+\n| Index | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+-------+---+---+---+---+---+---+---+---+\n|  Text | a | b | c | b | c | g | l | x |\n+-------+---+---+---+---+---+---+---+---+\n\n+---------+---+---+---+---+\n| Index   | 0 | 1 | 2 | 3 |\n+---------+---+---+---+---+\n| Pattern | b | c | g | l |\n+---------+---+---+---+---+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "0595abc1-da6c-4fcf-ad33-f89e000a1393": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503586,
          "id": "0595abc1-da6c-4fcf-ad33-f89e000a1393",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503586,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Since "],
              ["Pattern[1]", [["b"]]],
              [" and "],
              ["Pattern[5]", [["b"]]],
              [" is a match, we put "],
              ["S[i]", [["b"]]],
              [" = "],
              ["S[5]", [["b"]]],
              [" = "],
              ["j", [["b"]]],
              [" + "],
              ["1", [["b"]]],
              [" = "],
              ["1", [["b"]]],
              [" + "],
              ["1", [["b"]]],
              [" = "],
              ["2", [["b"]]],
              [". If we continue, we’ll find a mismatch for "],
              ["j", [["b"]]],
              [" = "],
              ["3", [["b"]]],
              [" and "],
              ["i", [["b"]]],
              [" = "],
              ["7", [["b"]]],
              [". Since "],
              ["j", [["b"]]],
              [" is not equal to "],
              ["0", [["b"]]],
              [", we put "],
              ["j", [["b"]]],
              [" = "],
              ["S[j-1]", [["b"]]],
              [". And we’ll compare the characters at "],
              ["i", [["b"]]],
              [" and "],
              ["j", [["b"]]],
              [" are same or not, since they are same, we’ll put "],
              ["S[i]", [["b"]]],
              [" = "],
              ["j", [["b"]]],
              [" + 1. Our completed array will look like:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "0be6099f-8ae6-4ed8-8853-6225925aea14": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503591,
          "id": "0be6099f-8ae6-4ed8-8853-6225925aea14",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503591,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["PS: If you want to find multiple occurrences of "],
              ["Pattern", [["i"]]],
              [" in the "],
              ["Text", [["i"]]],
              [", instead of returning the value, print it/store it and set "],
              ["j := S[j-1]", [["c"]]],
              [". Also keep a "],
              ["flag", [["c"]]],
              [
                " to track whether you have found any occurrence or not and handle it accordingly."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "0e1bedce-7c28-4755-8631-fc80d55f3dd6": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503577,
          "id": "0e1bedce-7c28-4755-8631-fc80d55f3dd6",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503577,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This "],
              ["pattern", [["i"]]],
              [" does exist in the "],
              ["text", [["i"]]],
              [". So our substring search should return "],
              ["3", [["b"]]],
              [", the index of the position from which this "],
              ["pattern", [["i"]]],
              [
                " starts. So how does our brute force substring search procedure work?"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "21ae21e7-2160-4f87-8af9-c20a083ff080": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503576,
          "id": "21ae21e7-2160-4f87-8af9-c20a083ff080",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503576,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Suppose that we have a "],
              ["text", [["i"]]],
              [" and a "],
              ["pattern", [["i"]]],
              [
                ". We need to determine if the pattern exists in the text or not. For example:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "2831eb51-6254-4883-aa3a-5ce03659eb9d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503583,
          "id": "2831eb51-6254-4883-aa3a-5ce03659eb9d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503583,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Now, how do we efficiently compute if suffix is same as prefix and at what point to start the check if there is a mismatch of character between "
              ],
              ["Text", [["i"]]],
              [" and "],
              ["Pattern", [["i"]]],
              [". Let’s take a look at an example:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "374b723d-201f-4e88-856a-799198490f09": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503579,
          "id": "374b723d-201f-4e88-856a-799198490f09",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503579,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["What we usually do is: we start from the "],
              ["0th", [["b"]]],
              [" index of the "],
              ["text", [["i"]]],
              [" and the "],
              ["0th", [["b"]]],
              [" index of our *pattern and we compare "],
              ["Text[0]", [["b"]]],
              [" with "],
              ["Pattern[0]", [["b"]]],
              [". Since they are not a match, we go to the next index of our "],
              ["text", [["i"]]],
              [" and we compare "],
              ["Text[1]", [["b"]]],
              [" with "],
              ["Pattern[0]", [["b"]]],
              [". Since this is a match, we increment the index of our "],
              ["pattern", [["i"]]],
              [" and the index of the "],
              ["Text", [["i"]]],
              [" also. We compare "],
              ["Text[2]", [["b"]]],
              [" with "],
              ["Pattern[1]", [["b"]]],
              [
                ". They are also a match. Following the same procedure stated before, we now compare "
              ],
              ["Text[3]", [["b"]]],
              [" with "],
              ["Pattern[2]", [["b"]]],
              [
                ". As they do not match, we start from the next position where we started finding the match. That is index "
              ],
              ["2", [["b"]]],
              [" of the "],
              ["Text", [["i"]]],
              [". We compare "],
              ["Text[2]", [["b"]]],
              [" with "],
              ["Pattern[0]", [["b"]]],
              [". They don’t match. Then incrementing index of the "],
              ["Text", [["i"]]],
              [", we compare "],
              ["Text[3]", [["b"]]],
              [" with "],
              ["Pattern[0]", [["b"]]],
              [". They match. Again "],
              ["Text[4]", [["b"]]],
              [" and "],
              ["Pattern[1]", [["b"]]],
              [" match, "],
              ["Text[5]", [["b"]]],
              [" and "],
              ["Pattern[2]", [["b"]]],
              [" match and "],
              ["Text[6]", [["b"]]],
              [" and "],
              ["Pattern[3]", [["b"]]],
              [" match. Since we’ve reached the end of our "],
              ["Pattern", [["i"]]],
              [
                ", we now return the index from which our match started, that is "
              ],
              ["3", [["b"]]],
              [". If our "],
              ["pattern", [["i"]]],
              [" was: "],
              ["bcgll", [["c"]]],
              [", that means if the "],
              ["pattern", [["i"]]],
              [" didn’t exist in our "],
              ["text", [["i"]]],
              [", our search should return exception or "],
              ["-1", [["b"]]],
              [
                " or any other predefined value. We can clearly see that, in the worst case, this algorithm would take "
              ],
              ["O(mn)", [["c"]]],
              [" time where "],
              ["m", [["b"]]],
              [" is the length of the "],
              ["Text", [["i"]]],
              [" and "],
              ["n", [["b"]]],
              [" is the length of the "],
              ["Pattern", [["i"]]],
              [
                ". How do we reduce this time complexity? This is where KMP Substring Search Algorithm comes into the picture."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "41c8aff1-4404-43d8-b0a6-fdc58e14acf6": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503585,
          "id": "41c8aff1-4404-43d8-b0a6-fdc58e14acf6",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503585,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Pattern[j]", [["b"]]],
              [" and "],
              ["Pattern[i]", [["b"]]],
              [" don’t match, so we increment "],
              ["i", [["b"]]],
              [" and since "],
              ["j", [["b"]]],
              [" is "],
              ["0", [["b"]]],
              [", we don’t check the previous value and put "],
              ["Pattern[i]", [["b"]]],
              [" = "],
              ["0", [["b"]]],
              [". If we keep incrementing "],
              ["i", [["b"]]],
              [", for "],
              ["i", [["b"]]],
              [" = "],
              ["4", [["b"]]],
              [", we’ll get a match, so we put "],
              ["S[i]", [["b"]]],
              [" = "],
              ["S[4]", [["b"]]],
              [" = "],
              ["j", [["b"]]],
              [" + "],
              ["1", [["b"]]],
              [" = "],
              ["0", [["b"]]],
              [" + "],
              ["1", [["b"]]],
              [" = "],
              ["1", [["b"]]],
              [" and increment "],
              ["j", [["b"]]],
              [" and "],
              ["i", [["b"]]],
              [". Our array will look like:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "436b12de-4014-460c-8991-51d9e1995b15": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503584,
          "id": "436b12de-4014-460c-8991-51d9e1995b15",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503584,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "We’ll generate an array containing the required information. Let’s call the array "
              ],
              ["S", [["b"]]],
              [
                ". The size of the array will be same as the length of the pattern. Since the first letter of the "
              ],
              ["Pattern", [["i"]]],
              [" can’t be the suffix of any prefix, we’ll put "],
              ["S[0]", [["b"]]],
              [" = "],
              ["0", [["b"]]],
              [". We take "],
              ["i", [["b"]]],
              [" = "],
              ["1", [["b"]]],
              [" and "],
              ["j", [["b"]]],
              [" = "],
              ["0", [["b"]]],
              [" at first. At each step we compare "],
              ["Pattern[i]", [["b"]]],
              [" and "],
              ["Pattern[j]", [["b"]]],
              [" and increment "],
              ["i", [["b"]]],
              [". If there is a match we put "],
              ["S[i]", [["b"]]],
              [" = "],
              ["j", [["b"]]],
              [" + "],
              ["1", [["b"]]],
              [" and increment "],
              ["j", [["b"]]],
              [
                ", if there is a mismatch, we check the previous value position of "
              ],
              ["j", [["b"]]],
              [" (if available) and set "],
              ["j", [["b"]]],
              [" = "],
              ["S[j-1]", [["b"]]],
              [" (if "],
              ["j", [["b"]]],
              [" is not equal to "],
              ["0", [["b"]]],
              ["), we keep doing this until "],
              ["S[j]", [["b"]]],
              [" doesn’t match with "],
              ["S[i]", [["b"]]],
              [" or "],
              ["j", [["b"]]],
              [" doesn’t become "],
              ["0", [["b"]]],
              [". For the later one, we put "],
              ["S[i]", [["b"]]],
              [" = "],
              ["0", [["b"]]],
              [". For our example:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "600964a6-2eee-4430-a91c-ba6ae68ee253": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503587,
          "id": "600964a6-2eee-4430-a91c-ba6ae68ee253",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503587,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "+---------+---+---+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 0 | 1 | 2 | 3 | 1 |\n+---------+---+---+---+---+---+---+---+---+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "68f933d0-e246-4b4a-91ce-5a429903e6b4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503585,
          "id": "68f933d0-e246-4b4a-91ce-5a429903e6b4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503585,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "j               i\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 0 | 1 |   |   |   |\n+---------+---+---+---+---+---+---+---+---+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "7d2a08eb-614b-4077-a4c8-3cf92416cb90": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503582,
          "id": "7d2a08eb-614b-4077-a4c8-3cf92416cb90",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503582,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["At first, our "],
              ["Text", [["i"]]],
              [" and "],
              ["Pattern", [["i"]]],
              [" matches till index "],
              ["2", [["b"]]],
              [". "],
              ["Text[3]", [["b"]]],
              [" and "],
              ["Pattern[3]", [["b"]]],
              [" doesn’t match. So our aim is to not go backwards in this "],
              ["Text", [["i"]]],
              [
                ", that is, in case of a mismatch, we don’t want our matching to begin again from the position that we started matching with. To achieve that, we’ll look for a "
              ],
              ["suffix", [["b"]]],
              [" in our "],
              ["Pattern", [["i"]]],
              [" right before our mismatch occurred (substring "],
              ["abc", [["b"]]],
              ["), which is also a "],
              ["prefix", [["b"]]],
              [" of the substring of our "],
              ["Pattern", [["i"]]],
              [
                ". For our example, since all the characters are unique, there is no suffix, that is the prefix of our matched substring. So what that means is, our next comparison will start from index "
              ],
              ["0", [["b"]]],
              [
                ". Hold on for a bit, you’ll understand why we did this. Next, we compare "
              ],
              ["Text[3]", [["b"]]],
              [" with "],
              ["Pattern[0]", [["b"]]],
              [" and it doesn’t match. After that, for "],
              ["Text", [["i"]]],
              [" from index "],
              ["4", [["b"]]],
              [" to index "],
              ["9", [["b"]]],
              [" and for "],
              ["Pattern", [["i"]]],
              [" from index "],
              ["0", [["b"]]],
              [" to index "],
              ["5", [["b"]]],
              [", we find a match. We find a mismatch in "],
              ["Text[10]", [["b"]]],
              [" and "],
              ["Pattern[6]", [["b"]]],
              [". So we take the substring from "],
              ["Pattern", [["i"]]],
              [" right before the point where mismatch occurs (substring "],
              ["abcdabc", [["b"]]],
              [
                "), we check for a suffix, that is also a prefix of this substring. We can see here "
              ],
              ["ab", [["b"]]],
              [
                " is both the suffix and prefix of this substring. What that means is, since we’ve matched until "
              ],
              ["Text[10]", [["b"]]],
              [", the characters right before the mismatch is "],
              ["ab", [["b"]]],
              [". What we can infer from it is that since "],
              ["ab", [["b"]]],
              [
                " is also a prefix of the substring we took, we don’t have to check "
              ],
              ["ab", [["b"]]],
              [" again and the next check can start from "],
              ["Text[10]", [["b"]]],
              [" and "],
              ["Pattern[2]", [["b"]]],
              [". We didn’t have to look back to the whole "],
              ["Text", [["i"]]],
              [
                ", we can start directly from where our mismatch occurred. Now we check "
              ],
              ["Text[10]", [["b"]]],
              [" and "],
              ["Pattern[2]", [["b"]]],
              [", since it’s a mismatch, and the substring before mismatch ("],
              ["abc", [["b"]]],
              [") doesn’t contain a suffix which is also a prefix, we check "],
              ["Text[10]", [["b"]]],
              [" and "],
              ["Pattern[0]", [["b"]]],
              [", they don’t match. After that for "],
              ["Text", [["i"]]],
              [" from index "],
              ["11", [["b"]]],
              [" to index "],
              ["17", [["b"]]],
              [" and for "],
              ["Pattern", [["i"]]],
              [" from index "],
              ["0", [["b"]]],
              [" to index "],
              ["6", [["b"]]],
              [". We find a mismatch in "],
              ["Text[18]", [["b"]]],
              [" and "],
              ["Pattern[7]", [["b"]]],
              [". So again we check the substring before mismatch (substring "],
              ["abcdabc", [["b"]]],
              [") and find "],
              ["abc", [["b"]]],
              [" is both the suffix and the prefix. So since we matched till "],
              ["Pattern[7]", [["b"]]],
              [", "],
              ["abc", [["b"]]],
              [" must be before "],
              ["Text[18]", [["b"]]],
              [". That means, we don’t need to compare until "],
              ["Text[17]", [["b"]]],
              [" and our comparison will start from "],
              ["Text[18]", [["b"]]],
              [" and "],
              ["Pattern[3]", [["b"]]],
              [". Thus we will find a match and we’ll return "],
              ["15", [["b"]]],
              [
                " which is our starting index of the match. This is how our KMP Substring Search works using suffix and prefix information."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "8225809e-260c-4bd1-9764-3ef1d62bae42": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503584,
          "id": "8225809e-260c-4bd1-9764-3ef1d62bae42",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503584,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "j   i\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "92852da1-a85d-4662-ba13-263bd2cdbe1e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503588,
          "id": "92852da1-a85d-4662-ba13-263bd2cdbe1e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503588,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This is our required array. Here a nonzero-value of "],
              ["S[i]", [["b"]]],
              [" means there is a "],
              ["S[i]", [["b"]]],
              [
                " length suffix same as the prefix in that substring (substring from "
              ],
              ["0", [["b"]]],
              [" to "],
              ["i", [["b"]]],
              [") and the next comparison will start from "],
              ["S[i]", [["b"]]],
              [" + "],
              ["1", [["b"]]],
              [" position of the "],
              ["Pattern", [["i"]]],
              [". Our algorithm to generate the array would look like:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "963e3b96-8ad9-439b-aafd-e68d89ddec50": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503580,
          "id": "963e3b96-8ad9-439b-aafd-e68d89ddec50",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503580,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Let’s extend our example "],
              ["Text", [["i"]]],
              [" and "],
              ["Pattern", [["i"]]],
              [" for better understanding:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "9e69da83-fd17-43db-a31b-4f119ca3155c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "21ae21e7-2160-4f87-8af9-c20a083ff080",
            "0500300a-a9a2-4b9e-ad70-7d7cf2696217",
            "0e1bedce-7c28-4755-8631-fc80d55f3dd6",
            "374b723d-201f-4e88-856a-799198490f09",
            "f523adf0-f4e7-4946-a16e-fee24b212a81",
            "963e3b96-8ad9-439b-aafd-e68d89ddec50",
            "c36606de-0383-4faa-944d-abcb63bd0dc2",
            "7d2a08eb-614b-4077-a4c8-3cf92416cb90",
            "2831eb51-6254-4883-aa3a-5ce03659eb9d",
            "e3228ed6-e766-449f-85ed-117966db6e31",
            "436b12de-4014-460c-8991-51d9e1995b15",
            "8225809e-260c-4bd1-9764-3ef1d62bae42",
            "41c8aff1-4404-43d8-b0a6-fdc58e14acf6",
            "68f933d0-e246-4b4a-91ce-5a429903e6b4",
            "0595abc1-da6c-4fcf-ad33-f89e000a1393",
            "600964a6-2eee-4430-a91c-ba6ae68ee253",
            "92852da1-a85d-4662-ba13-263bd2cdbe1e",
            "facd66f8-3521-4ae4-8494-0c0197722c43",
            "c8bf1eb4-ee1a-48d7-8348-14766bf710a3",
            "bd83fab8-e7e5-446a-a308-bb2f7667e622",
            "d72e631d-c2df-4118-b7f0-e5be37118a72",
            "ae0d2de1-3e78-4c8a-a7be-0abba977e6b3",
            "019daf51-8985-4424-8967-5d4b99c703fc",
            "e71d9c3b-00d6-4f22-b9e7-30fef6d8f017",
            "0be6099f-8ae6-4ed8-8853-6225925aea14"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503591,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503591,
          "parent_id": "ec9d0bba-8ded-4256-866e-28adfde6676e",
          "parent_table": "block",
          "properties": {
            "title": [["Introduction To Knuth-Morris-Pratt KMP Algorithm"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      },
      "ae0d2de1-3e78-4c8a-a7be-0abba977e6b3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503591,
          "id": "ae0d2de1-3e78-4c8a-a7be-0abba977e6b3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503591,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["We have a "],
              ["Text", [["i"]]],
              [", a "],
              ["Pattern", [["i"]]],
              [" and a pre-calculated array "],
              ["S", [["i"]]],
              [" using our logic defined before. We compare "],
              ["Text[0]", [["b"]]],
              [" and "],
              ["Pattern[0]", [["b"]]],
              [" and they are same. "],
              ["Text[1]", [["b"]]],
              [" and "],
              ["Pattern[1]", [["b"]]],
              [" are same. "],
              ["Text[2]", [["b"]]],
              [" and "],
              ["Pattern[2]", [["b"]]],
              [
                " are not same. We check the value at the position right before the mismatch. Since "
              ],
              ["S[1]", [["b"]]],
              [" is "],
              ["0", [["b"]]],
              [
                ", there is no suffix that is same as the prefix in our substring and our comparison starts at position "
              ],
              ["S[1]", [["b"]]],
              [", which is "],
              ["0", [["b"]]],
              [". So "],
              ["Pattern[0]", [["b"]]],
              [" is not same as "],
              ["Text[2]", [["b"]]],
              [", so we move on. "],
              ["Text[3]", [["b"]]],
              [" is same as "],
              ["Pattern[0]", [["b"]]],
              [" and there is a match till "],
              ["Text[8]", [["b"]]],
              [" and "],
              ["Pattern[5]", [["b"]]],
              [". We go one step back in the "],
              ["S", [["b"]]],
              [" array and find "],
              ["2", [["b"]]],
              [". So this means there is a prefix of length "],
              ["2", [["b"]]],
              [" which is also the suffix of this substring ("],
              ["abcab)", [["b"]]],
              [" which is "],
              ["ab", [["b"]]],
              [". That also means that there is an "],
              ["ab", [["b"]]],
              [" before "],
              ["Text[8]", [["b"]]],
              [". So we can safely ignore "],
              ["Pattern[0]", [["b"]]],
              [" and "],
              ["Pattern[1]", [["b"]]],
              [" and start our next comparison from "],
              ["Pattern[2]", [["b"]]],
              [" and "],
              ["Text[8]", [["b"]]],
              [". If we continue, we’ll find the "],
              ["Pattern", [["i"]]],
              [" in the "],
              ["Text", [["i"]]],
              [". Our procedure will look like:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "bd83fab8-e7e5-446a-a308-bb2f7667e622": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503589,
          "id": "bd83fab8-e7e5-446a-a308-bb2f7667e622",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503589,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Now let’s do a substring search using the following example:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "c36606de-0383-4faa-944d-abcb63bd0dc2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503581,
          "id": "c36606de-0383-4faa-944d-abcb63bd0dc2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503581,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n| Index |0 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|13|14|15|16|17|18|19|20|21|22|\n+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n|  Text |a |b |c |x |a |b |c |d |a |b |x |a |b |c |d |a |b |c |d |a |b |c |y |\n+-------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | y |\n+---------+---+---+---+---+---+---+---+---+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "c8bf1eb4-ee1a-48d7-8348-14766bf710a3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503589,
          "id": "c8bf1eb4-ee1a-48d7-8348-14766bf710a3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503589,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The time complexity to build this array is "],
              ["O(n)", [["c"]]],
              [" and the space complexity is also "],
              ["O(n)", [["c"]]],
              [
                ". To make sure if you have completely understood the algorithm, try to generate an array for pattern "
              ],
              ["aabaabaa", [["c"]]],
              [" and check if the result matches with "],
              ["this", [["a", "https://i.stack.imgur.com/4aqZk.jpg"]]],
              [" one."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "d72e631d-c2df-4118-b7f0-e5be37118a72": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503589,
          "id": "d72e631d-c2df-4118-b7f0-e5be37118a72",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503589,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |\n+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n|   Text  | a | b | x | a | b | c | a | b | c | a | b | y |\n+---------+---+---+---+---+---+---+---+---+---+---+---+---+\n\n+---------+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 |\n+---------+---+---+---+---+---+---+\n| Pattern | a | b | c | a | b | y |\n+---------+---+---+---+---+---+---+\n|    S    | 0 | 0 | 0 | 1 | 2 | 0 |\n+---------+---+---+---+---+---+---+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "e3228ed6-e766-449f-85ed-117966db6e31": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503583,
          "id": "e3228ed6-e766-449f-85ed-117966db6e31",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503583,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "+---------+---+---+---+---+---+---+---+---+\n|  Index  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |\n+---------+---+---+---+---+---+---+---+---+\n| Pattern | a | b | c | d | a | b | c | a |\n+---------+---+---+---+---+---+---+---+---+"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "e71d9c3b-00d6-4f22-b9e7-30fef6d8f017": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503591,
          "id": "e71d9c3b-00d6-4f22-b9e7-30fef6d8f017",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503591,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The time complexity of this algorithm apart from the Suffix Array Calculation is "
              ],
              ["O(m)", [["c"]]],
              [". Since "],
              ["GenerateSuffixArray", [["i"]]],
              [" takes "],
              ["O(n)", [["c"]]],
              [", the total time complexity of KMP Algorithm is: "],
              ["O(m+n)", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "ec9d0bba-8ded-4256-866e-28adfde6676e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "7451d675-1780-461e-abd5-8fdc87b23073",
            "9e69da83-fd17-43db-a31b-4f119ca3155c",
            "e11d5cd5-6de3-47a6-a93f-fa6e907f2a8b",
            "de0748a3-0d56-4d26-9e43-c6f0fedc01fe",
            "d87c729f-306e-40cb-902b-ab0ef26c20ea"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928440000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "ec9d0bba-8ded-4256-866e-28adfde6676e",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928680000,
          "parent_id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Substring Search"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 31
        }
      },
      "f523adf0-f4e7-4946-a16e-fee24b212a81": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503580,
          "id": "f523adf0-f4e7-4946-a16e-fee24b212a81",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503580,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The "],
              [
                "Knuth-Morris-Pratt String Searching Algorithm",
                [
                  [
                    "a",
                    "https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm"
                  ]
                ]
              ],
              [
                " or KMP Algorithm searches for occurrences of a “Pattern” within a main “Text” by employing the observation that when a mismatch occurs, the word itself embodies sufficient information to determine where the next match could begin, thus bypassing re-examination of previously matched characters. The algorithm was conceived in 1970 by "
              ],
              [
                "Donuld Knuth",
                [["a", "https://en.wikipedia.org/wiki/Donald_Knuth"]]
              ],
              [" and "],
              [
                "Vaughan Pratt",
                [["a", "https://en.wikipedia.org/wiki/Vaughan_Pratt"]]
              ],
              [" and independently by "],
              [
                "James H. Morris",
                [["a", "https://en.wikipedia.org/wiki/James_H._Morris"]]
              ],
              [". The trio published it jointly in 1977."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "facd66f8-3521-4ae4-8494-0c0197722c43": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928503588,
          "id": "facd66f8-3521-4ae4-8494-0c0197722c43",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928503588,
          "parent_id": "9e69da83-fd17-43db-a31b-4f119ca3155c",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "Procedure GenerateSuffixArray(Pattern):\ni := 1\nj := 0\nn := Pattern.length\nwhile i is less than n\n    if Pattern[i] is equal to Pattern[j]\n        S[i] := j + 1\n        j := j + 1\n        i := i + 1\n    else\n        if j is not equal to 0\n            j := S[j-1]\n        else\n            S[i] := 0\n            i := i + 1\n        end if\n    end if\nend while"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
