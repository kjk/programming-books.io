1786 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221"
      },
      "version": -1
    }
  ]
}
Response:+1534
{
  "recordMap": {
    "block": {
      "66eb611b-33d4-4cff-8f2a-dedc32e4e221": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "aac01506-a97d-4990-9937-e681faf7e640",
            "2d9ac90f-8021-46a3-abb8-23fc5e255409",
            "491e9516-9518-45ab-8adc-22ed03d84e58",
            "0482f9fc-bfcd-4f18-82cb-4ce0bfc70034",
            "ed447471-9e77-4f0a-9cbc-a084b843e003",
            "7b7c3589-b4dd-4198-b8f7-f179143f12cd",
            "8846724f-abaf-46a8-a293-fb390da7f3e1"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867797,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867797,
          "parent_id": "2734ccd8-075a-412f-8976-e67dfd9416da",
          "parent_table": "block",
          "properties": {
            "title": [["Non-Linear Equation"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      }
    }
  }
}
19992 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+19732
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "039ec42e-e62f-412e-983e-6d5b6b201b60": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "91fee7b5-614e-44ac-9c69-2c43b78c7706",
            "1b2f4c66-4ea6-4d7b-a266-531792730534",
            "6eb693f8-f70b-45c9-a6db-644dea3bc144",
            "ee1a4539-5889-4a51-bc45-1ed4ce501170",
            "8ae5c9b5-b80d-4e27-930b-0dbbf5b2a075",
            "0483f45c-fa31-493e-bd1b-b9e924123210",
            "e737c451-edb2-4ee1-8b50-4891f751f559",
            "fb292c5c-1e2c-4d16-9d29-fce0aff04b2b",
            "c8277fc4-6841-459e-81f4-c90a99fd83fa",
            "adfec1cf-4941-4483-b98d-9550de7e3916",
            "2bfd570f-dc07-4daa-b3b2-a794ef12f08e",
            "a034d8c3-224b-46dc-bc26-d44b569e39e0",
            "8c1be630-50c9-4162-b355-a5d6917f9e65",
            "56228e72-edf0-4f14-b6c7-1d113093b22a",
            "2885c26f-5511-47a5-900d-5d725326f99d",
            "e800516e-b244-4000-89c7-0041f1acd148",
            "7c62ae2d-e334-4dc4-a641-184b79672747",
            "ec9d0bba-8ded-4256-866e-28adfde6676e",
            "f00ac53f-26f5-4356-bd05-744ca9c233b1",
            "07b6aee1-86e2-4b06-9533-93f2f24dd419",
            "3104f50a-b7e2-41fe-97d7-f6e02201ccb8",
            "aed1f400-b221-4067-80e6-2fda841c33f0",
            "a747cf00-d05a-4132-9b34-4cea62968a38",
            "0abdd157-bda8-4285-b8a7-5aa4dd7e132b",
            "e79c088d-5ede-4b22-b5dc-16273a672796",
            "721fb53c-f240-4ce6-aaaa-9f4be08c3460",
            "38ae0e5d-81ea-45b2-b7f4-8eb197662514",
            "c06d75d6-1a6d-48da-8e09-4d63502dedee",
            "3cca89f6-4b6c-48b0-957b-2efc26b23041",
            "db10fdd2-ea0b-4236-ae14-94781b2f7586",
            "9bd5a67d-2c30-4b51-a6b7-b9eb3583b888",
            "29a89f00-863f-4084-8ec5-db4c455fc788",
            "2734ccd8-075a-412f-8976-e67dfd9416da",
            "a5ee9280-35d0-4aac-89a2-decbe44f483e",
            "790101e3-fd8c-47e3-bcc4-54b18dc2fd9a",
            "aa2725ad-e1d1-40ed-ab4f-0042fe8e222f",
            "7261d2a3-9d9d-43cb-9e3a-4b432a018d9e",
            "7e7202cf-172e-479e-b1d4-2842091d8b3e",
            "ee364118-8538-4817-87be-3e716db337cb",
            "4ee11beb-a38d-47e3-8227-7414b7e09239",
            "f82e52a5-bc15-4106-8c59-2d323c6aa2f1",
            "547abd24-965c-44ce-b5f0-e452aeea3821",
            "d33782ab-d4ee-4ba9-938d-2922e11247be",
            "0c0e3472-dac8-416a-833b-40ef5e725f54",
            "c677c530-6036-4f08-810c-5e2b963b6ded",
            "d1c46e3a-31cb-41e0-acf1-907b405548a3",
            "24e66a7f-c2cb-4c77-b424-5e08b603ee59",
            "15b863c2-28b5-4b31-9379-ff8091b43c28",
            "5eb1332d-741d-47f8-ad4c-da01f28ef2ed",
            "88259ac2-4526-4ea5-b9e9-d03f7dd06c8e",
            "0652a44d-8a63-47b5-b7cf-af85d0c3655a",
            "61f46cc6-d7e0-4aeb-ae8a-47f4eb52c2bc",
            "a3747844-afb9-4883-bbb2-bea5662e919d",
            "e567adff-577f-4fa6-849a-1a112f689048",
            "c96af0be-a3eb-4385-a674-0f83049a23fd",
            "1357e166-4a61-43ab-a4f0-d9cbd7ba53de",
            "e7f85180-91d1-4075-8feb-5b5f495422a9",
            "2a8a00f4-a540-41b4-87f7-465c42e6a071",
            "f11f3084-c84d-4f6e-91d0-8c55df0d8c59",
            "491070bf-06ff-4de8-bf7f-3e121c11c49f",
            "2a95e83b-1c1e-40d2-b8e0-8917aa02703e",
            "a30ef162-2edd-4b12-90d7-25d5049ed098",
            "eaba21c7-6ac1-482f-bdc2-9410e7140b3d",
            "1f7d7534-a522-4df6-a495-44f1c3e4179d",
            "924ef53c-fe52-4d0f-8233-1cbc0f7eb8f7",
            "d9ba24fd-508b-4ddc-9d8c-15467083ba43"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928257468,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298780000,
          "parent_id": "d79ccaee-4168-4c48-920b-7005c81675ea",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            },
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential Algorithms"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 135
        }
      },
      "0482f9fc-bfcd-4f18-82cb-4ce0bfc70034": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867796,
          "id": "0482f9fc-bfcd-4f18-82cb-4ce0bfc70034",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867796,
          "parent_id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Bracketing Method", [["b"]]],
              [
                ": We take two initial points where the root lies in between them. Example- Bisection Method, False Position Method."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "2734ccd8-075a-412f-8976-e67dfd9416da": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "d01e9e65-fc90-499f-980e-f006164da2c6",
            "4152b699-bcba-4c56-9af6-fceea49e715d",
            "66eb611b-33d4-4cff-8f2a-dedc32e4e221"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928860000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "2734ccd8-075a-412f-8976-e67dfd9416da",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551929100000,
          "parent_id": "039ec42e-e62f-412e-983e-6d5b6b201b60",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Equation Solving"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 29
        }
      },
      "2d9ac90f-8021-46a3-abb8-23fc5e255409": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867796,
          "id": "2d9ac90f-8021-46a3-abb8-23fc5e255409",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867796,
          "parent_id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Direct Method", [["b"]]],
              [
                ": This method gives the exact value of all the roots directly in a finite number of steps."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "numbered_list",
          "version": 1
        }
      },
      "491e9516-9518-45ab-8adc-22ed03d84e58": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867796,
          "id": "491e9516-9518-45ab-8adc-22ed03d84e58",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867796,
          "parent_id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Indirect or Iterative Method", [["b"]]],
              [
                ": Iterative methods are best suited for computer programs to solve an equation. It is based on the concept of successive approximation. In Iterative Method there are two ways to solve an equation-"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "numbered_list",
          "version": 5
        }
      },
      "66eb611b-33d4-4cff-8f2a-dedc32e4e221": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "aac01506-a97d-4990-9937-e681faf7e640",
            "2d9ac90f-8021-46a3-abb8-23fc5e255409",
            "491e9516-9518-45ab-8adc-22ed03d84e58",
            "0482f9fc-bfcd-4f18-82cb-4ce0bfc70034",
            "ed447471-9e77-4f0a-9cbc-a084b843e003",
            "7b7c3589-b4dd-4198-b8f7-f179143f12cd",
            "8846724f-abaf-46a8-a293-fb390da7f3e1"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867797,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867797,
          "parent_id": "2734ccd8-075a-412f-8976-e67dfd9416da",
          "parent_table": "block",
          "properties": {
            "title": [["Non-Linear Equation"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      },
      "7b7c3589-b4dd-4198-b8f7-f179143f12cd": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867797,
          "id": "7b7c3589-b4dd-4198-b8f7-f179143f12cd",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867797,
          "parent_id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "parent_table": "block",
          "properties": {
            "title": [["Implementation in C-"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "8846724f-abaf-46a8-a293-fb390da7f3e1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867797,
          "id": "8846724f-abaf-46a8-a293-fb390da7f3e1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867797,
          "parent_id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "/// Here define different functions to work with\n#define f(x) ( ((x)*(x)*(x)) - (x) - 2 )\n#define f2(x) ( (3*(x)*(x)) - 1 )\n#define g(x) ( cbrt( (x) + 2 ) )\n\n\n/**\n* Takes two initial values and shortens the distance by both side.\n**/\ndouble BisectionMethod(){\n    double root=0;\n\n    double a=1, b=2;\n    double c=0;\n\n    int loopCounter=0;\n    if(f(a)*f(b) < 0){\n        while(1){\n            loopCounter++;\n            c=(a+b)/2;\n\n            if(f(c)<0.00001 && f(c)>-0.00001){\n                root=c;\n                break;\n            }\n\n            if((f(a))*(f(c)) < 0){\n                b=c;\n            }else{\n                a=c;\n            }\n\n        }\n    }\n    printf(\"It took %d loops.\\n\", loopCounter);\n\n    return root;\n}\n\n/**\n* Takes two initial values and shortens the distance by single side.\n**/\ndouble FalsePosition(){\n    double root=0;\n\n    double a=1, b=2;\n    double c=0;\n\n    int loopCounter=0;\n    if(f(a)*f(b) < 0){\n        while(1){\n            loopCounter++;\n\n            c=(a*f(b) - b*f(a)) / (f(b) - f(a));\n\n            /*/printf(\"%lf\\t %lf \\n\", c, f(c));/**////test\n            if(f(c)<0.00001 && f(c)>-0.00001){\n                root=c;\n                break;\n            }\n\n            if((f(a))*(f(c)) < 0){\n                b=c;\n            }else{\n                a=c;\n            }\n        }\n    }\n    printf(\"It took %d loops.\\n\", loopCounter);\n\n    return root;\n}\n\n/**\n* Uses one initial value and gradually takes that value near to the real one.\n**/\ndouble NewtonRaphson(){\n    double root=0;\n\n    double x1=1;\n    double x2=0;\n\n    int loopCounter=0;\n    while(1){\n        loopCounter++;\n\n        x2 = x1 - (f(x1)/f2(x1));\n        /*/printf(\"%lf \\t %lf \\n\", x2, f(x2));/**////test\n\n        if(f(x2)<0.00001 && f(x2)>-0.00001){\n            root=x2;\n            break;\n        }\n\n        x1=x2;\n    }\n    printf(\"It took %d loops.\\n\", loopCounter);\n\n    return root;\n}\n\n/**\n* Uses one initial value and gradually takes that value near to the real one.\n**/\ndouble FixedPoint(){\n    double root=0;\n    double x=1;\n\n    int loopCounter=0;\n    while(1){\n        loopCounter++;\n\n        if( (x-g(x)) <0.00001 && (x-g(x)) >-0.00001){\n            root = x;\n            break;\n        }\n\n        /*/printf(\"%lf \\t %lf \\n\", g(x), x-(g(x)));/**////test\n\n        x=g(x);\n    }\n    printf(\"It took %d loops.\\n\", loopCounter);\n\n    return root;\n}\n\n/**\n* uses two initial values & both value approaches to the root.\n**/\ndouble Secant(){\n    double root=0;\n\n    double x0=1;\n    double x1=2;\n    double x2=0;\n\n    int loopCounter=0;\n    while(1){\n        loopCounter++;\n\n        /*/printf(\"%lf \\t %lf \\t %lf \\n\", x0, x1, f(x1));/**////test\n\n        if(f(x1)<0.00001 && f(x1)>-0.00001){\n            root=x1;\n            break;\n        }\n\n        x2 = ((x0*f(x1))-(x1*f(x0))) / (f(x1)-f(x0));\n\n        x0=x1;\n        x1=x2;\n    }\n    printf(\"It took %d loops.\\n\", loopCounter);\n\n    return root;\n}\n\n\nint main(){\n    double root;\n\n    root = BisectionMethod();\n    printf(\"Using Bisection Method the root is: %lf \\n\\n\", root);\n    \n    root = FalsePosition();\n    printf(\"Using False Position Method the root is: %lf \\n\\n\", root);\n    \n    root = NewtonRaphson();\n    printf(\"Using Newton-Raphson Method the root is: %lf \\n\\n\", root);\n    \n    root = FixedPoint();\n    printf(\"Using Fixed Point Method the root is: %lf \\n\\n\", root);\n    \n    root = Secant();\n    printf(\"Using Secant Method the root is: %lf \\n\\n\", root);\n\n    return 0;\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "aac01506-a97d-4990-9937-e681faf7e640": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867795,
          "id": "aac01506-a97d-4990-9937-e681faf7e640",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867795,
          "parent_id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "parent_table": "block",
          "properties": {
            "title": [
              ["An equation of the type "],
              ["f(x)=0", [["c"]]],
              [
                " is either algebraic or transcendental. These types of equations can be solved by using two types of methods-"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "ed447471-9e77-4f0a-9cbc-a084b843e003": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551928867797,
          "id": "ed447471-9e77-4f0a-9cbc-a084b843e003",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551928867797,
          "parent_id": "66eb611b-33d4-4cff-8f2a-dedc32e4e221",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Open End Method", [["b"]]],
              [
                ": We take one or two initial values where the root may be any-where. Example- Newton-Raphson Method, Successive Approximation Method, Secant Method."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
