1463 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae"
      },
      "version": -1
    }
  ]
}
Response:+1211
{
  "recordMap": {
    "block": {
      "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": ["30f31a54-c28f-47bf-bdaa-50af35be09ba"],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551951076028,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551951076028,
          "parent_id": "778bc6b5-2d2f-430d-b96d-32a23351064e",
          "parent_table": "block",
          "properties": {
            "title": [["Creating an assembly dynamically"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      }
    }
  }
}
15305 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+15045
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "30f31a54-c28f-47bf-bdaa-50af35be09ba": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551951076028,
          "id": "30f31a54-c28f-47bf-bdaa-50af35be09ba",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551951076028,
          "parent_id": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "using System;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\nclass DemoAssemblyBuilder\n{\n    public static void Main()\n    {\n        // An assembly consists of one or more modules, each of which\n        // contains zero or more types. This code creates a single-module\n        // assembly, the most common case. The module contains one type,\n        // named \"MyDynamicType\", that has a private field, a property \n        // that gets and sets the private field, constructors that \n        // initialize the private field, and a method that multiplies \n        // a user-supplied number by the private field value and returns\n        // the result. In C# the type might look like this:\n        /*\n        public class MyDynamicType\n        {\n            private int m_number;\n\n            public MyDynamicType() : this(42) {}\n            public MyDynamicType(int initNumber)\n            {\n                m_number = initNumber;\n            }\n\n            public int Number\n            {\n                get { return m_number; }\n                set { m_number = value; }\n            }\n\n            public int MyMethod(int multiplier)\n            {\n                return m_number * multiplier;\n            }\n        }\n        */\n\n        AssemblyName aName = new AssemblyName(\"DynamicAssemblyExample\");\n        AssemblyBuilder ab =\n            AppDomain.CurrentDomain.DefineDynamicAssembly(\n                aName,\n                AssemblyBuilderAccess.RunAndSave);\n\n        // For a single-module assembly, the module name is usually\n        // the assembly name plus an extension.\n        ModuleBuilder mb =\n            ab.DefineDynamicModule(aName.Name, aName.Name + \".dll\");\n\n        TypeBuilder tb = mb.DefineType(\n            \"MyDynamicType\",\n             TypeAttributes.Public);\n\n        // Add a private field of type int (Int32).\n        FieldBuilder fbNumber = tb.DefineField(\n            \"m_number\",\n            typeof(int),\n            FieldAttributes.Private);\n\n        // Next, we make a simple sealed method.\n        MethodBuilder mbMyMethod = tb.DefineMethod(\n            \"MyMethod\",\n            MethodAttributes.Public,\n            typeof(int),\n            new[] { typeof(int) });\n\n        ILGenerator il = mbMyMethod.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this - always the first argument of any instance method\n        il.Emit(OpCodes.Ldfld, fbNumber);\n        il.Emit(OpCodes.Ldarg_1); // Load the integer argument\n        il.Emit(OpCodes.Mul); // Multiply the two numbers with no overflow checking\n        il.Emit(OpCodes.Ret); // Return\n\n        // Next, we build the property. This involves building the property itself, as well as the\n        // getter and setter methods.\n        PropertyBuilder pbNumber = tb.DefineProperty(\n            \"Number\", // Name\n            PropertyAttributes.None, \n            typeof(int), // Type of the property\n            new Type[0]); // Types of indices, if any\n\n        MethodBuilder mbSetNumber = tb.DefineMethod(\n            \"set_Number\", // Name - setters are set_Property by convention\n            // Setter is a special method and we don't want it to appear to callers from C#\n            MethodAttributes.PrivateScope | MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.SpecialName,\n            typeof(void), // Setters don't return a value\n            new[] { typeof(int) }); // We have a single argument of type System.Int32\n\n        // To generate the body of the method, we'll need an IL generator\n        il = mbSetNumber.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this\n        il.Emit(OpCodes.Ldarg_1); // Load the new value\n        il.Emit(OpCodes.Stfld, fbNumber); // Save the new value to this.m_number\n        il.Emit(OpCodes.Ret); // Return\n\n        // Finally, link the method to the setter of our property\n        pbNumber.SetSetMethod(mbSetNumber);\n\n        MethodBuilder mbGetNumber = tb.DefineMethod(\n            \"get_Number\",\n            MethodAttributes.PrivateScope | MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.SpecialName,\n            typeof(int),\n            new Type[0]);\n\n        il = mbGetNumber.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // Load this\n        il.Emit(OpCodes.Ldfld, fbNumber); // Load the value of this.m_number\n        il.Emit(OpCodes.Ret); // Return the value\n\n        pbNumber.SetGetMethod(mbGetNumber);\n        \n        // Finally, we add the two constructors.\n        // Constructor needs to call the constructor of the parent class, or another constructor in the same class\n        ConstructorBuilder intConstructor = tb.DefineConstructor(\n            MethodAttributes.Public, CallingConventions.Standard | CallingConventions.HasThis, new[] { typeof(int) });\n        il = intConstructor.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Call, typeof(object).GetConstructor(new Type[0])); // call parent's constructor\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Ldarg_1); // our int argument\n        il.Emit(OpCodes.Stfld, fbNumber); // store argument in this.m_number\n        il.Emit(OpCodes.Ret);\n\n        var parameterlessConstructor = tb.DefineConstructor(\n            MethodAttributes.Public, CallingConventions.Standard | CallingConventions.HasThis, new Type[0]);\n        il = parameterlessConstructor.GetILGenerator();\n        il.Emit(OpCodes.Ldarg_0); // this\n        il.Emit(OpCodes.Ldc_I4_S, (byte)42); // load 42 as an integer constant\n        il.Emit(OpCodes.Call, intConstructor); // call this(42)\n        il.Emit(OpCodes.Ret);\n\n        // And make sure the type is created\n        Type ourType = tb.CreateType();\n\n        // The types from the assembly can be used directly using reflection, or we can save the assembly to use as a reference\n        object ourInstance = Activator.CreateInstance(ourType);\n        Console.WriteLine(ourType.GetProperty(\"Number\").GetValue(ourInstance)); // 42\n        \n        // Save the assembly for use elsewhere. This is very useful for debugging - you can use e.g. ILSpy to look at the equivalent IL/C# code.\n        ab.Save(@\"DynamicAssemblyExample.dll\");\n        // Using newly created type\n        var myDynamicType = tb.CreateType();\n        var myDynamicTypeInstance = Activator.CreateInstance(myDynamicType);\n\n        Console.WriteLine(myDynamicTypeInstance.GetType()); // MyDynamicType\n\n        var numberField = myDynamicType.GetField(\"m_number\", BindingFlags.NonPublic | BindingFlags.Instance);\n        numberField.SetValue (myDynamicTypeInstance, 10);\n\n        Console.WriteLine(numberField.GetValue(myDynamicTypeInstance)); // 10\n    }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "6289ba46-1087-4393-844d-fbae890ed035": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "cd51d40e-65dc-4d5e-aa99-a0833901d0b8",
            "820442f1-7223-423c-a49f-93fa52cf3ad7",
            "fa73b3d0-22d6-4a51-bebb-42841b7f95a4",
            "f325a25a-1498-455e-9dd1-d3833aa957f9",
            "2a28de72-302f-4f78-8304-6adcd7189a32",
            "fb28bc7f-e61f-4ac8-b19d-4670cd051e98",
            "921d5395-549c-407d-afd3-31f23e97aca9",
            "5019b4e4-cd69-44b7-a825-05bcb1274fb1",
            "9a394e05-1934-48fd-ae9f-33da92c04fbe",
            "4bda71fd-ad0d-41b6-90bd-b47b4f14bed7",
            "e22cb3bc-f3f4-4401-9c36-3c8a0904b3ad",
            "05995655-4ee0-4127-b3a5-80bfa8b84e47",
            "c118455e-068e-4dd3-9b14-ac47a50a2b0e",
            "8fb3262d-e5fa-4d3b-86ba-dae1d9f482b0",
            "0ccb57df-12d4-4086-b00e-2e437157652b",
            "2d62c5ec-1c77-4b11-9525-fc3101ad48c9",
            "14c88a94-7b13-45dc-9cf2-d5a6b03bcf14",
            "15fdca89-9d94-44a3-9f0a-3306d537fbd4",
            "f6facffd-3c1a-4d75-8afe-ca083f1c320b",
            "778bc6b5-2d2f-430d-b96d-32a23351064e",
            "36ec1eee-8fca-49be-9ec2-4afd299cc91e",
            "b7cfb8cb-4348-49e4-a04a-0ba6eacab118",
            "b3f43cee-5486-4d44-aa91-ecaaf72cc072",
            "820bac49-e379-434f-9170-6f6bd2664ac2",
            "babb556e-2d0b-4223-9e90-ef7f40ca7705",
            "4d4ce762-93e1-476b-ad26-3eca55fc31ca",
            "5571106d-d8ec-4a50-a8fd-711dda8e0a69",
            "3cda890b-b69d-472d-a191-dcfd3616e832",
            "10e9af4b-fd8b-4668-bcc1-8a1d2ce2433e",
            "31abdfd9-50d6-441e-a8cb-dc351ce38467",
            "9d9ea739-686f-4cf6-adfe-fffb126a440e",
            "18dcfe20-840e-4ca3-b30d-2265cd6f3453",
            "979090b0-0d04-478a-ad39-b7311edd9afb",
            "e9a0f790-30d1-483b-9212-2fd37ce5f54c",
            "b4b4834d-3ff1-40e2-9a90-ddac3a7f4364",
            "13fcd1ea-9ee9-4041-b996-ee82c3fe1e11",
            "1ebd2121-41bd-4f8b-b684-d47f74390f12",
            "392fa5c4-47d6-4cff-9709-e8d068082cc4",
            "17dfbeab-e6d9-4fe9-8b76-cf3666038aec",
            "79ddd6cb-0e0a-4556-95fd-c28289626981",
            "13cc7af0-77b1-4d34-91b3-fbb702596d72",
            "6f3b2b42-b01e-4ced-a29a-8cc1049169f6",
            "44d59605-d50a-42aa-ab91-c7977fd8a8b4",
            "4541582a-f233-40f5-8dc4-eb0d6c1eb10e",
            "f8ca8ac1-616e-4527-8aec-e0317d92b890",
            "fe958aa5-191d-44da-9d98-41ba1dde934f",
            "729ad137-501c-428a-a684-1cab5be722ce",
            "b7cd86c1-4d1b-4e0a-8478-90678a901422",
            "d7a3662e-5f0a-4776-aabd-4c48cbde30a5",
            "0271bfe7-c37a-4696-a45b-c1e49994cf18",
            "c8781654-f141-49b3-940c-e450c22a3af7",
            "89ba4d3d-6adb-4865-81cb-543bb0cf3f66",
            "fc35a31f-b4a1-4387-bb6b-e20e80d8c4c4",
            "3d72526c-fdd6-4572-8bbd-50165f36a8da",
            "42e32498-54de-43f9-9f2f-92fd72b66fd4",
            "4cd15e8e-d40c-4679-9ced-0cfcb5a44695",
            "7a6daccd-4284-4458-a422-3162f3088238",
            "4d6337c3-ed63-4dd7-8571-3c5ded909939",
            "524d9bfb-5233-4062-84c4-edd378f0520f",
            "84b65762-d213-4fb9-9125-90a5928c1c07",
            "aa68115c-9ad6-4924-adf5-9ec4480b7d6b"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551950512759,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "6289ba46-1087-4393-844d-fbae890ed035",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571297640000,
          "parent_id": "4e05c642-cb8f-4d3f-85ed-e69c06982060",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential .NET framework"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 119
        }
      },
      "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": ["30f31a54-c28f-47bf-bdaa-50af35be09ba"],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551951076028,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551951076028,
          "parent_id": "778bc6b5-2d2f-430d-b96d-32a23351064e",
          "parent_table": "block",
          "properties": {
            "title": [["Creating an assembly dynamically"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 3
        }
      },
      "778bc6b5-2d2f-430d-b96d-32a23351064e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "4b3c765f-148c-4718-884f-273d4ad3a773",
            "6bca9dc0-02f5-4fff-bb9d-55dd48f098ae"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551951060000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "778bc6b5-2d2f-430d-b96d-32a23351064e",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551951420000,
          "parent_id": "6289ba46-1087-4393-844d-fbae890ed035",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["System.Reflection.Emit"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 34
        }
      }
    },
    "space": {}
  }
}
