2101 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "dd1ae54d-e995-4540-acd7-c449f020f817"
      },
      "version": -1
    }
  ]
}
Response:+1849
{
  "recordMap": {
    "block": {
      "dd1ae54d-e995-4540-acd7-c449f020f817": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "72038a80-5352-4d5c-9b68-698d033576a0",
            "1f3da12e-b2a1-4f90-a944-6e92724ad8ef",
            "bd45842c-c092-4cb2-add5-ac018df6cce2",
            "f26a0ebc-534c-4521-bb72-1dfe640fb3af",
            "81789f7a-12db-4cd0-b774-51517a766270",
            "65ee84e2-52ea-45cb-b9f1-a44a84b4539b",
            "00ed1acc-0bc5-4b41-aa43-c26c03bcc92d",
            "bdef189f-16eb-4afa-b58f-2a9b414a9969",
            "45a32cec-f24f-4017-bd7e-60e228ee9f7c",
            "82795156-ea7a-4731-aefa-7b0f9b18205c",
            "aac7441b-2c1e-481f-9ff9-454896fc4af9"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663355,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550213460000,
          "parent_id": "f0c07076-1721-4628-bc3b-9d40618aeb3a",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Modern Examples of Symmetric Authenticated Encryption of a string"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 13
        }
      }
    }
  }
}
53528 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "dd1ae54d-e995-4540-acd7-c449f020f817"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+53268
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "00ed1acc-0bc5-4b41-aa43-c26c03bcc92d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663354,
          "id": "00ed1acc-0bc5-4b41-aa43-c26c03bcc92d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663354,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              [".NET Built-in Encrypt(AES)-Then-MAC(HMAC) ", [["b"]]],
              [
                "[Gist]",
                [
                  ["b"],
                  [
                    "a",
                    "https://gist.github.com/jbtule/4336842#file-aesthenhmac-cs"
                  ]
                ]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "1f3da12e-b2a1-4f90-a944-6e92724ad8ef": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663352,
          "id": "1f3da12e-b2a1-4f90-a944-6e92724ad8ef",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663352,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "“The general best practice for symmetric encryption is to use Authenticated Encryption with Associated Data (AEAD), however this isn’t a part of the standard .net crypto libraries. So the first example uses "
              ],
              [
                "AES256",
                [
                  [
                    "a",
                    "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"
                  ]
                ]
              ],
              [" and then "],
              ["HMAC256", [["a", "http://en.wikipedia.org/wiki/HMAC"]]],
              [", a two step "],
              [
                "Encrypt then MAC",
                [["a", "http://crypto.stackexchange.com/a/205/1934"]]
              ],
              [", which requires more overhead and more keys."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "45a32cec-f24f-4017-bd7e-60e228ee9f7c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663355,
          "id": "45a32cec-f24f-4017-bd7e-60e228ee9f7c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663355,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Bouncy Castle AES-GCM ", [["b"]]],
              [
                "[Gist]",
                [
                  ["b"],
                  ["a", "https://gist.github.com/jbtule/4336842#file-aesgcm-cs"]
                ]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "65ee84e2-52ea-45cb-b9f1-a44a84b4539b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663353,
          "id": "65ee84e2-52ea-45cb-b9f1-a44a84b4539b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663353,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Update:", [["b"]]],
              [" Added "],
              ["byte[]", [["c"]]],
              [" overloads, and only the "],
              ["Gist", [["a", "https://gist.github.com/4336842"]]],
              [
                " has the full formatting with 4 spaces indent and api docs due to StackOverflow answer limits.”"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "72038a80-5352-4d5c-9b68-698d033576a0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663347,
          "id": "72038a80-5352-4d5c-9b68-698d033576a0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663347,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Cryptography is something very hard and after spending a lot of time reading different examples and seeing how easy it is to introduce some form of vulnerability I found an answer originally written by @jbtule that I think is very good. Enjoy reading:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "81789f7a-12db-4cd0-b774-51517a766270": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663353,
          "id": "81789f7a-12db-4cd0-b774-51517a766270",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663353,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Both examples also have a helper methods that use a string password to generate the keys. These helper methods are provided as a convenience to match up with other examples, however they are "
              ],
              ["far less secure", [["i"]]],
              [" because the strength of the password is going to be "],
              ["far weaker than a 256 bit key", [["i"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "82795156-ea7a-4731-aefa-7b0f9b18205c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663355,
          "id": "82795156-ea7a-4731-aefa-7b0f9b18205c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550213460000,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "language": [["C#"]],
            "title": [
              [
                "/*\n * This work (Modern Encryption of a String C#, by James Tuley), \n * identified by James Tuley, is free of known copyright restrictions.\n * https://gist.github.com/4336842\n * http://creativecommons.org/publicdomain/mark/1.0/ \n */\n\nusing System;\nusing System.IO;\nusing System.Text;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Engines;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Modes;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Security;\nnamespace Encryption\n{\n\n  public static class AESGCM\n  {\n    private static readonly SecureRandom Random = new SecureRandom();\n\n    //Preconfigured Encryption Parameters\n    public static readonly int NonceBitSize = 128;\n    public static readonly int MacBitSize = 128;\n    public static readonly int KeyBitSize = 256;\n\n    //Preconfigured Password Key Derivation Parameters\n    public static readonly int SaltBitSize = 128;\n    public static readonly int Iterations = 10000;\n    public static readonly int MinPasswordLength = 12;\n\n\n    /// <summary>\n    /// Helper that generates a random new key on each call.\n    /// </summary>\n    /// <returns></returns>\n    public static byte[] NewKey()\n    {\n      var key = new byte[KeyBitSize / 8];\n      Random.NextBytes(key);\n      return key;\n    }\n\n    /// <summary>\n    /// Simple Encryption And Authentication (AES-GCM) of a UTF8 string.\n    /// </summary>\n    /// <param name=\"secretMessage\">The secret message.</param>\n    /// <param name=\"key\">The key.</param>\n    /// <param name=\"nonSecretPayload\">Optional non-secret payload.</param>\n    /// <returns>\n    /// Encrypted Message\n    /// </returns>\n    /// <exception cref=\"System.ArgumentException\">Secret Message Required!;secretMessage</exception>\n    /// <remarks>\n    /// Adds overhead of (Optional-Payload + BlockSize(16) + Message +  HMac-Tag(16)) * 1.33 Base64\n    /// </remarks>\n    public static string SimpleEncrypt(string secretMessage, byte[] key, byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncrypt(plainText, key, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n\n    /// <summary>\n    /// Simple Decryption & Authentication (AES-GCM) of a UTF8 Message\n    /// </summary>\n    /// <param name=\"encryptedMessage\">The encrypted message.</param>\n    /// <param name=\"key\">The key.</param>\n    /// <param name=\"nonSecretPayloadLength\">Length of the optional non-secret payload.</param>\n    /// <returns>Decrypted Message</returns>\n    public static string SimpleDecrypt(string encryptedMessage, byte[] key, int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrEmpty(encryptedMessage))\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecrypt(cipherText, key, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    /// <summary>\n    /// Simple Encryption And Authentication (AES-GCM) of a UTF8 String\n    /// using key derived from a password (PBKDF2).\n    /// </summary>\n    /// <param name=\"secretMessage\">The secret message.</param>\n    /// <param name=\"password\">The password.</param>\n    /// <param name=\"nonSecretPayload\">The non secret payload.</param>\n    /// <returns>\n    /// Encrypted Message\n    /// </returns>\n    /// <remarks>\n    /// Significantly less secure than using random binary keys.\n    /// Adds additional non secret payload for key generation parameters.\n    /// </remarks>\n    public static string SimpleEncryptWithPassword(string secretMessage, string password,\n                             byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncryptWithPassword(plainText, password, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n\n    /// <summary>\n    /// Simple Decryption and Authentication (AES-GCM) of a UTF8 message\n    /// using a key derived from a password (PBKDF2)\n    /// </summary>\n    /// <param name=\"encryptedMessage\">The encrypted message.</param>\n    /// <param name=\"password\">The password.</param>\n    /// <param name=\"nonSecretPayloadLength\">Length of the non secret payload.</param>\n    /// <returns>\n    /// Decrypted Message\n    /// </returns>\n    /// <exception cref=\"System.ArgumentException\">Encrypted Message Required!;encryptedMessage</exception>\n    /// <remarks>\n    /// Significantly less secure than using random binary keys.\n    /// </remarks>\n    public static string SimpleDecryptWithPassword(string encryptedMessage, string password,\n                             int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrWhiteSpace(encryptedMessage))\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecryptWithPassword(cipherText, password, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    public static byte[] SimpleEncrypt(byte[] secretMessage, byte[] key, byte[] nonSecretPayload = null)\n    {\n      //User Error Checks\n      if (key == null || key.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\"Key needs to be {0} bit!\", KeyBitSize), \"key\");\n\n      if (secretMessage == null || secretMessage.Length == 0)\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      //Non-secret Payload Optional\n      nonSecretPayload = nonSecretPayload ?? new byte[] { };\n\n      //Using random nonce large enough not to repeat\n      var nonce = new byte[NonceBitSize / 8];\n      Random.NextBytes(nonce, 0, nonce.Length);\n\n      var cipher = new GcmBlockCipher(new AesFastEngine());\n      var parameters = new AeadParameters(new KeyParameter(key), MacBitSize, nonce, nonSecretPayload);\n      cipher.Init(true, parameters);\n\n      //Generate Cipher Text With Auth Tag\n      var cipherText = new byte[cipher.GetOutputSize(secretMessage.Length)];\n      var len = cipher.ProcessBytes(secretMessage, 0, secretMessage.Length, cipherText, 0);\n      cipher.DoFinal(cipherText, len);\n\n      //Assemble Message\n      using (var combinedStream = new MemoryStream())\n      {\n        using (var binaryWriter = new BinaryWriter(combinedStream))\n        {\n          //Prepend Authenticated Payload\n          binaryWriter.Write(nonSecretPayload);\n          //Prepend Nonce\n          binaryWriter.Write(nonce);\n          //Write Cipher Text\n          binaryWriter.Write(cipherText);\n        }\n        return combinedStream.ToArray();\n      }\n    }\n\n    public static byte[] SimpleDecrypt(byte[] encryptedMessage, byte[] key, int nonSecretPayloadLength = 0)\n    {\n      //User Error Checks\n      if (key == null || key.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\"Key needs to be {0} bit!\", KeyBitSize), \"key\");\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      using (var cipherStream = new MemoryStream(encryptedMessage))\n      using (var cipherReader = new BinaryReader(cipherStream))\n      {\n        //Grab Payload\n        var nonSecretPayload = cipherReader.ReadBytes(nonSecretPayloadLength);\n\n        //Grab Nonce\n        var nonce = cipherReader.ReadBytes(NonceBitSize / 8);\n       \n        var cipher = new GcmBlockCipher(new AesFastEngine());\n        var parameters = new AeadParameters(new KeyParameter(key), MacBitSize, nonce, nonSecretPayload);\n        cipher.Init(false, parameters);\n\n        //Decrypt Cipher Text\n        var cipherText = cipherReader.ReadBytes(encryptedMessage.Length - nonSecretPayloadLength - nonce.Length);\n        var plainText = new byte[cipher.GetOutputSize(cipherText.Length)];  \n\n        try\n        {\n          var len = cipher.ProcessBytes(cipherText, 0, cipherText.Length, plainText, 0);\n          cipher.DoFinal(plainText, len);\n\n        }\n        catch (InvalidCipherTextException)\n        {\n          //Return null if it doesn't authenticate\n          return null;\n        }\n\n        return plainText;\n      }\n\n    }\n\n    public static byte[] SimpleEncryptWithPassword(byte[] secretMessage, string password, byte[] nonSecretPayload = null)\n    {\n      nonSecretPayload = nonSecretPayload ?? new byte[] {};\n\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length < MinPasswordLength)\n        throw new ArgumentException(String.Format(\"Must have a password of at least {0} characters!\", MinPasswordLength), \"password\");\n\n      if (secretMessage == null || secretMessage.Length == 0)\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      var generator = new Pkcs5S2ParametersGenerator();\n\n      //Use Random Salt to minimize pre-generated weak password attacks.\n      var salt = new byte[SaltBitSize / 8];\n      Random.NextBytes(salt);\n\n      generator.Init(\n        PbeParametersGenerator.Pkcs5PasswordToBytes(password.ToCharArray()),\n        salt,\n        Iterations);\n\n      //Generate Key\n      var key = (KeyParameter)generator.GenerateDerivedMacParameters(KeyBitSize);\n\n      //Create Full Non Secret Payload\n      var payload = new byte[salt.Length + nonSecretPayload.Length];\n      Array.Copy(nonSecretPayload, payload, nonSecretPayload.Length);\n      Array.Copy(salt,0, payload,nonSecretPayload.Length, salt.Length);\n\n      return SimpleEncrypt(secretMessage, key.GetKey(), payload);\n    }\n\n    public static byte[] SimpleDecryptWithPassword(byte[] encryptedMessage, string password, int nonSecretPayloadLength = 0)\n    {\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length < MinPasswordLength)\n        throw new ArgumentException(String.Format(\"Must have a password of at least {0} characters!\", MinPasswordLength), \"password\");\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      var generator = new Pkcs5S2ParametersGenerator();\n\n      //Grab Salt from Payload\n      var salt = new byte[SaltBitSize / 8];\n      Array.Copy(encryptedMessage, nonSecretPayloadLength, salt, 0, salt.Length);\n\n      generator.Init(\n        PbeParametersGenerator.Pkcs5PasswordToBytes(password.ToCharArray()),\n        salt,\n        Iterations);\n\n      //Generate Key\n      var key = (KeyParameter)generator.GenerateDerivedMacParameters(KeyBitSize);\n\n      return SimpleDecrypt(encryptedMessage, key.GetKey(), salt.Length + nonSecretPayloadLength);\n    }\n  }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 7
        }
      },
      "896da524-8e65-414a-b645-dd45985879a1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "c9eef58f-b271-4d1f-baa9-4b2ea80dca74",
            "23be22b1-5474-41ec-a632-151816dbe705",
            "f185d627-93ed-4197-8bae-c35411c58fa9",
            "a2c8e315-27b7-4507-8e1d-b5dfbf8fb3bb",
            "3ceafdbd-d2b2-4926-829d-3293ff96d517",
            "9340bd1d-9542-456c-9914-451d6bc67b1d",
            "b47f62ad-e183-43f6-a9e5-ae42ff99c873",
            "9186cecd-4940-4c8f-9e57-5c38acacd478",
            "9f194719-a523-4701-9efa-3d92bbf287bb",
            "e5223a28-757e-445d-bcb0-1c6310b74dcc",
            "88c86302-2982-4e71-8e49-bcc2f620df46",
            "fcad10e9-6cd3-4947-9888-c2e41201d14c",
            "bbf2b517-78f5-4244-a813-ef8aba27178d",
            "3d6b04ed-c0e5-4df2-a3d4-e081b7e43ffc",
            "16412594-14f5-476f-8c9d-0dc602ef6455",
            "ffc1bca0-1d01-4cc6-89ec-8e262bdee1fa",
            "c17a6689-2ba5-4524-a208-2ff576440e7b",
            "f7323eb9-2a0a-454c-b65e-c2463a0c1131",
            "15c7c6c1-34d3-4692-bbfc-311e63288f8d",
            "0393cbbb-eb0f-4444-96fc-721fdf656e0e",
            "ed257a1c-7fef-4ef1-932e-17d4249aec91",
            "852bbb3c-ca26-4ee2-ae32-0e5376b5a38e",
            "6371e398-7265-4722-b1ff-e3d2edb32f87",
            "1aa1092a-697c-4259-9cf4-d1239929e65f",
            "5b33fbc2-5d1d-4221-bb6d-edb5e72cddcc",
            "688eb073-0d32-469a-be6a-0186e98bdcbb",
            "5ad3cee1-e703-4a45-b764-d9e5a7b8135d",
            "ee6d0f15-065b-41fb-9f15-80d572e16745",
            "e942e648-f87d-4b60-8e8c-527acf37bbf3",
            "1849bb94-4aca-44bb-88ed-f6f0bebf0729",
            "b11e628d-9a49-4dab-ba8d-ad0de127ca4a",
            "64174614-8fb1-4307-be43-d21bfeaaedcd",
            "4cb38761-099f-42ea-8e7e-2f16a3497c43",
            "0d2d1c23-f88d-4ce6-b2d1-22576a6ede45",
            "e99b1414-411b-440a-a7eb-eb6a3731ac76",
            "0af9a402-62eb-45ce-a3b7-490d49d5042b",
            "eee4787e-f48e-4f42-9f08-9a1d031866f9",
            "73b5ab63-2700-4b45-89fb-fa4c13a44d84",
            "28ea2117-40fd-45d0-994d-634e6ddcd552",
            "b2f3f69c-5305-4516-aec6-e64d25d1ae4b",
            "50abd569-e57b-4eda-b70d-af5f13922aee",
            "33fe0483-3ff7-4d75-885b-f79c4c3e72f3",
            "9b304904-2267-43ba-a97e-7fc56fa64c3c",
            "3bfa5008-c262-4959-8331-361cc5d24a98",
            "9d39eeb7-5ffe-4396-b61b-ad7f2208347d",
            "7255818d-9242-444e-91a2-18d044e440e3",
            "f800e038-5163-4461-bc72-3fe658228e37",
            "190506d8-ff9f-4443-bbce-bdb69e483555",
            "d9eacdcd-1428-4d64-9ecf-6fb1f736369a",
            "47ad1a51-3eda-49fc-80a9-3126f6b9a7ed",
            "afa171fd-7878-4468-8315-1e19990ae73e",
            "1cef0e56-e2c1-46b9-9c66-002b53d2c779",
            "d9271590-2337-439e-879c-bf354e4c10f2",
            "d6ab87f3-3105-4532-8f9a-1b47bf70d308",
            "1e08240f-16f7-4286-8383-a3209423e8ab",
            "973a1da3-3268-4f66-8f48-fe26a70546fd",
            "a2738b85-a333-4c8e-b9e1-d5d7d234c5ef",
            "3367ad51-2d2f-44db-b5a0-5d201dfd7ee1",
            "6bc8984c-0999-42e1-a500-ace83190c171",
            "625ceab9-a31c-417d-842a-19793514588c",
            "506db71d-62a7-401d-83cd-dac9849262bf",
            "7c9f5ce4-12a1-4115-98ff-cdbe26ce2b63",
            "e46b0a90-d1e1-4de7-8d79-875641b9f824",
            "54ac827d-7a9c-4c85-abcb-e35c35d37cbb",
            "b8c4f146-d2bd-4cc4-b711-718656fb4f9d",
            "a34c1078-f01c-44b1-b468-522f804fbc2d",
            "e6d77161-bd05-4c91-98d3-24a534a07128",
            "e168ad75-789a-40d2-8c2f-19275775205d",
            "34613783-b94f-49b9-af21-5aac4eb1cd51",
            "e0d3b1d4-2fb0-4306-948f-315c697d87eb",
            "6edb5732-40b8-4df6-b8a8-809fb1164d58",
            "307cbc92-1d45-43c5-9927-7963d630a818",
            "7f7fdd88-2767-47f0-97a2-2dab8a624086",
            "089ce30d-080a-4f0a-a239-88f82ba26f45",
            "109d67d8-65d2-4d87-87a6-f98363fd7e63",
            "9ff3cc78-9f6a-4238-a0a8-e9d9c0209cf7",
            "a271c1a0-eb57-4c4c-8b08-78ebd80e0e9b",
            "771a61e0-eafb-4e91-bf84-4f163eebea2a",
            "a61d6f9f-25b8-4af3-aed7-0b0c27298cc0",
            "83d3d473-5fe3-4a32-aee1-bebe02e662bc",
            "0f6a5396-e84b-478b-b5b4-0ebcef30fb97",
            "e8947075-3321-46e4-8c4b-dc806563e9d8",
            "5b454c10-001f-4644-b942-d18dfe4b6b1a",
            "effa6e37-4d40-4356-a2a6-e952c0f24681",
            "9002e16c-e08a-4150-b42d-7b660d66b027",
            "d2786b82-24ad-4c4e-b5a8-5ef23d9feee9",
            "f5bb18c2-bb24-4faf-8598-a275d629a821",
            "016c1ebf-1e5f-4b30-bd0a-f580a1131706",
            "02596620-bd43-43b9-90d4-6361c30f0061",
            "3579f09a-ed6b-403d-b38a-ab7fa93d0309",
            "fa946197-d3a2-4cf6-8c65-bc2d23788972",
            "be03c9f2-8302-42e6-ad3d-8cdfb9f30c01",
            "5dbcdbd6-ec08-4a24-ae30-e07ee6450163",
            "c316ef36-b1ff-4b82-8467-120c59f672b7",
            "02dfef6d-255e-47b0-92cc-27f66722fc33",
            "e6aa0aec-4ba5-4a47-985c-61bac82027f0",
            "815daf49-ac2a-4123-8b19-67aa9afb3da8",
            "50da552a-cf02-4fac-9112-0711e14976b0",
            "0772a9e8-ab55-46c8-8848-6042b5dca448",
            "06d591be-a80e-4cc5-8a23-88654f365aa8",
            "657b0c9d-9132-4296-a3f3-f027f19fcd31",
            "0ebc48e4-d29a-48aa-a3c6-e9a3ae1730a8",
            "e5e846e8-325c-4436-adf5-67186f1e4a66",
            "fd0a8dae-9fe1-4201-a7da-b3212aa9a3cc",
            "e1164248-76e7-4fcf-b50a-c159629a4541",
            "e8462373-152b-42da-a75e-7bbc13ef80b7",
            "49bb0bf4-2ae9-42f3-aedf-68172eed3b03",
            "b2907d46-ed71-4644-9cba-cc9d8a7dea79",
            "506260e6-d35c-4ba4-aa08-5afb213c7141",
            "76cdcca0-d816-4c69-ba87-fa59baf184ce",
            "b622c643-74b6-4b71-b9ab-d7e2ad0f6cf8",
            "a964cf57-e34d-4187-8ee6-702107f7825a",
            "690c8bdb-4161-40ee-ae39-db6ce423d3b9",
            "bb2a9e83-3d07-454f-b663-d217cc7d9031",
            "114a10c9-a82c-42cd-b7ee-4162153e47b0",
            "1298a931-d39e-4065-9767-f9bdea87d202",
            "97d7d0bc-7873-4d24-b89e-70a0d8483664",
            "91106db6-78bc-4ff0-875f-edacdc1e0312",
            "c773038a-67ca-41d2-8a80-636f6fb881dc",
            "06a46918-892a-4c7f-9b78-e8c23e0b6d32",
            "867a03bf-215a-491d-9311-455a673a589d",
            "33a94c41-382b-401a-bbcf-bc110c3bf33f",
            "aa76783d-6bea-4a2c-8f21-8d273ea59cc2",
            "4c823a82-ab7b-4adb-860d-34d98bf8e24d",
            "bb7e447e-cd39-4a03-ab39-c38038d7d315",
            "01f594f2-2bf4-456c-bf45-1a8e1e61915e",
            "ca82249a-e8bd-4017-a1a3-da741fa4b29b",
            "806a55a2-705a-4e20-8cf3-d57b7529c80f",
            "c7cf0615-97f6-431f-a5a7-f68e19936273",
            "479ef512-433a-41a1-a129-35d704bc87b8",
            "f9f387a0-e501-477b-8289-ab0322a9ec6e",
            "9f28c871-5dbb-48d6-9c77-95dcaa586a2c",
            "2667525c-8119-4b5e-a244-20a7a57e4f8e",
            "a009735c-8be2-4499-92fb-e2cf4bcb684b",
            "d0852dd6-2ee4-4d9e-af08-4f050ff9f517",
            "e8cca409-3415-4f3b-be8c-c5aa728a3c86",
            "17ad5712-f0c3-4ba5-8da9-3bfb63ad5ed6",
            "ac7078c9-854c-43ff-b8cc-cf3728b81621",
            "88aef988-965a-4112-8cce-4b4d068e95b6",
            "c6f0aa86-fc3f-4827-8ce9-cc47279710b5",
            "7433cefb-5d9a-4d72-8021-8bff7fca5b91",
            "45b56bad-c631-449a-a2a7-063d3f6d06d9",
            "7ab4d6e5-5a1c-4950-82d0-073379ffb854",
            "7632739a-2856-46a9-8b2e-800148b5fcf4",
            "3573a802-9c1d-4300-9c93-c44164af7ffe",
            "851f4980-33fc-464c-a340-08f7d2a84c8b",
            "46b21f67-90ad-4062-ae40-11bae31d7172",
            "48f38500-51b7-464e-939c-27b266ccee8a",
            "725b2bde-ffc2-44a7-b59e-22caf9f1930b",
            "d480ab3a-070a-40fa-a2ae-cd3380cfcb59",
            "f0c07076-1721-4628-bc3b-9d40618aeb3a",
            "b10faa15-adc6-472f-918c-27474746f163",
            "67965e1c-96fd-4b27-a090-13babac29616",
            "3f7e16ef-defd-4be7-a374-84d13e263e48",
            "6f71675e-c169-4c8c-a5da-b3fc5acc48e7",
            "2b5c894c-d50a-418f-a811-3b61a23cdead",
            "3f90ad64-662d-4026-9438-8f1c858f7ce9",
            "a251e313-ae47-4531-b960-5000c0f61e47",
            "92da32ab-6379-4520-be7e-23294ce78936",
            "fe9a4141-3fa7-43c2-a163-9ecddef4c3d5",
            "3ec074a7-a4bd-4d05-b2ec-5cae4fc5bf80",
            "974bc5aa-ca3e-44ca-8599-9a6a1d1aca94",
            "ae23cb97-ee8a-4ca7-887f-57c7afb5dfd8",
            "6941c36f-f18a-4e89-ba06-2f33db9b1e58",
            "4e3eae94-4bd2-484f-aad4-4fb3d4c1abb5",
            "5f448947-1319-49bc-9871-d5f15bf2c9d6",
            "359ae01c-c652-419c-b1ad-fff733c41cc6",
            "ae1ae9a0-7bbb-46cb-9257-a632eea3fbb1",
            "3464e01c-2b75-4766-8f0c-d24fd936eb95"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1548228347359,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "896da524-8e65-414a-b645-dd45985879a1",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298420000,
          "parent_id": "edb76f9a-c99c-4827-b4b3-bd8bcb77cecb",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential C#"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 13325
        }
      },
      "aac7441b-2c1e-481f-9ff9-454896fc4af9": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550213460000,
          "id": "aac7441b-2c1e-481f-9ff9-454896fc4af9",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550213460000,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 3
        }
      },
      "bd45842c-c092-4cb2-add5-ac018df6cce2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663353,
          "id": "bd45842c-c092-4cb2-add5-ac018df6cce2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663353,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The second example uses the simpler practice of AES256-"],
              [
                "GCM",
                [["a", "http://en.wikipedia.org/wiki/Galois/Counter_Mode"]]
              ],
              [" using the open source Bouncy Castle (via nuget)."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "bdef189f-16eb-4afa-b58f-2a9b414a9969": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663354,
          "id": "bdef189f-16eb-4afa-b58f-2a9b414a9969",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550213460000,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "language": [["C#"]],
            "title": [
              [
                "/*\n * This work (Modern Encryption of a String C#, by James Tuley), \n * identified by James Tuley, is free of known copyright restrictions.\n * https://gist.github.com/4336842\n * http://creativecommons.org/publicdomain/mark/1.0/ \n */\n\nusing System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Encryption\n{\n  public static class AESThenHMAC\n  {\n    private static readonly RandomNumberGenerator Random = RandomNumberGenerator.Create();\n    \n    //Preconfigured Encryption Parameters\n    public static readonly int BlockBitSize = 128;\n    public static readonly int KeyBitSize = 256;\n\n    //Preconfigured Password Key Derivation Parameters\n    public static readonly int SaltBitSize = 64;\n    public static readonly int Iterations = 10000;\n    public static readonly int MinPasswordLength = 12;\n\n    /// <summary>\n    /// Helper that generates a random key on each call.\n    /// </summary>\n    /// <returns></returns>\n    public static byte[] NewKey()\n    {\n      var key = new byte[KeyBitSize / 8];\n      Random.GetBytes(key);\n      return key;\n    }\n\n    /// <summary>\n    /// Simple Encryption (AES) then Authentication (HMAC) for a UTF8 Message.\n    /// </summary>\n    /// <param name=\"secretMessage\">The secret message.</param>\n    /// <param name=\"cryptKey\">The crypt key.</param>\n    /// <param name=\"authKey\">The auth key.</param>\n    /// <param name=\"nonSecretPayload\">(Optional) Non-Secret Payload.</param>\n    /// <returns>\n    /// Encrypted Message\n    /// </returns>\n    /// <exception cref=\"System.ArgumentException\">Secret Message Required!;secretMessage</exception>\n    /// <remarks>\n    /// Adds overhead of (Optional-Payload + BlockSize(16) + Message-Padded-To-Blocksize +  HMac-Tag(32)) * 1.33 Base64\n    /// </remarks>\n    public static string SimpleEncrypt(string secretMessage, byte[] cryptKey, byte[] authKey,\n                       byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncrypt(plainText, cryptKey, authKey, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n    /// <summary>\n    /// Simple Authentication (HMAC) then Decryption (AES) for a secrets UTF8 Message.\n    /// </summary>\n    /// <param name=\"encryptedMessage\">The encrypted message.</param>\n    /// <param name=\"cryptKey\">The crypt key.</param>\n    /// <param name=\"authKey\">The auth key.</param>\n    /// <param name=\"nonSecretPayloadLength\">Length of the non secret payload.</param>\n    /// <returns>\n    /// Decrypted Message\n    /// </returns>\n    /// <exception cref=\"System.ArgumentException\">Encrypted Message Required!;encryptedMessage</exception>\n    public static string SimpleDecrypt(string encryptedMessage, byte[] cryptKey, byte[] authKey,\n                       int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrWhiteSpace(encryptedMessage))\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecrypt(cipherText, cryptKey, authKey, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    /// <summary>\n    /// Simple Encryption (AES) then Authentication (HMAC) of a UTF8 message\n    /// using Keys derived from a Password (PBKDF2).\n    /// </summary>\n    /// <param name=\"secretMessage\">The secret message.</param>\n    /// <param name=\"password\">The password.</param>\n    /// <param name=\"nonSecretPayload\">The non secret payload.</param>\n    /// <returns>\n    /// Encrypted Message\n    /// </returns>\n    /// <exception cref=\"System.ArgumentException\">password</exception>\n    /// <remarks>\n    /// Significantly less secure than using random binary keys.\n    /// Adds additional non secret payload for key generation parameters.\n    /// </remarks>\n    public static string SimpleEncryptWithPassword(string secretMessage, string password,\n                             byte[] nonSecretPayload = null)\n    {\n      if (string.IsNullOrEmpty(secretMessage))\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      var plainText = Encoding.UTF8.GetBytes(secretMessage);\n      var cipherText = SimpleEncryptWithPassword(plainText, password, nonSecretPayload);\n      return Convert.ToBase64String(cipherText);\n    }\n\n    /// <summary>\n    /// Simple Authentication (HMAC) and then Descryption (AES) of a UTF8 Message\n    /// using keys derived from a password (PBKDF2). \n    /// </summary>\n    /// <param name=\"encryptedMessage\">The encrypted message.</param>\n    /// <param name=\"password\">The password.</param>\n    /// <param name=\"nonSecretPayloadLength\">Length of the non secret payload.</param>\n    /// <returns>\n    /// Decrypted Message\n    /// </returns>\n    /// <exception cref=\"System.ArgumentException\">Encrypted Message Required!;encryptedMessage</exception>\n    /// <remarks>\n    /// Significantly less secure than using random binary keys.\n    /// </remarks>\n    public static string SimpleDecryptWithPassword(string encryptedMessage, string password,\n                             int nonSecretPayloadLength = 0)\n    {\n      if (string.IsNullOrWhiteSpace(encryptedMessage))\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      var cipherText = Convert.FromBase64String(encryptedMessage);\n      var plainText = SimpleDecryptWithPassword(cipherText, password, nonSecretPayloadLength);\n      return plainText == null ? null : Encoding.UTF8.GetString(plainText);\n    }\n\n    public static byte[] SimpleEncrypt(byte[] secretMessage, byte[] cryptKey, byte[] authKey, byte[] nonSecretPayload = null)\n    {\n      //User Error Checks\n      if (cryptKey == null || cryptKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\"Key needs to be {0} bit!\", KeyBitSize), \"cryptKey\");\n\n      if (authKey == null || authKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\"Key needs to be {0} bit!\", KeyBitSize), \"authKey\");\n\n      if (secretMessage == null || secretMessage.Length < 1)\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      //non-secret payload optional\n      nonSecretPayload = nonSecretPayload ?? new byte[] { };\n\n      byte[] cipherText;\n      byte[] iv;\n\n      using (var aes = new AesManaged\n      {\n        KeySize = KeyBitSize,\n        BlockSize = BlockBitSize,\n        Mode = CipherMode.CBC,\n        Padding = PaddingMode.PKCS7\n      })\n      {\n\n        //Use random IV\n        aes.GenerateIV();\n        iv = aes.IV;\n\n        using (var encrypter = aes.CreateEncryptor(cryptKey, iv))\n        using (var cipherStream = new MemoryStream())\n        {\n          using (var cryptoStream = new CryptoStream(cipherStream, encrypter, CryptoStreamMode.Write))\n          using (var binaryWriter = new BinaryWriter(cryptoStream))\n          {\n            //Encrypt Data\n            binaryWriter.Write(secretMessage);\n          }\n\n          cipherText = cipherStream.ToArray();\n        }\n\n      }\n\n      //Assemble encrypted message and add authentication\n      using (var hmac = new HMACSHA256(authKey))\n      using (var encryptedStream = new MemoryStream())\n      {\n        using (var binaryWriter = new BinaryWriter(encryptedStream))\n        {\n          //Prepend non-secret payload if any\n          binaryWriter.Write(nonSecretPayload);\n          //Prepend IV\n          binaryWriter.Write(iv);\n          //Write Ciphertext\n          binaryWriter.Write(cipherText);\n          binaryWriter.Flush();\n\n          //Authenticate all data\n          var tag = hmac.ComputeHash(encryptedStream.ToArray());\n          //Postpend tag\n          binaryWriter.Write(tag);\n        }\n        return encryptedStream.ToArray();\n      }\n\n    }\n\n    public static byte[] SimpleDecrypt(byte[] encryptedMessage, byte[] cryptKey, byte[] authKey, int nonSecretPayloadLength = 0)\n    {\n\n      //Basic Usage Error Checks\n      if (cryptKey == null || cryptKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\"CryptKey needs to be {0} bit!\", KeyBitSize), \"cryptKey\");\n\n      if (authKey == null || authKey.Length != KeyBitSize / 8)\n        throw new ArgumentException(String.Format(\"AuthKey needs to be {0} bit!\", KeyBitSize), \"authKey\");\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      using (var hmac = new HMACSHA256(authKey))\n      {\n        var sentTag = new byte[hmac.HashSize / 8];\n        //Calculate Tag\n        var calcTag = hmac.ComputeHash(encryptedMessage, 0, encryptedMessage.Length - sentTag.Length);\n        var ivLength = (BlockBitSize / 8);\n\n        //if message length is to small just return null\n        if (encryptedMessage.Length < sentTag.Length + nonSecretPayloadLength + ivLength)\n          return null;\n\n        //Grab Sent Tag\n        Array.Copy(encryptedMessage, encryptedMessage.Length - sentTag.Length, sentTag, 0, sentTag.Length);\n\n        //Compare Tag with constant time comparison\n        var compare = 0;\n        for (var i = 0; i < sentTag.Length; i++)\n          compare |= sentTag[i] ^ calcTag[i]; \n\n        //if message doesn't authenticate return null\n        if (compare != 0)\n          return null;\n\n        using (var aes = new AesManaged\n        {\n          KeySize = KeyBitSize,\n          BlockSize = BlockBitSize,\n          Mode = CipherMode.CBC,\n          Padding = PaddingMode.PKCS7\n        })\n        {\n\n          //Grab IV from message\n          var iv = new byte[ivLength];\n          Array.Copy(encryptedMessage, nonSecretPayloadLength, iv, 0, iv.Length);\n\n          using (var decrypter = aes.CreateDecryptor(cryptKey, iv))\n          using (var plainTextStream = new MemoryStream())\n          {\n            using (var decrypterStream = new CryptoStream(plainTextStream, decrypter, CryptoStreamMode.Write))\n            using (var binaryWriter = new BinaryWriter(decrypterStream))\n            {\n              //Decrypt Cipher Text from Message\n              binaryWriter.Write(\n                encryptedMessage,\n                nonSecretPayloadLength + iv.Length,\n                encryptedMessage.Length - nonSecretPayloadLength - iv.Length - sentTag.Length\n              );\n            }\n            //Return Plain Text\n            return plainTextStream.ToArray();\n          }\n        }\n      }\n    }\n\n    public static byte[] SimpleEncryptWithPassword(byte[] secretMessage, string password, byte[] nonSecretPayload = null)\n    {\n      nonSecretPayload = nonSecretPayload ?? new byte[] {};\n\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length < MinPasswordLength)\n        throw new ArgumentException(String.Format(\"Must have a password of at least {0} characters!\", MinPasswordLength), \"password\");\n\n      if (secretMessage == null || secretMessage.Length ==0)\n        throw new ArgumentException(\"Secret Message Required!\", \"secretMessage\");\n\n      var payload = new byte[((SaltBitSize / 8) * 2) + nonSecretPayload.Length];\n\n      Array.Copy(nonSecretPayload, payload, nonSecretPayload.Length);\n      int payloadIndex = nonSecretPayload.Length;\n\n      byte[] cryptKey;\n      byte[] authKey;\n      //Use Random Salt to prevent pre-generated weak password attacks.\n      using (var generator = new Rfc2898DeriveBytes(password, SaltBitSize / 8, Iterations))\n      {\n        var salt = generator.Salt;\n\n        //Generate Keys\n        cryptKey = generator.GetBytes(KeyBitSize / 8);\n\n        //Create Non Secret Payload\n        Array.Copy(salt, 0, payload, payloadIndex, salt.Length);\n        payloadIndex += salt.Length;\n      }\n\n      //Deriving separate key, might be less efficient than using HKDF, \n      //but now compatible with RNEncryptor which had a very similar wireformat and requires less code than HKDF.\n      using (var generator = new Rfc2898DeriveBytes(password, SaltBitSize / 8, Iterations))\n      {\n        var salt = generator.Salt;\n\n        //Generate Keys\n        authKey = generator.GetBytes(KeyBitSize / 8);\n\n        //Create Rest of Non Secret Payload\n        Array.Copy(salt, 0, payload, payloadIndex, salt.Length);\n      }\n\n      return SimpleEncrypt(secretMessage, cryptKey, authKey, payload);\n    }\n\n    public static byte[] SimpleDecryptWithPassword(byte[] encryptedMessage, string password, int nonSecretPayloadLength = 0)\n    {\n      //User Error Checks\n      if (string.IsNullOrWhiteSpace(password) || password.Length < MinPasswordLength)\n        throw new ArgumentException(String.Format(\"Must have a password of at least {0} characters!\", MinPasswordLength), \"password\");\n\n      if (encryptedMessage == null || encryptedMessage.Length == 0)\n        throw new ArgumentException(\"Encrypted Message Required!\", \"encryptedMessage\");\n\n      var cryptSalt = new byte[SaltBitSize / 8];\n      var authSalt = new byte[SaltBitSize / 8];\n\n      //Grab Salt from Non-Secret Payload\n      Array.Copy(encryptedMessage, nonSecretPayloadLength, cryptSalt, 0, cryptSalt.Length);\n      Array.Copy(encryptedMessage, nonSecretPayloadLength + cryptSalt.Length, authSalt, 0, authSalt.Length);\n\n      byte[] cryptKey;\n      byte[] authKey;\n\n      //Generate crypt key\n      using (var generator = new Rfc2898DeriveBytes(password, cryptSalt, Iterations))\n      {\n        cryptKey = generator.GetBytes(KeyBitSize / 8);\n      }\n      //Generate auth key\n      using (var generator = new Rfc2898DeriveBytes(password, authSalt, Iterations))\n      {\n        authKey = generator.GetBytes(KeyBitSize / 8);\n      }\n\n      return SimpleDecrypt(encryptedMessage, cryptKey, authKey, cryptSalt.Length + authSalt.Length + nonSecretPayloadLength);\n    }\n  }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 3
        }
      },
      "dd1ae54d-e995-4540-acd7-c449f020f817": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "72038a80-5352-4d5c-9b68-698d033576a0",
            "1f3da12e-b2a1-4f90-a944-6e92724ad8ef",
            "bd45842c-c092-4cb2-add5-ac018df6cce2",
            "f26a0ebc-534c-4521-bb72-1dfe640fb3af",
            "81789f7a-12db-4cd0-b774-51517a766270",
            "65ee84e2-52ea-45cb-b9f1-a44a84b4539b",
            "00ed1acc-0bc5-4b41-aa43-c26c03bcc92d",
            "bdef189f-16eb-4afa-b58f-2a9b414a9969",
            "45a32cec-f24f-4017-bd7e-60e228ee9f7c",
            "82795156-ea7a-4731-aefa-7b0f9b18205c",
            "aac7441b-2c1e-481f-9ff9-454896fc4af9"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663355,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550213460000,
          "parent_id": "f0c07076-1721-4628-bc3b-9d40618aeb3a",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Modern Examples of Symmetric Authenticated Encryption of a string"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 13
        }
      },
      "f0c07076-1721-4628-bc3b-9d40618aeb3a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "dd1ae54d-e995-4540-acd7-c449f020f817",
            "8c02a38c-22c2-49e1-b77c-836477d63054",
            "6287a690-7b42-410f-8ca4-01d0f3f9f773",
            "a2347af8-7862-4301-85ae-12ac62f1db60",
            "32137167-2dcc-4cee-9aee-35d8e5c760d8",
            "8b0184ab-afca-426b-9625-8c2fdf6f2529"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528620000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f0c07076-1721-4628-bc3b-9d40618aeb3a",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550213400000,
          "parent_id": "896da524-8e65-414a-b645-dd45985879a1",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Cryptography"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 52
        }
      },
      "f26a0ebc-534c-4521-bb72-1dfe640fb3af": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1549528663353,
          "id": "f26a0ebc-534c-4521-bb72-1dfe640fb3af",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1549528663353,
          "parent_id": "dd1ae54d-e995-4540-acd7-c449f020f817",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Both examples have a main function that takes secret message string, key(s) and an optional non-secret payload and return and authenticated encrypted string optionally prepended with the non-secret data. Ideally you would use these with 256bit key(s) randomly generated see "
              ],
              ["NewKey()", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      }
    },
    "space": {}
  }
}
