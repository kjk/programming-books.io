2630 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "454cbfa8-701e-420f-b33d-5484f2b82090"
      },
      "version": -1
    }
  ]
}
Response:+2378
{
  "recordMap": {
    "block": {
      "454cbfa8-701e-420f-b33d-5484f2b82090": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "bcaa7456-4161-4750-ac93-ae8768650a7e",
            "da358581-cb28-4315-a94a-2f603c398847",
            "6f522f92-2234-457b-b764-adbac9dfa295",
            "644c608c-af68-474c-a822-2dd2bdb3ad3c",
            "2e110ce1-bbcb-45b1-912b-0cad34e8fa26",
            "72467dcf-5c14-48ee-ba77-a3068754905a",
            "1cb2af0e-ac4e-4d22-b47f-cd995717daad",
            "59c55fb6-3ff2-46dc-8be3-715f12f6eed0",
            "6aeb59cb-6a07-4ea2-b3bf-e3cb05be2933",
            "b046f3b6-bf19-458d-a1a7-9cc627f6fcff",
            "755659cb-905a-43c0-9b47-3ca7ad20e170",
            "1bcc8d68-2d39-42b0-8355-49061e488149",
            "02c000b7-b468-4c4b-8076-ec72786cf94c",
            "f9909055-1b8f-4739-b61c-61271600d9e1",
            "cb75aa6a-5f59-47bf-ad10-04fbd417f955",
            "e4c66eb1-814c-4195-a5aa-ef093932190e",
            "1c4b2883-b3a4-4292-bc75-340d4c16268d",
            "90a8243e-214f-486a-a466-4e3db2227afb",
            "3a6d8007-bd76-40fc-b45b-30fe336bee82",
            "a118fcf3-7150-4305-90b5-0862b0212419",
            "85907d57-b1af-4c90-bd32-5226adf0c9d4",
            "81be6760-b857-41a3-8243-8c6102542cf1"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674599,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550710620000,
          "parent_id": "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Using std::move to reduce complexity from O(n) to O(1)"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 18
        }
      }
    }
  }
}
44858 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "454cbfa8-701e-420f-b33d-5484f2b82090"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+44598
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "02c000b7-b468-4c4b-8076-ec72786cf94c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674597,
          "id": "02c000b7-b468-4c4b-8076-ec72786cf94c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674597,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "In concrete numbers, with g++ and Visual C++ compilers the above invocation of "
              ],
              ["collatz(42)", [["c"]]],
              [
                " resulted in a Collatz sequence of 8 items and 36 item copy operations (8*7/2 = 28, plus some) in vector copy constructor calls."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "1bcc8d68-2d39-42b0-8355-49061e488149": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674597,
          "id": "1bcc8d68-2d39-42b0-8355-49061e488149",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674597,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The number of item copy operations due to copying of the vectors is here roughly O("
              ],
              ["n²", [["i"]]],
              ["), since it’s the sum 1 + 2 + 3 + … "],
              ["n", [["i"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "1c4b2883-b3a4-4292-bc75-340d4c16268d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674598,
          "id": "1c4b2883-b3a4-4292-bc75-340d4c16268d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674598,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The algorithm is necessarily still O("],
              ["n", [["i"]]],
              [
                ") in the length of the Collatz sequence produced, but this is a quite dramatic improvement: O("
              ],
              ["n", [["i"]]],
              ["²) → O("],
              ["n", [["i"]]],
              [")."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "1cb2af0e-ac4e-4d22-b47f-cd995717daad": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674595,
          "id": "1cb2af0e-ac4e-4d22-b47f-cd995717daad",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674595,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["For a container actual copying is typically of O("],
              ["n", [["i"]]],
              [") complexity, where "],
              ["n", [["i"]]],
              [
                " is the number of items in the container, while moving is O(1), constant time. And for an algorithm that logically copies that container "
              ],
              ["n", [["i"]]],
              [
                " times, this can reduce the complexity from the usually impractical O("
              ],
              ["n", [["i"]]],
              ["²) to just linear O("],
              ["n", [["i"]]],
              [")."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "2e110ce1-bbcb-45b1-912b-0cad34e8fa26": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674595,
          "id": "2e110ce1-bbcb-45b1-912b-0cad34e8fa26",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674595,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["special support for a "],
              ["move assignment operator", [["b"]]],
              [" "],
              ["auto operator=(T&&) -> T&", [["c"]]],
              [", which also is supposed to move from the source."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "3a6d8007-bd76-40fc-b45b-30fe336bee82": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674598,
          "id": "3a6d8007-bd76-40fc-b45b-30fe336bee82",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674598,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "With some language support one could perhaps use moving and still express and enforce the immutability of a variable "
              ],
              ["between its initialization and final move", [["i"]]],
              [
                ", after which any use of that variable should be an error. Alas, as of C++14 C++ does not support that. For loop-free code the no use after move can be enforced via a re-declaration of the relevant name as an incomplete "
              ],
              ["struct", [["c"]]],
              [", as with "],
              ["struct result;", [["c"]]],
              [
                " above, but this is ugly and not likely to be understood by other programmers; also the diagnostics can be quite misleading."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "44b9891c-fe65-4aa6-8ac6-b623709b7c02": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "fb68ccf4-8c88-4999-91f7-355920149ded",
            "454cbfa8-701e-420f-b33d-5484f2b82090",
            "a1addb66-6283-4d82-bc95-8b5bd6aacf45",
            "dfdc2c9e-4732-48b6-b624-64048ff59576",
            "f5c5bd6f-372c-4ad4-b2ee-a399966cbfdc",
            "308f2f96-b432-45b5-b0e0-7a6204c58d11"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522640000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522880000,
          "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Move semantics"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 34
        }
      },
      "454cbfa8-701e-420f-b33d-5484f2b82090": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "bcaa7456-4161-4750-ac93-ae8768650a7e",
            "da358581-cb28-4315-a94a-2f603c398847",
            "6f522f92-2234-457b-b764-adbac9dfa295",
            "644c608c-af68-474c-a822-2dd2bdb3ad3c",
            "2e110ce1-bbcb-45b1-912b-0cad34e8fa26",
            "72467dcf-5c14-48ee-ba77-a3068754905a",
            "1cb2af0e-ac4e-4d22-b47f-cd995717daad",
            "59c55fb6-3ff2-46dc-8be3-715f12f6eed0",
            "6aeb59cb-6a07-4ea2-b3bf-e3cb05be2933",
            "b046f3b6-bf19-458d-a1a7-9cc627f6fcff",
            "755659cb-905a-43c0-9b47-3ca7ad20e170",
            "1bcc8d68-2d39-42b0-8355-49061e488149",
            "02c000b7-b468-4c4b-8076-ec72786cf94c",
            "f9909055-1b8f-4739-b61c-61271600d9e1",
            "cb75aa6a-5f59-47bf-ad10-04fbd417f955",
            "e4c66eb1-814c-4195-a5aa-ef093932190e",
            "1c4b2883-b3a4-4292-bc75-340d4c16268d",
            "90a8243e-214f-486a-a466-4e3db2227afb",
            "3a6d8007-bd76-40fc-b45b-30fe336bee82",
            "a118fcf3-7150-4305-90b5-0862b0212419",
            "85907d57-b1af-4c90-bd32-5226adf0c9d4",
            "81be6760-b857-41a3-8243-8c6102542cf1"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674599,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550710620000,
          "parent_id": "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Using std::move to reduce complexity from O(n) to O(1)"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 18
        }
      },
      "59c55fb6-3ff2-46dc-8be3-715f12f6eed0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674596,
          "id": "59c55fb6-3ff2-46dc-8be3-715f12f6eed0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674596,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["In his article "],
              [
                "“Containers That Never Change” in Dr. Dobbs Journal in September 19 2013",
                [
                  [
                    "a",
                    "http://www.drdobbs.com/cpp/containters-that-never-change/240161543"
                  ]
                ]
              ],
              [
                ", Andrew Koenig presented an interesting example of algorithmic inefficiency when using a style of programming where variables are immutable after initialization. With this style loops are generally expressed using recursion. And for some algorithms such as generating a Collatz sequence, the recursion requires logically copying a container:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "644c608c-af68-474c-a822-2dd2bdb3ad3c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674594,
          "id": "644c608c-af68-474c-a822-2dd2bdb3ad3c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674594,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["special support for a "],
              ["move constructor", [["b"]]],
              [" "],
              ["T( T&& )", [["c"]]],
              [
                ", which is supposed to efficiently move resources from the specified other object, instead of actually copying those resources, and"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "6aeb59cb-6a07-4ea2-b3bf-e3cb05be2933": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674596,
          "id": "6aeb59cb-6a07-4ea2-b3bf-e3cb05be2933",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674596,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "// Based on an example by Andrew Koenig in his Dr. Dobbs Journal article\n// “Containers That Never Change” September 19, 2013, available at\n// <url: http://www.drdobbs.com/cpp/containters-that-never-change/240161543>\n\n// Includes here, e.g. <vector>\n\nnamespace my {\n    template< class Item >\n    using Vector_ = /* E.g. std::vector<Item> */;\n\n    auto concat( Vector_<int> const& v, int const x )\n        -> Vector_<int>\n    {\n        auto result{ v };\n        result.push_back( x );\n        return result;\n    }\n\n    auto collatz_aux( int const n, Vector_<int> const& result )\n        -> Vector_<int>\n    {\n        if( n == 1 )\n        {\n            return result;\n        }\n        auto const new_result = concat( result, n );\n        if( n % 2 == 0 )\n        {\n            return collatz_aux( n/2, new_result );\n        }\n        else\n        {\n            return collatz_aux( 3*n + 1, new_result );\n        }\n    }\n\n    auto collatz( int const n )\n        -> Vector_<int>\n    {\n        assert( n != 0 );\n        return collatz_aux( n, Vector_<int>() );\n    }\n}  // namespace my\n\n#include <iostream>\nusing namespace std;\nauto main() -> int\n{\n    for( int const x : my::collatz( 42 ) )\n    {\n        cout << x << ' ';\n    }\n    cout << '\\n';\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "6f522f92-2234-457b-b764-adbac9dfa295": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674594,
          "id": "6f522f92-2234-457b-b764-adbac9dfa295",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674594,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["the "],
              ["rvalue reference", [["b"]]],
              [" type builder "],
              ["&&", [["c"]]],
              [", e.g., "],
              ["std::string&&", [["c"]]],
              [" is an rvalue reference to a "],
              ["std::string", [["c"]]],
              [
                ", indicating that that referred to object is a temporary whose resources can just be pilfered (i.e. moved)"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      },
      "72467dcf-5c14-48ee-ba77-a3068754905a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674595,
          "id": "72467dcf-5c14-48ee-ba77-a3068754905a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674595,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The standard library support is mainly the "],
              ["std::move", [["c"]]],
              [" function template from the "],
              ["<utility>", [["c"]]],
              [
                " header. This function produces an rvalue reference to the specified object, indicating that it can be moved from, just as if it were a temporary."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "755659cb-905a-43c0-9b47-3ca7ad20e170": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674596,
          "id": "755659cb-905a-43c0-9b47-3ca7ad20e170",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674596,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [["42 21 64 32 16 8 4 2"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "81be6760-b857-41a3-8243-8c6102542cf1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674599,
          "id": "81be6760-b857-41a3-8243-8c6102542cf1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674599,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "template< class Item >\nclass Copy_tracking_vector\n{\nprivate:\n    static auto n_copy_ops()\n        -> int&\n    {\n        static int value;\n        return value;\n    }\n    \n    vector<Item>    items_;\n    \npublic:\n    static auto n() -> int { return n_copy_ops(); }\n\n    void push_back( Item const& o ) { items_.push_back( o ); }\n    auto begin() const { return items_.begin(); }\n    auto end() const { return items_.end(); }\n\n    Copy_tracking_vector(){}\n    \n    Copy_tracking_vector( Copy_tracking_vector const& other )\n        : items_( other.items_ )\n    { n_copy_ops() += items_.size(); }\n\n    Copy_tracking_vector( Copy_tracking_vector&& other )\n        : items_( move( other.items_ ) )\n    {}\n};"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "85907d57-b1af-4c90-bd32-5226adf0c9d4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674598,
          "id": "85907d57-b1af-4c90-bd32-5226adf0c9d4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674598,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["—"],
              [" "],
              [
                "For completeness, the instrumented vector class used to measure the number of item copy operations due to copy constructor invocations:"
              ],
              [" "]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "90a8243e-214f-486a-a466-4e3db2227afb": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674598,
          "id": "90a8243e-214f-486a-a466-4e3db2227afb",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674598,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "divider",
          "version": 5
        }
      },
      "a118fcf3-7150-4305-90b5-0862b0212419": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674598,
          "id": "a118fcf3-7150-4305-90b5-0862b0212419",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674598,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Summing up, the C++ language and library support for moving allows drastic improvements in algorithm complexity, but due the support’s incompleteness, at the cost of forsaking the code correctness guarantees and code clarity that "
              ],
              ["const", [["c"]]],
              [" can provide."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "ad527dc6-d4a7-420b-9234-94d0b9bfb560": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "c97e2222-373b-4879-ba1e-de9da33c4b9c",
            "069713c9-355d-43e5-bbe3-fe65ccc5d89f",
            "f6fb0c70-b2a7-438e-8fd0-214354d4363c",
            "cad79b8f-8e22-4786-b522-3ce3f7989dfb",
            "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
            "4e7523ec-807e-469b-846d-6f0e98a9f133",
            "c48a63c8-822c-4a23-a960-60de4face6ae",
            "99e19430-5cdd-423f-8fa9-0e2f0bf264ab",
            "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
            "3724ad56-a879-48bf-847e-5adcfcb60c18",
            "52470773-ddd6-4b1b-ad39-7b26f7b28f00",
            "6fdcface-f439-4f73-87ef-255a8f378573",
            "ee10cf45-84c7-467c-8068-ea9076a2401a",
            "4dc21607-5d04-4a95-bced-ba855fbfa11f",
            "546689ba-7cc0-49cb-ae94-05172f20d6dc",
            "193b149e-733b-4344-8898-29dc4a2ef0b0",
            "7b3003e0-5331-46e9-a216-03a87845d9e4",
            "fe5135d2-0f28-4675-bccd-611b7222102a",
            "a47adf4d-f2bb-4f72-84ee-798641440dfd",
            "903c7a47-fbc0-4b12-81a4-646b290a4e1e",
            "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
            "b886ff5d-614b-4aa9-9e99-851b7998439b",
            "89d591b2-5143-487b-8a09-144b6b266e4c",
            "ede1fd12-0013-4e8b-a92d-109c2ef39c10",
            "8655f492-9c51-4f68-ad52-8b6c1e02a277",
            "f2a0f008-68d4-4ef0-b159-b4601056dc66",
            "db03800f-1091-419f-bb8b-e6357b79b0ee",
            "50a27510-120b-4da0-9ecb-cf15396a0108",
            "bd95f7bc-834a-4faf-992f-446d54f5fc91",
            "0789dc55-0210-4292-957d-ed83df8e73af",
            "d5d40e50-c234-4e34-8c36-6916f8e79960",
            "5644241e-ceec-479a-8322-e9c1780f1515",
            "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
            "333099ca-9ef1-4569-b9ad-a7a9275c368b",
            "263edcef-95ee-480a-8c67-1e74662a250a",
            "9a81e0e2-994e-41b0-aa0f-0bb41311ad7d",
            "1146c4bd-8317-421d-b231-ebcb0eff5721",
            "ee86edbe-8dd9-497a-a24c-fa516272404e",
            "13fedea6-df65-4996-9280-9cedb29d5f94",
            "b96c747c-3d87-49a0-b2bb-264f7c11b216",
            "2457e2b5-2a2a-4489-9eac-adb5cebfd9b8",
            "ecf8cc46-eac4-4c36-a422-ed2cca054451",
            "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
            "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
            "cb822004-fe61-4bd8-91b8-d45b2acf0576",
            "efdc4616-d5e4-4dce-b49c-941c07a9ac4b",
            "43b2d3b6-c6aa-4441-b665-3932542c711c",
            "6980d61a-f1fa-491f-8409-409e295a4b03",
            "e197edf1-7913-4c71-bf9f-78feec182413",
            "a3104ba4-9a8b-4f2a-ad89-25f36d3b9595",
            "c0487639-ff5b-4e90-a0b3-9fe411676c2c",
            "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
            "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
            "94bfa868-4e02-4b90-841b-817c34132524",
            "8a295383-3e95-42dc-b126-f5d5d4d9927a",
            "afe087c6-fdaf-4e79-b087-b5329772ae68",
            "139ade48-e995-4c51-9c31-2edc9475f16e",
            "3b14aac5-20b3-4de0-9a04-adc1cc273aec",
            "2be9c7d5-be12-439a-8968-ad057c67187a",
            "71517390-0244-456d-87c4-82c582ca8abf",
            "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
            "d548e856-41b8-49c8-a801-044c518c9fe5",
            "83f01298-2804-4599-8deb-99728a5d557a",
            "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
            "eb50f34f-bfa8-4e16-9ad9-d114eb1d34d9",
            "96325b08-db02-4f4f-a7a3-7510a746dbe2",
            "5a1044bb-eec6-47e0-932c-1a000fc67e20",
            "48a240ac-2fc8-4208-bd39-82f2c3d27cb4",
            "2ed71a30-e220-47b0-b0e7-1bc14fce30c0",
            "ea515dbf-689d-48fb-bfb8-93f8853d7ec0",
            "899c3027-a75e-4a44-9144-10a53c6a2c11",
            "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
            "fcd2d991-afe0-4c4f-a9fe-760a139ae1f3",
            "d0bc06f8-edea-49a0-bdbb-c1bef0d073bd",
            "6c5aa9dd-7698-4690-bd9e-644763376917",
            "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
            "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
            "904db18b-f9e4-4135-accd-8cab1b7efd09",
            "a29d7b5a-3989-43f1-8efa-86ef82101f43",
            "c477f25f-108c-44a4-88a0-7be0b1a8f442",
            "1c542776-d859-4f7e-889a-d3f2c5b93f45",
            "f05fc49e-c44c-4e93-b1f0-a05de793c5bd",
            "6770e597-215e-480b-b658-f449f175ed3c",
            "d3696e4f-8789-4401-af6c-2f073d356228",
            "5dbd715a-2e96-4062-9cda-4e181e63af5e",
            "1e5df2e7-ee0b-4037-ab62-15139a784f28",
            "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
            "bd2b6b7e-15fe-4593-9be0-b9cb97312af0",
            "106e396c-5cd1-4e4b-a70c-30ba85edca56",
            "9a0f90cc-6905-4660-8751-556567fcd897",
            "1b4aabcd-82e1-426e-b2cd-5f1a6cfa8e60",
            "e6a35ae0-352c-42a0-9c74-633d5c76667f",
            "e2db6936-0727-4a61-bd9e-8712c9355a28",
            "02d273f3-3937-4a5b-86af-fbaa7082fc98",
            "5eb58f1d-da3c-4ebe-aff3-c98a60cca1a7",
            "289db939-0630-4d39-8987-cd9042ba485d",
            "5b32901d-2e27-4970-ba74-be06a103aa30",
            "4f03abce-5ffe-4575-9601-52e18b342ca2",
            "4a738092-15a0-42a9-8178-c62e1f86c80c",
            "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
            "66d100a7-32a0-4479-9f62-57e81c004eb6",
            "b7131d5c-8602-4af3-82a7-7c00e59ad384",
            "2d35c52b-5348-43d8-baf3-741d0b68c7ff",
            "8f46fba9-ba8b-4eaf-bb5f-2370fa61981b",
            "3b6d2215-7c30-4151-b9f1-7d1dc6e9d0de",
            "b41d10e9-7c12-482e-a1ff-612580407bc1",
            "5080976c-532d-492c-9735-9abf7dc903ae",
            "a0e8b380-dc71-4c5e-9564-5a6a96d413b0",
            "c70aafee-9819-4bd7-9b37-69e9f016666b",
            "2f06e164-6745-4c46-9402-92f51f9f9266",
            "b2086806-a259-48af-adcb-172245e66aa0",
            "0dfb5c8c-d986-4536-97a3-b3f543cfd7fa",
            "14d06bc1-b112-4b2f-a0a3-67a8dd9c958c",
            "4f68e8c3-ce07-490a-ad1e-1605c992a0ab",
            "f2023690-0f94-491a-ac9b-9c913f18d32c",
            "48c65d67-f77e-4b0b-b90a-83ab75bd68a9",
            "fc7b0093-a386-4cfb-9e24-ebd1f41fa3fa",
            "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
            "e105eeaa-e8c4-4f5c-b412-90c65bdf217a",
            "d5db2d0f-24c4-4bf6-a1d3-fc170bfb1b75",
            "b4ae7d5c-1d56-46c7-a0d9-9af16a5bad5f",
            "13e1fda6-ad15-4061-a10e-d4a621970eb7",
            "29483c03-d3f3-426c-bd91-6dba06c1c86f",
            "5731e795-bc6e-4f67-a20f-e1ea328ebb4e",
            "ffc91cd7-ce2e-43bd-83f9-dd500633c0a2",
            "50856007-ed7d-41fb-8551-374ecae3e24b",
            "69b8fd2c-ca44-4dcb-84cc-49ed820592d4",
            "cbbee582-eb1d-4f69-a297-e10ba2cd83ab",
            "e3f32187-64e1-4609-b294-74d479b50a70",
            "dadb2eed-6939-4a7d-9afa-46a0514a66be",
            "7933074e-4123-4c04-8235-24ded3b719ed",
            "3e515719-4b1e-4dc7-9955-45485e25e7d3",
            "c793f95d-c3c9-4e23-a753-d7b7871c3bbf",
            "f0479f5d-620b-453a-b476-4c9e9418b846",
            "020f0e91-0de0-4617-bb97-e4863949153d",
            "6dc44543-880c-4829-bd86-818b80f5aac6",
            "0cb787c7-79fb-4e4c-a8f2-c95bfa483953",
            "4e04587c-419b-4bb3-bcb4-efe6a43e35e9",
            "46b28c54-a7e1-4286-9bdc-69ae87c3bad3",
            "5e61d351-5c67-4222-b553-e5a42137412d",
            "e819fb9f-77e3-490d-9b3b-288189045e39",
            "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
            "05715f55-0a2a-4c15-8aa1-b8c1e8aa98a4",
            "f0a4483b-95d9-4c82-8e41-15c96d864674",
            "2dfdecd0-c228-4dc2-941d-0a4e53390d1c",
            "2172f363-6ba3-4c7d-b75a-95189cc14546",
            "6f1bdf3d-1474-4baa-98bd-f39758d46389",
            "03d0218f-3acf-4c09-8902-6b09a4f35be4",
            "5291840b-1ac0-4473-9bc3-691467a51c05",
            "83d53c9b-bf14-42a2-8fb8-238a2fcb905a",
            "8e4180b2-04a8-47ee-8473-9c3c632e261a",
            "10708491-24c3-48f4-b554-d2665157037f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550521908832,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1594594920000,
          "parent_id": "204dd4d3-a72c-4a9e-ba37-ebd5fc5ba989",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential C++"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 637
        }
      },
      "b046f3b6-bf19-458d-a1a7-9cc627f6fcff": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674596,
          "id": "b046f3b6-bf19-458d-a1a7-9cc627f6fcff",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674596,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [["Output:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "bcaa7456-4161-4750-ac93-ae8768650a7e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674593,
          "id": "bcaa7456-4161-4750-ac93-ae8768650a7e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674593,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "C++11 introduced core language and standard library support for "
              ],
              ["moving", [["b"]]],
              [" an object. The idea is that when an object "],
              ["o", [["i"]]],
              [
                " is a temporary and one wants a logical copy, then its safe to just pilfer "
              ],
              ["o", [["i"]]],
              [
                "’s resources, such as a dynamically allocated buffer, leaving "
              ],
              ["o", [["i"]]],
              [" logically empty but still destructible and copyable."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "cb75aa6a-5f59-47bf-ad10-04fbd417f955": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674597,
          "id": "cb75aa6a-5f59-47bf-ad10-04fbd417f955",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674597,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "using std::move;\n\nauto concat( Vector_<int> v, int const x )\n    -> Vector_<int>\n{\n    v.push_back( x );\n    // warning: moving a local object in a return statement prevents copy elision [-Wpessimizing-move]\n    // See https://stackoverflow.com/documentation/c%2b%2b/2489/copy-elision\n    // return move( v );\n    return v;\n}\n\nauto collatz_aux( int const n, Vector_<int> result )\n    -> Vector_<int>\n{\n    if( n == 1 )\n    {\n        return result;\n    }\n    auto new_result = concat( move( result ), n );\n    struct result;      // Make absolutely sure no use of `result` after this.\n    if( n % 2 == 0 )\n    {\n        return collatz_aux( n/2, move( new_result ) );\n    }\n    else\n    {\n        return collatz_aux( 3*n + 1, move( new_result ) );\n    }\n}\n\nauto collatz( int const n )\n    -> Vector_<int>\n{\n    assert( n != 0 );\n    return collatz_aux( n, Vector_<int>() );\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "da358581-cb28-4315-a94a-2f603c398847": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674594,
          "id": "da358581-cb28-4315-a94a-2f603c398847",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674594,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [["The core language support is mainly"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "e4c66eb1-814c-4195-a5aa-ef093932190e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674597,
          "id": "e4c66eb1-814c-4195-a5aa-ef093932190e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674597,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Here, with g++ and Visual C++ compilers, the number of item copy operations due to vector copy constructor invocations, was exactly 0."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "f9909055-1b8f-4739-b61c-61271600d9e1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522674597,
          "id": "f9909055-1b8f-4739-b61c-61271600d9e1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522674597,
          "parent_id": "454cbfa8-701e-420f-b33d-5484f2b82090",
          "parent_table": "block",
          "properties": {
            "title": [
              ["All", [["i"]]],
              [
                " of these item copy operations can be removed by simply moving vectors whose values are not needed anymore. To do this it’s necessary to remove "
              ],
              ["const", [["c"]]],
              [
                " and reference for the vector type arguments, passing the vectors "
              ],
              ["by value", [["i"]]],
              [
                ". The function returns are already automatically optimized. For the calls where vectors are passed, and not used again further on in the function, just apply "
              ],
              ["std::move", [["c"]]],
              [" to "],
              ["move", [["i"]]],
              [" those buffers rather than actually copying them:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      }
    },
    "space": {}
  }
}
