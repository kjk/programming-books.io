2930 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4"
      },
      "version": -1
    }
  ]
}
Response:+2678
{
  "recordMap": {
    "block": {
      "bcab0025-325d-4d0d-a8b2-1018adc89cd4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "e1d030ec-d1fe-4883-b50d-8692e933d717",
            "facea50e-1c91-4293-a161-d8482897e53f",
            "b66bbb05-d683-4a91-931e-97ea8d6c74a6",
            "f8c1aaa8-f2c9-4f01-ae31-f6fce1cb1206",
            "00f48f90-906f-4ab0-99f5-cf37c287d4a3",
            "2eab8f3d-6e40-414b-9685-a6ae5d2755d9",
            "3f506eae-774b-46ab-9ef4-6887d0dff037",
            "a27aef3a-0544-4bac-bfc0-2282ce8d41e6",
            "33fa5f01-65bd-40fb-91dc-6c801b1e1a01",
            "c5d75da8-d0db-43c4-96d4-8e8a6d1fb6d6",
            "b7f3821a-3592-4a5c-a407-d1517db6c0e2",
            "43cc56b0-7bc0-4893-89b5-e0508e12abe2",
            "c4fc6c6e-c954-4a5b-8633-53e8bba7d498",
            "d6ac6c5f-fb3b-4299-8a83-06e0ed32681a",
            "00a221b8-7164-433c-b392-852d71fcca75",
            "7e711efd-c8f3-4d89-9a23-943d0ef998f4",
            "cfdce71a-4997-4fa8-88c1-18fe9daef293",
            "de6c9284-aa5b-4d3f-8642-e10bd71a6213",
            "40ca51c3-68b6-4cf5-9e1a-51fe4c01339c",
            "6f29de5c-59d2-4900-9386-3882f77f6d65",
            "107ceee2-3eeb-4692-bc4e-dec1a155669f",
            "6739cf84-0a0f-4d1b-ab5b-d0bce9058735",
            "1d39be08-9252-4237-bd37-7ceafb37777f",
            "0978c579-dd7a-4368-9203-07fdef0ad75d",
            "1bc9791a-32a1-4253-a969-327ed1b06e06",
            "ab9e48a8-4f50-453f-b9ae-b039e4df85e2",
            "b59ac039-7a16-499e-9e08-678282aa67e1",
            "030511c7-0fe2-4531-9dd5-23d055c83824",
            "be35747e-de70-41f7-b6ca-797765d4d8d3"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044556,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
          "parent_table": "block",
          "properties": {
            "title": [["Accessing Elements"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 14
        }
      }
    }
  }
}
59663 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+59403
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "00a221b8-7164-433c-b392-852d71fcca75": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044552,
          "id": "00a221b8-7164-433c-b392-852d71fcca75",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              [
                "std::vector<int> v{ 4, 5, 6 }; // In pre-C++11 this is more verbose\n\nint a = v.front();   // a is 4, v.front() is equivalent to v[0]\nv.front() = 3;       // v now contains {3, 5, 6}\nint b = v.back();    // b is 6, v.back() is equivalent to v[v.size() - 1]\nv.back() = 7;        // v now contains {3, 5, 7}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 7
        }
      },
      "00f48f90-906f-4ab0-99f5-cf37c287d4a3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044547,
          "id": "00f48f90-906f-4ab0-99f5-cf37c287d4a3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044547,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This can be done either with the subscript operator "],
              [
                "[]",
                [
                  ["c"],
                  [
                    "a",
                    "http://en.cppreference.com/w/cpp/container/vector/operator_at"
                  ]
                ]
              ],
              [", or the member function "],
              [
                "at()",
                [
                  ["c"],
                  ["a", "http://en.cppreference.com/w/cpp/container/vector/at"]
                ]
              ],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "030511c7-0fe2-4531-9dd5-23d055c83824": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044556,
          "id": "030511c7-0fe2-4531-9dd5-23d055c83824",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044556,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "You can persist a reference or a pointer to an element of a vector for indirect access. These references or pointers to elements in the "
              ],
              ["vector", [["c"]]],
              [
                " remain stable and access remains defined unless you add/remove elements at or before the element in the "
              ],
              ["vector", [["c"]]],
              [", or you cause the "],
              ["vector", [["c"]]],
              [
                " capacity to change. This is the same as the rule for invalidating iterators."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "0978c579-dd7a-4368-9203-07fdef0ad75d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044554,
          "id": "0978c579-dd7a-4368-9203-07fdef0ad75d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044554,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [["Iterators:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "header",
          "version": 1
        }
      },
      "107ceee2-3eeb-4692-bc4e-dec1a155669f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044554,
          "id": "107ceee2-3eeb-4692-bc4e-dec1a155669f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044554,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Before C++11, the "],
              ["data()", [["c"]]],
              [" method can be simulated by calling "],
              ["front()", [["c"]]],
              [" and taking the address of the returned value:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "1bc9791a-32a1-4253-a969-327ed1b06e06": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044555,
          "id": "1bc9791a-32a1-4253-a969-327ed1b06e06",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044555,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Iterators are explained in more detail in the example “Iterating over "
              ],
              ["std::vector", [["c"]]],
              ["” and the article "],
              [
                "Iterators",
                [
                  [
                    "a",
                    "https://stackoverflow.com/documentation/c%2B%2B/473/iterators/1709/overview#t=20160613174720948501"
                  ]
                ]
              ],
              [
                ". In short, they act similarly to pointers to the elements of the vector:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "1d39be08-9252-4237-bd37-7ceafb37777f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044554,
          "id": "1d39be08-9252-4237-bd37-7ceafb37777f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044554,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "This works because vectors are always guaranteed to store their elements in contiguous memory locations, assuming the contents of the vector doesn’t override unary "
              ],
              ["operator&", [["c"]]],
              [". If it does, you’ll have to re-implement "],
              [
                "std::addressof",
                [
                  ["c"],
                  ["a", "http://en.cppreference.com/w/cpp/memory/addressof"]
                ]
              ],
              [" in pre-C++11. It also assumes that the vector isn’t empty."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "2eab8f3d-6e40-414b-9685-a6ae5d2755d9": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044547,
          "id": "2eab8f3d-6e40-414b-9685-a6ae5d2755d9",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044547,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Both return a reference to the element at the respective position in the "
              ],
              ["std::vector", [["c"]]],
              [" (unless it’s a "],
              [
                "vector<bool>",
                [
                  ["c"],
                  [
                    "a",
                    "http://stackoverflow.com/documentation/c%2B%2B/511/stdvector/2561/vectorbool-the-exception-to-many-many-rules#t=20160725190704070024"
                  ]
                ]
              ],
              [
                "), so that it can be read as well as modified (if the vector is not "
              ],
              ["const", [["c"]]],
              [")."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "33fa5f01-65bd-40fb-91dc-6c801b1e1a01": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044549,
          "id": "33fa5f01-65bd-40fb-91dc-6c801b1e1a01",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343520000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              [
                "std::vector<int> v{ 1, 2, 3 };\n\n// using []\nint a = v[1];    // a is 2\nv[1] = 4;        // v now contains { 1, 4, 3 }\n\n// using at()\nint b = v.at(2); // b is 3\nv.at(2) = 5;     // v now contains { 1, 4, 5 }\nint c = v.at(3); // throws std::out_of_range exception"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 6
        }
      },
      "3f506eae-774b-46ab-9ef4-6887d0dff037": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044549,
          "id": "3f506eae-774b-46ab-9ef4-6887d0dff037",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044549,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["[]", [["c"]]],
              [" and "],
              ["at()", [["c"]]],
              [" differ in that "],
              ["[]", [["c"]]],
              [" is not guaranteed to perform any bounds checking, while "],
              ["at()", [["c"]]],
              [" does. Accessing elements where "],
              ["index < 0", [["c"]]],
              [" or "],
              ["index >= size", [["c"]]],
              [" is "],
              [
                "undefined behavior",
                [
                  [
                    "a",
                    "http://stackoverflow.com/documentation/c%2B%2B/1812/undefined-behavior#t=201607221823520289181"
                  ]
                ]
              ],
              [" for "],
              ["[]", [["c"]]],
              [", while "],
              ["at()", [["c"]]],
              [" throws a "],
              [
                "std::out_of_range",
                [
                  ["c"],
                  ["a", "http://en.cppreference.com/w/cpp/error/out_of_range"]
                ]
              ],
              [" exception."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "40ca51c3-68b6-4cf5-9e1a-51fe4c01339c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044553,
          "id": "40ca51c3-68b6-4cf5-9e1a-51fe4c01339c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044553,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The "],
              [
                "data()",
                [
                  ["c"],
                  [
                    "a",
                    "http://en.cppreference.com/w/cpp/container/vector/data"
                  ]
                ]
              ],
              [" method returns a pointer to the raw memory used by the "],
              ["std::vector", [["c"]]],
              [
                " to internally store its elements. This is most often used when passing the vector data to legacy code that expects a C-style array."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "43cc56b0-7bc0-4893-89b5-e0508e12abe2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044550,
          "id": "43cc56b0-7bc0-4893-89b5-e0508e12abe2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              [
                "for (std::size_t i = 0; i < v.size(); ++i) {\n    v[i] = 1;\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 3
        }
      },
      "6739cf84-0a0f-4d1b-ab5b-d0bce9058735": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044554,
          "id": "6739cf84-0a0f-4d1b-ab5b-d0bce9058735",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              ["std::vector<int> v(4);\nint* ptr = &(v.front()); // or &v[0]"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 3
        }
      },
      "6f29de5c-59d2-4900-9386-3882f77f6d65": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044553,
          "id": "6f29de5c-59d2-4900-9386-3882f77f6d65",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              [
                "std::vector<int> v{ 1, 2, 3, 4 }; // v contains {1, 2, 3, 4}\nint* p = v.data(); // p points to 1\n*p = 4;            // v now contains {4, 2, 3, 4}\n++p;               // p points to 2\n*p = 3;            // v now contains {4, 3, 3, 4}\np[1] = 2;          // v now contains {4, 3, 2, 4}\n*(p + 2) = 1;      // v now contains {4, 3, 2, 1}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 3
        }
      },
      "7e711efd-c8f3-4d89-9a23-943d0ef998f4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044553,
          "id": "7e711efd-c8f3-4d89-9a23-943d0ef998f4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044553,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Note", [["b"], ["i"]]],
              [": It is "],
              [
                "undefined behavior",
                [
                  [
                    "a",
                    "http://stackoverflow.com/documentation/c%2B%2B/1812/undefined-behavior#t=201608052302241671564"
                  ]
                ]
              ],
              [" to invoke "],
              ["front()", [["c"]]],
              [" or "],
              ["back()", [["c"]]],
              [
                " on an empty vector. You need to check that the container is not empty using the "
              ],
              [
                "empty()",
                [
                  ["c"],
                  [
                    "a",
                    "http://en.cppreference.com/w/cpp/container/vector/empty"
                  ]
                ]
              ],
              [
                " member function (which checks if the container is empty) before calling "
              ],
              ["front()", [["c"]]],
              [" or "],
              ["back()", [["c"]]],
              [
                ". A simple example of the use of ‘empty()’ to test for an empty vector follows:"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "8655f492-9c51-4f68-ad52-8b6c1e02a277": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "6d8527cf-60ae-4abb-a94e-6d982e4e525c",
            "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
            "972450af-9e87-490c-b2a4-d4347c63a8da",
            "b49c3af2-da87-47b2-92d7-fc27aa159b20",
            "2b4ca881-b788-4cbe-a018-bde44d3371c0",
            "9000a6be-4e4b-4eac-9ab8-80243a05a262",
            "0c00a852-fa1d-4e33-80de-ee3de6ef60f3",
            "69000f60-9eb3-4af8-900b-cfb087221a41",
            "c8e19c6f-bdd0-48e8-82db-9ad060ec1134",
            "825140ca-f4ad-4d5f-ac8a-978dee5e3e95",
            "31a08f30-ff57-471c-8de7-bd85be13dc40",
            "e2d1a824-6498-4f46-96c7-45a11fe43aa5",
            "178f63ce-f1d2-4109-8e4d-7b8dd4f4ec79",
            "27ec3ee4-840d-4b35-8eeb-9d06b3f5869c",
            "43317b49-118b-468d-8415-4a0c1f4daa80",
            "3e959391-fe90-46e9-be92-3530b1992dd3",
            "ded50e2a-f3f3-44e9-8403-1812822b8f8d",
            "c84924c8-ab55-4be8-b11e-7e1f2ed68321"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522040000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552344180000,
          "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["std::vector"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 49
        }
      },
      "a27aef3a-0544-4bac-bfc0-2282ce8d41e6": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044549,
          "id": "a27aef3a-0544-4bac-bfc0-2282ce8d41e6",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044549,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Note:", [["b"], ["i"]]],
              [
                " The examples below use C++11-style initialization for clarity, but the operators can be used with all versions (unless marked C++11)."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "ab9e48a8-4f50-453f-b9ae-b039e4df85e2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044555,
          "id": "ab9e48a8-4f50-453f-b9ae-b039e4df85e2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              [
                "std::vector<int> v{ 4, 5, 6 };\n\nauto it = v.begin();\nint i = *it;        // i is 4\n++it; \ni = *it;            // i is 5\n*it = 6;            // v contains { 4, 6, 6 }\nauto e = v.end();   // e points to the element after the end of v. It can be \n                    // used to check whether an iterator reached the end of the vector:\n++it; \nit == v.end();      // false, it points to the element at position 2 (with value 6)\n++it;\nit == v.end();      // true"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 3
        }
      },
      "ad527dc6-d4a7-420b-9234-94d0b9bfb560": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "c97e2222-373b-4879-ba1e-de9da33c4b9c",
            "069713c9-355d-43e5-bbe3-fe65ccc5d89f",
            "f6fb0c70-b2a7-438e-8fd0-214354d4363c",
            "cad79b8f-8e22-4786-b522-3ce3f7989dfb",
            "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
            "4e7523ec-807e-469b-846d-6f0e98a9f133",
            "c48a63c8-822c-4a23-a960-60de4face6ae",
            "99e19430-5cdd-423f-8fa9-0e2f0bf264ab",
            "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
            "3724ad56-a879-48bf-847e-5adcfcb60c18",
            "52470773-ddd6-4b1b-ad39-7b26f7b28f00",
            "6fdcface-f439-4f73-87ef-255a8f378573",
            "ee10cf45-84c7-467c-8068-ea9076a2401a",
            "4dc21607-5d04-4a95-bced-ba855fbfa11f",
            "546689ba-7cc0-49cb-ae94-05172f20d6dc",
            "193b149e-733b-4344-8898-29dc4a2ef0b0",
            "7b3003e0-5331-46e9-a216-03a87845d9e4",
            "fe5135d2-0f28-4675-bccd-611b7222102a",
            "a47adf4d-f2bb-4f72-84ee-798641440dfd",
            "903c7a47-fbc0-4b12-81a4-646b290a4e1e",
            "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
            "b886ff5d-614b-4aa9-9e99-851b7998439b",
            "89d591b2-5143-487b-8a09-144b6b266e4c",
            "ede1fd12-0013-4e8b-a92d-109c2ef39c10",
            "8655f492-9c51-4f68-ad52-8b6c1e02a277",
            "f2a0f008-68d4-4ef0-b159-b4601056dc66",
            "db03800f-1091-419f-bb8b-e6357b79b0ee",
            "50a27510-120b-4da0-9ecb-cf15396a0108",
            "bd95f7bc-834a-4faf-992f-446d54f5fc91",
            "0789dc55-0210-4292-957d-ed83df8e73af",
            "d5d40e50-c234-4e34-8c36-6916f8e79960",
            "5644241e-ceec-479a-8322-e9c1780f1515",
            "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
            "333099ca-9ef1-4569-b9ad-a7a9275c368b",
            "263edcef-95ee-480a-8c67-1e74662a250a",
            "9a81e0e2-994e-41b0-aa0f-0bb41311ad7d",
            "1146c4bd-8317-421d-b231-ebcb0eff5721",
            "ee86edbe-8dd9-497a-a24c-fa516272404e",
            "13fedea6-df65-4996-9280-9cedb29d5f94",
            "b96c747c-3d87-49a0-b2bb-264f7c11b216",
            "2457e2b5-2a2a-4489-9eac-adb5cebfd9b8",
            "ecf8cc46-eac4-4c36-a422-ed2cca054451",
            "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
            "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
            "cb822004-fe61-4bd8-91b8-d45b2acf0576",
            "efdc4616-d5e4-4dce-b49c-941c07a9ac4b",
            "43b2d3b6-c6aa-4441-b665-3932542c711c",
            "6980d61a-f1fa-491f-8409-409e295a4b03",
            "e197edf1-7913-4c71-bf9f-78feec182413",
            "a3104ba4-9a8b-4f2a-ad89-25f36d3b9595",
            "c0487639-ff5b-4e90-a0b3-9fe411676c2c",
            "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
            "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
            "94bfa868-4e02-4b90-841b-817c34132524",
            "8a295383-3e95-42dc-b126-f5d5d4d9927a",
            "afe087c6-fdaf-4e79-b087-b5329772ae68",
            "139ade48-e995-4c51-9c31-2edc9475f16e",
            "3b14aac5-20b3-4de0-9a04-adc1cc273aec",
            "2be9c7d5-be12-439a-8968-ad057c67187a",
            "71517390-0244-456d-87c4-82c582ca8abf",
            "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
            "d548e856-41b8-49c8-a801-044c518c9fe5",
            "83f01298-2804-4599-8deb-99728a5d557a",
            "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
            "eb50f34f-bfa8-4e16-9ad9-d114eb1d34d9",
            "96325b08-db02-4f4f-a7a3-7510a746dbe2",
            "5a1044bb-eec6-47e0-932c-1a000fc67e20",
            "48a240ac-2fc8-4208-bd39-82f2c3d27cb4",
            "2ed71a30-e220-47b0-b0e7-1bc14fce30c0",
            "ea515dbf-689d-48fb-bfb8-93f8853d7ec0",
            "899c3027-a75e-4a44-9144-10a53c6a2c11",
            "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
            "fcd2d991-afe0-4c4f-a9fe-760a139ae1f3",
            "d0bc06f8-edea-49a0-bdbb-c1bef0d073bd",
            "6c5aa9dd-7698-4690-bd9e-644763376917",
            "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
            "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
            "904db18b-f9e4-4135-accd-8cab1b7efd09",
            "a29d7b5a-3989-43f1-8efa-86ef82101f43",
            "c477f25f-108c-44a4-88a0-7be0b1a8f442",
            "1c542776-d859-4f7e-889a-d3f2c5b93f45",
            "f05fc49e-c44c-4e93-b1f0-a05de793c5bd",
            "6770e597-215e-480b-b658-f449f175ed3c",
            "d3696e4f-8789-4401-af6c-2f073d356228",
            "5dbd715a-2e96-4062-9cda-4e181e63af5e",
            "1e5df2e7-ee0b-4037-ab62-15139a784f28",
            "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
            "bd2b6b7e-15fe-4593-9be0-b9cb97312af0",
            "106e396c-5cd1-4e4b-a70c-30ba85edca56",
            "9a0f90cc-6905-4660-8751-556567fcd897",
            "1b4aabcd-82e1-426e-b2cd-5f1a6cfa8e60",
            "e6a35ae0-352c-42a0-9c74-633d5c76667f",
            "e2db6936-0727-4a61-bd9e-8712c9355a28",
            "02d273f3-3937-4a5b-86af-fbaa7082fc98",
            "5eb58f1d-da3c-4ebe-aff3-c98a60cca1a7",
            "289db939-0630-4d39-8987-cd9042ba485d",
            "5b32901d-2e27-4970-ba74-be06a103aa30",
            "4f03abce-5ffe-4575-9601-52e18b342ca2",
            "4a738092-15a0-42a9-8178-c62e1f86c80c",
            "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
            "66d100a7-32a0-4479-9f62-57e81c004eb6",
            "b7131d5c-8602-4af3-82a7-7c00e59ad384",
            "2d35c52b-5348-43d8-baf3-741d0b68c7ff",
            "8f46fba9-ba8b-4eaf-bb5f-2370fa61981b",
            "3b6d2215-7c30-4151-b9f1-7d1dc6e9d0de",
            "b41d10e9-7c12-482e-a1ff-612580407bc1",
            "5080976c-532d-492c-9735-9abf7dc903ae",
            "a0e8b380-dc71-4c5e-9564-5a6a96d413b0",
            "c70aafee-9819-4bd7-9b37-69e9f016666b",
            "2f06e164-6745-4c46-9402-92f51f9f9266",
            "b2086806-a259-48af-adcb-172245e66aa0",
            "0dfb5c8c-d986-4536-97a3-b3f543cfd7fa",
            "14d06bc1-b112-4b2f-a0a3-67a8dd9c958c",
            "4f68e8c3-ce07-490a-ad1e-1605c992a0ab",
            "f2023690-0f94-491a-ac9b-9c913f18d32c",
            "48c65d67-f77e-4b0b-b90a-83ab75bd68a9",
            "fc7b0093-a386-4cfb-9e24-ebd1f41fa3fa",
            "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
            "e105eeaa-e8c4-4f5c-b412-90c65bdf217a",
            "d5db2d0f-24c4-4bf6-a1d3-fc170bfb1b75",
            "b4ae7d5c-1d56-46c7-a0d9-9af16a5bad5f",
            "13e1fda6-ad15-4061-a10e-d4a621970eb7",
            "29483c03-d3f3-426c-bd91-6dba06c1c86f",
            "5731e795-bc6e-4f67-a20f-e1ea328ebb4e",
            "ffc91cd7-ce2e-43bd-83f9-dd500633c0a2",
            "50856007-ed7d-41fb-8551-374ecae3e24b",
            "69b8fd2c-ca44-4dcb-84cc-49ed820592d4",
            "cbbee582-eb1d-4f69-a297-e10ba2cd83ab",
            "e3f32187-64e1-4609-b294-74d479b50a70",
            "dadb2eed-6939-4a7d-9afa-46a0514a66be",
            "7933074e-4123-4c04-8235-24ded3b719ed",
            "3e515719-4b1e-4dc7-9955-45485e25e7d3",
            "c793f95d-c3c9-4e23-a753-d7b7871c3bbf",
            "f0479f5d-620b-453a-b476-4c9e9418b846",
            "020f0e91-0de0-4617-bb97-e4863949153d",
            "6dc44543-880c-4829-bd86-818b80f5aac6",
            "0cb787c7-79fb-4e4c-a8f2-c95bfa483953",
            "4e04587c-419b-4bb3-bcb4-efe6a43e35e9",
            "46b28c54-a7e1-4286-9bdc-69ae87c3bad3",
            "5e61d351-5c67-4222-b553-e5a42137412d",
            "e819fb9f-77e3-490d-9b3b-288189045e39",
            "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
            "05715f55-0a2a-4c15-8aa1-b8c1e8aa98a4",
            "f0a4483b-95d9-4c82-8e41-15c96d864674",
            "2dfdecd0-c228-4dc2-941d-0a4e53390d1c",
            "2172f363-6ba3-4c7d-b75a-95189cc14546",
            "6f1bdf3d-1474-4baa-98bd-f39758d46389",
            "03d0218f-3acf-4c09-8902-6b09a4f35be4",
            "5291840b-1ac0-4473-9bc3-691467a51c05",
            "83d53c9b-bf14-42a2-8fb8-238a2fcb905a",
            "8e4180b2-04a8-47ee-8473-9c3c632e261a",
            "10708491-24c3-48f4-b554-d2665157037f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550521908832,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1594594920000,
          "parent_id": "204dd4d3-a72c-4a9e-ba37-ebd5fc5ba989",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential C++"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 637
        }
      },
      "b59ac039-7a16-499e-9e08-678282aa67e1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044555,
          "id": "b59ac039-7a16-499e-9e08-678282aa67e1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044555,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["It is consistent with the standard that a "],
              ["std::vector<T>", [["c"]]],
              ["’s iterators actually "],
              ["be", [["i"]]],
              [" "],
              ["T*", [["c"]]],
              [
                "s, but most standard libraries do not do this. Not doing this both improves error messages, catches non-portable code, and can be used to instrument the iterators with debugging checks in non-release builds. Then, in release builds, the class wrapping around the underlying pointer is optimized away."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "b66bbb05-d683-4a91-931e-97ea8d6c74a6": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044546,
          "id": "b66bbb05-d683-4a91-931e-97ea8d6c74a6",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343520000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "iterators",
                [
                  [
                    "a",
                    "https://www.notion.so/kjkpublic/Iterators-ee86edbe8dd9497aa24cfa516272404e"
                  ]
                ]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 6
        }
      },
      "b7f3821a-3592-4a5c-a407-d1517db6c0e2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044550,
          "id": "b7f3821a-3592-4a5c-a407-d1517db6c0e2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044550,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [["For example, consider this loop"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "bcab0025-325d-4d0d-a8b2-1018adc89cd4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "e1d030ec-d1fe-4883-b50d-8692e933d717",
            "facea50e-1c91-4293-a161-d8482897e53f",
            "b66bbb05-d683-4a91-931e-97ea8d6c74a6",
            "f8c1aaa8-f2c9-4f01-ae31-f6fce1cb1206",
            "00f48f90-906f-4ab0-99f5-cf37c287d4a3",
            "2eab8f3d-6e40-414b-9685-a6ae5d2755d9",
            "3f506eae-774b-46ab-9ef4-6887d0dff037",
            "a27aef3a-0544-4bac-bfc0-2282ce8d41e6",
            "33fa5f01-65bd-40fb-91dc-6c801b1e1a01",
            "c5d75da8-d0db-43c4-96d4-8e8a6d1fb6d6",
            "b7f3821a-3592-4a5c-a407-d1517db6c0e2",
            "43cc56b0-7bc0-4893-89b5-e0508e12abe2",
            "c4fc6c6e-c954-4a5b-8633-53e8bba7d498",
            "d6ac6c5f-fb3b-4299-8a83-06e0ed32681a",
            "00a221b8-7164-433c-b392-852d71fcca75",
            "7e711efd-c8f3-4d89-9a23-943d0ef998f4",
            "cfdce71a-4997-4fa8-88c1-18fe9daef293",
            "de6c9284-aa5b-4d3f-8642-e10bd71a6213",
            "40ca51c3-68b6-4cf5-9e1a-51fe4c01339c",
            "6f29de5c-59d2-4900-9386-3882f77f6d65",
            "107ceee2-3eeb-4692-bc4e-dec1a155669f",
            "6739cf84-0a0f-4d1b-ab5b-d0bce9058735",
            "1d39be08-9252-4237-bd37-7ceafb37777f",
            "0978c579-dd7a-4368-9203-07fdef0ad75d",
            "1bc9791a-32a1-4253-a969-327ed1b06e06",
            "ab9e48a8-4f50-453f-b9ae-b039e4df85e2",
            "b59ac039-7a16-499e-9e08-678282aa67e1",
            "030511c7-0fe2-4531-9dd5-23d055c83824",
            "be35747e-de70-41f7-b6ca-797765d4d8d3"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044556,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "8655f492-9c51-4f68-ad52-8b6c1e02a277",
          "parent_table": "block",
          "properties": {
            "title": [["Accessing Elements"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 14
        }
      },
      "be35747e-de70-41f7-b6ca-797765d4d8d3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044556,
          "id": "be35747e-de70-41f7-b6ca-797765d4d8d3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              [
                "std::vector<int> v{ 1, 2, 3 };\nint* p = v.data() + 1;     // p points to 2\nv.insert(v.begin(), 0);    // p is now invalid, accessing *p is a undefined behavior.\np = v.data() + 1;          // p points to 1\nv.reserve(10);             // p is now invalid, accessing *p is a undefined behavior.\np = v.data() + 1;          // p points to 1\nv.erase(v.begin());        // p is now invalid, accessing *p is a undefined behavior."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 3
        }
      },
      "c4fc6c6e-c954-4a5b-8633-53e8bba7d498": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044551,
          "id": "c4fc6c6e-c954-4a5b-8633-53e8bba7d498",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044551,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Here we know that the index variable "],
              ["i", [["c"]]],
              [
                " is always in bounds, so it would be a waste of CPU cycles to check that "
              ],
              ["i", [["c"]]],
              [" is in bounds for every call to "],
              ["operator[]", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "c5d75da8-d0db-43c4-96d4-8e8a6d1fb6d6": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044550,
          "id": "c5d75da8-d0db-43c4-96d4-8e8a6d1fb6d6",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044550,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Because the "],
              ["at()", [["c"]]],
              [
                " method performs bounds checking and can throw exceptions, it is slower than "
              ],
              ["[]", [["c"]]],
              [". This makes "],
              ["[]", [["c"]]],
              [
                " preferred code where the semantics of the operation guarantee that the index is in bounds. In any case, accesses to elements of vectors are done in constant time. That means accessing to the first element of the vector has the same cost (in time) of accessing the second element, the third element and so on."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "cfdce71a-4997-4fa8-88c1-18fe9daef293": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044553,
          "id": "cfdce71a-4997-4fa8-88c1-18fe9daef293",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552343580000,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "language": [["C++"]],
            "title": [
              [
                "int main ()\n{\n  std::vector<int> v;\n  int sum (0);\n\n  for (int i=1;i<=10;i++) v.push_back(i);//create and initialize the vector\n\n  while (!v.empty())//loop through until the vector tests to be empty\n  {\n     sum += v.back();//keep a running total\n     v.pop_back();//pop out the element which removes it from the vector\n  }\n\n  std::cout << \"total: \" << sum << '\\n';//output the total to the user\n\n  return 0;\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 3
        }
      },
      "d6ac6c5f-fb3b-4299-8a83-06e0ed32681a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044551,
          "id": "d6ac6c5f-fb3b-4299-8a83-06e0ed32681a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044551,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The "],
              [
                "front()",
                [
                  ["c"],
                  [
                    "a",
                    "http://en.cppreference.com/w/cpp/container/vector/front"
                  ]
                ]
              ],
              [" and "],
              [
                "back()",
                [
                  ["c"],
                  [
                    "a",
                    "http://en.cppreference.com/w/cpp/container/vector/back"
                  ]
                ]
              ],
              [
                " member functions allow easy reference access to the first and last element of the vector, respectively. These positions are frequently used, and the special accessors can be more readable than their alternatives using "
              ],
              ["[]", [["c"]]],
              [":"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "de6c9284-aa5b-4d3f-8642-e10bd71a6213": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044553,
          "id": "de6c9284-aa5b-4d3f-8642-e10bd71a6213",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044553,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The example above creates a vector with a sequence of numbers from 1 to 10. Then it pops the elements of the vector out until the vector is empty (using ‘empty()’) to prevent undefined behavior. Then the sum of the numbers in the vector is calculated and displayed to the user."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "e1d030ec-d1fe-4883-b50d-8692e933d717": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044543,
          "id": "e1d030ec-d1fe-4883-b50d-8692e933d717",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044543,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [
              ["There are two primary ways of accessing elements in a "],
              [
                "std::vector",
                [
                  ["c"],
                  ["a", "http://en.cppreference.com/w/cpp/container/vector"]
                ]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "ee86edbe-8dd9-497a-a24c-fa516272404e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "49e49864-f1f8-4983-9e17-2105f2157082",
            "9bdd5ec2-29ad-4c16-94cc-11e85e26dcae",
            "730bd5ca-40ed-4e31-9edb-2d86dc670b75",
            "483e8828-4855-4ca0-9689-3a831fd49d45",
            "f661282a-a868-4958-a028-571c9c7594ad",
            "7b746678-b078-47df-af5d-ded97c5eeaa5",
            "962a6229-3fdd-4da5-b76e-a3ab2e958262",
            "e1e5a676-6aaa-4765-b634-5b124319ec7c",
            "9f072590-16dd-42ce-b5f9-c69b85789fc8",
            "d8c35064-dc0d-4af8-a66b-6b8d6289d9e7",
            "be48f50c-4aa2-4148-8f3f-707f739689b0",
            "f5a9fa75-c001-4578-987f-ddf43d5272af",
            "9a5c999c-de2a-46ea-a807-a26824105938",
            "e5415100-dabc-49b1-a4fe-b0f78b1867c2",
            "5e652df7-3eed-47aa-9a2b-a6f0abb4c4a7",
            "5a9ca51a-e064-4e27-98ef-63f72454e647",
            "2cd6932e-9241-4d4a-a8fc-b7b57afde11a",
            "caf75cff-399f-4f44-bb2b-d0ebb0231330",
            "fb69458f-68e8-4d47-bd05-68d9b3c1c992",
            "26198b95-2237-441a-ad5b-0e628d067688",
            "aede31d5-5def-47ab-9292-6219c16e13ba",
            "1e126a6b-c020-4cc5-9fb9-c610836d8630",
            "6cf24e97-23ff-4761-8ce6-c376a3be9a64",
            "fa7bf8e0-7135-40ec-ad6f-eaea775b317e",
            "6a8ca654-5d4b-4025-ac57-0b70bb3d56b7",
            "98a736bb-96e4-4e4f-b752-7a9ef2fcf142",
            "55a3da2d-e4ee-426d-a736-f4daf3d7507a",
            "6587702f-8f14-49f3-a7d2-e14534ed2883",
            "7339e2a0-67e8-45c9-8a51-e776717b65b2",
            "2d016462-c68a-4534-94cc-7969f537d083",
            "49efd601-e0dc-4c7f-adc1-754e799da550",
            "bf1399f3-fac3-44bc-bdbb-df77f452d323",
            "6481d07b-5985-46d3-8361-16e7b0eb23b6",
            "7f6a341c-dbff-41a5-98f1-18e284acb8f9",
            "6c55a9a9-15bd-4913-b821-b1db75512732",
            "cf09bc27-a612-4d35-9139-06bcb50cc35f",
            "9086cf38-ba14-495b-a418-d97d76006205",
            "8cbeed4b-217b-4b0b-a7b1-bf4b9e9e0b4d",
            "e3399af0-834a-49fb-b710-56d68dbe30f1",
            "fedd8af6-c3a4-4929-9b71-998370e3dfcf",
            "965ba988-dfa3-45ee-b7d4-222151318906",
            "6cf34f2c-e6e8-4386-8d0d-9c3b70dae7b6",
            "c6ed93e0-15ee-427c-ac50-411267545d64",
            "9b3938da-7f5f-4fcb-b2d9-9a5806f26b03",
            "4f8f4602-2e4d-4016-b96c-f65b22a8e2b6",
            "88291400-0c77-4535-93d8-92dd63ef7a2a",
            "0413552c-5882-422a-b481-48431647a2db",
            "cad48f9e-36b3-43af-98ba-053fe1d06d75",
            "9451d0ed-da1a-4ba8-966e-e2bd9bbb9075",
            "6b9e3cbe-6c1b-4b0a-8555-5916f5bfb5dc",
            "6f0f9f91-85f0-4b37-aff3-b4b40936a473",
            "1abaca68-4e7a-416c-9431-ad93d9e80622",
            "d05f05a6-1dda-497b-84b2-961dbedbfafb",
            "47eceb6b-259b-4d36-b434-26490eccd8c6"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550521920000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "ee86edbe-8dd9-497a-a24c-fa516272404e",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1552346100000,
          "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Iterators"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 88
        }
      },
      "f8c1aaa8-f2c9-4f01-ae31-f6fce1cb1206": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044546,
          "id": "f8c1aaa8-f2c9-4f01-ae31-f6fce1cb1206",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044546,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [["Index-based access:"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "header",
          "version": 5
        }
      },
      "facea50e-1c91-4293-a161-d8482897e53f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550522044545,
          "id": "facea50e-1c91-4293-a161-d8482897e53f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550522044545,
          "parent_id": "bcab0025-325d-4d0d-a8b2-1018adc89cd4",
          "parent_table": "block",
          "properties": {
            "title": [["index-based access"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "bulleted_list",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
