2076 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8"
      },
      "version": -1
    }
  ]
}
Response:+1824
{
  "recordMap": {
    "block": {
      "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "b40d33ee-ca20-4355-8cd5-46b3ecf8f2ae",
            "7dd745b5-6394-4b51-a18c-28ed8c821acb",
            "418f119f-cbb8-4349-9f19-8bc2d6de7e2a",
            "d1712c7c-c2e9-4939-9a84-2bf872f7024d",
            "cafd9607-1f8b-46bf-bb53-0c934a821ed8",
            "e4e088c2-0f5f-4c58-9881-4397036110dd",
            "93b3dd92-60d4-4727-b80a-bf061fe33920",
            "7018413b-4782-4ad2-9b96-f44c48f6e9ed",
            "f32b48cf-98ea-418f-b0d7-78f54d8d594f",
            "ed302da3-2499-4376-be91-e6b53880d586",
            "5ef7eae8-ea76-443f-9c74-1bfedb4c93f3",
            "1603b01d-ad16-4aeb-9179-e4c0328d42d0"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041462,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1595319840000,
          "parent_id": "5dbd715a-2e96-4062-9cda-4e181e63af5e",
          "parent_table": "block",
          "properties": {
            "title": [["Erasing down to a regular type with manual vtable"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      }
    }
  }
}
31466 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+31206
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "1603b01d-ad16-4aeb-9179-e4c0328d42d0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041462,
          "id": "1603b01d-ad16-4aeb-9179-e4c0328d42d0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041462,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              ["I would start at "],
              ["make_dtor_unique_ptr", [["c"]]],
              [
                " and teach it how to sometimes store the data in a buffer, and then in the heap if no room in the buffer. That may be sufficient."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "418f119f-cbb8-4349-9f19-8bc2d6de7e2a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041460,
          "id": "418f119f-cbb8-4349-9f19-8bc2d6de7e2a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041460,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "This is the root paper",
                [["a", "http://www.stepanovpapers.com/DeSt98.pdf"]]
              ],
              [", but in C++11 would want to add "],
              ["std::hash", [["c"]]],
              [" support."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "5dbd715a-2e96-4062-9cda-4e181e63af5e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "263bdee2-80d5-4aa5-83eb-2ea074356d3d",
            "c119ce9e-c36b-4e96-add1-0ea403079f69",
            "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
            "12da5168-08d4-4eb9-b74e-49dc625858ff",
            "64b023be-2452-45b2-8d75-30e946a3e525",
            "252ece15-c398-409e-b9fc-941fe3f57da5"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523000000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "5dbd715a-2e96-4062-9cda-4e181e63af5e",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523300000,
          "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Type erasure"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 30
        }
      },
      "5ef7eae8-ea76-443f-9c74-1bfedb4c93f3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041462,
          "id": "5ef7eae8-ea76-443f-9c74-1bfedb4c93f3",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041462,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Small object optimization requires that we store an aligned storage buffer within the "
              ],
              ["regular_type", [["c"]]],
              [", and carefully tweak the deleter of the "],
              ["ptr", [["c"]]],
              [" to only destroy the object and not delete it."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "7018413b-4782-4ad2-9b96-f44c48f6e9ed": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041461,
          "id": "7018413b-4782-4ad2-9b96-f44c48f6e9ed",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041461,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [["std::map<regular_type, std::any>"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "7dd745b5-6394-4b51-a18c-28ed8c821acb": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041457,
          "id": "7dd745b5-6394-4b51-a18c-28ed8c821acb",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041457,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "A Regular type is a type that can be constructed and assigned-to and assigned-from via copy or move, can be destroyed, and can be compared equal-to. It can also be constructed from no arguments. Finally, it also has support for a few other operations that are highly useful in various "
              ],
              ["std", [["c"]]],
              [" algorithms and containers."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "93b3dd92-60d4-4727-b80a-bf061fe33920": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041461,
          "id": "93b3dd92-60d4-4727-b80a-bf061fe33920",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041461,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Such a regular type can be used as a key for a "],
              ["std::map", [["c"]]],
              [" or a "],
              ["std::unordered_map", [["c"]]],
              [" that accepts "],
              ["anything regular", [["i"]]],
              [" for a key, like:"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "ad527dc6-d4a7-420b-9234-94d0b9bfb560": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "c97e2222-373b-4879-ba1e-de9da33c4b9c",
            "069713c9-355d-43e5-bbe3-fe65ccc5d89f",
            "f6fb0c70-b2a7-438e-8fd0-214354d4363c",
            "cad79b8f-8e22-4786-b522-3ce3f7989dfb",
            "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
            "4e7523ec-807e-469b-846d-6f0e98a9f133",
            "c48a63c8-822c-4a23-a960-60de4face6ae",
            "99e19430-5cdd-423f-8fa9-0e2f0bf264ab",
            "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
            "3724ad56-a879-48bf-847e-5adcfcb60c18",
            "52470773-ddd6-4b1b-ad39-7b26f7b28f00",
            "6fdcface-f439-4f73-87ef-255a8f378573",
            "ee10cf45-84c7-467c-8068-ea9076a2401a",
            "4dc21607-5d04-4a95-bced-ba855fbfa11f",
            "546689ba-7cc0-49cb-ae94-05172f20d6dc",
            "193b149e-733b-4344-8898-29dc4a2ef0b0",
            "7b3003e0-5331-46e9-a216-03a87845d9e4",
            "fe5135d2-0f28-4675-bccd-611b7222102a",
            "a47adf4d-f2bb-4f72-84ee-798641440dfd",
            "903c7a47-fbc0-4b12-81a4-646b290a4e1e",
            "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
            "b886ff5d-614b-4aa9-9e99-851b7998439b",
            "89d591b2-5143-487b-8a09-144b6b266e4c",
            "ede1fd12-0013-4e8b-a92d-109c2ef39c10",
            "8655f492-9c51-4f68-ad52-8b6c1e02a277",
            "f2a0f008-68d4-4ef0-b159-b4601056dc66",
            "db03800f-1091-419f-bb8b-e6357b79b0ee",
            "50a27510-120b-4da0-9ecb-cf15396a0108",
            "bd95f7bc-834a-4faf-992f-446d54f5fc91",
            "0789dc55-0210-4292-957d-ed83df8e73af",
            "d5d40e50-c234-4e34-8c36-6916f8e79960",
            "5644241e-ceec-479a-8322-e9c1780f1515",
            "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
            "333099ca-9ef1-4569-b9ad-a7a9275c368b",
            "263edcef-95ee-480a-8c67-1e74662a250a",
            "9a81e0e2-994e-41b0-aa0f-0bb41311ad7d",
            "1146c4bd-8317-421d-b231-ebcb0eff5721",
            "ee86edbe-8dd9-497a-a24c-fa516272404e",
            "13fedea6-df65-4996-9280-9cedb29d5f94",
            "b96c747c-3d87-49a0-b2bb-264f7c11b216",
            "2457e2b5-2a2a-4489-9eac-adb5cebfd9b8",
            "ecf8cc46-eac4-4c36-a422-ed2cca054451",
            "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
            "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
            "cb822004-fe61-4bd8-91b8-d45b2acf0576",
            "efdc4616-d5e4-4dce-b49c-941c07a9ac4b",
            "43b2d3b6-c6aa-4441-b665-3932542c711c",
            "6980d61a-f1fa-491f-8409-409e295a4b03",
            "e197edf1-7913-4c71-bf9f-78feec182413",
            "a3104ba4-9a8b-4f2a-ad89-25f36d3b9595",
            "c0487639-ff5b-4e90-a0b3-9fe411676c2c",
            "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
            "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
            "94bfa868-4e02-4b90-841b-817c34132524",
            "8a295383-3e95-42dc-b126-f5d5d4d9927a",
            "afe087c6-fdaf-4e79-b087-b5329772ae68",
            "139ade48-e995-4c51-9c31-2edc9475f16e",
            "3b14aac5-20b3-4de0-9a04-adc1cc273aec",
            "2be9c7d5-be12-439a-8968-ad057c67187a",
            "71517390-0244-456d-87c4-82c582ca8abf",
            "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
            "d548e856-41b8-49c8-a801-044c518c9fe5",
            "83f01298-2804-4599-8deb-99728a5d557a",
            "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
            "eb50f34f-bfa8-4e16-9ad9-d114eb1d34d9",
            "96325b08-db02-4f4f-a7a3-7510a746dbe2",
            "5a1044bb-eec6-47e0-932c-1a000fc67e20",
            "48a240ac-2fc8-4208-bd39-82f2c3d27cb4",
            "2ed71a30-e220-47b0-b0e7-1bc14fce30c0",
            "ea515dbf-689d-48fb-bfb8-93f8853d7ec0",
            "899c3027-a75e-4a44-9144-10a53c6a2c11",
            "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
            "fcd2d991-afe0-4c4f-a9fe-760a139ae1f3",
            "d0bc06f8-edea-49a0-bdbb-c1bef0d073bd",
            "6c5aa9dd-7698-4690-bd9e-644763376917",
            "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
            "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
            "904db18b-f9e4-4135-accd-8cab1b7efd09",
            "a29d7b5a-3989-43f1-8efa-86ef82101f43",
            "c477f25f-108c-44a4-88a0-7be0b1a8f442",
            "1c542776-d859-4f7e-889a-d3f2c5b93f45",
            "f05fc49e-c44c-4e93-b1f0-a05de793c5bd",
            "6770e597-215e-480b-b658-f449f175ed3c",
            "d3696e4f-8789-4401-af6c-2f073d356228",
            "5dbd715a-2e96-4062-9cda-4e181e63af5e",
            "1e5df2e7-ee0b-4037-ab62-15139a784f28",
            "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
            "bd2b6b7e-15fe-4593-9be0-b9cb97312af0",
            "106e396c-5cd1-4e4b-a70c-30ba85edca56",
            "9a0f90cc-6905-4660-8751-556567fcd897",
            "1b4aabcd-82e1-426e-b2cd-5f1a6cfa8e60",
            "e6a35ae0-352c-42a0-9c74-633d5c76667f",
            "e2db6936-0727-4a61-bd9e-8712c9355a28",
            "02d273f3-3937-4a5b-86af-fbaa7082fc98",
            "5eb58f1d-da3c-4ebe-aff3-c98a60cca1a7",
            "289db939-0630-4d39-8987-cd9042ba485d",
            "5b32901d-2e27-4970-ba74-be06a103aa30",
            "4f03abce-5ffe-4575-9601-52e18b342ca2",
            "4a738092-15a0-42a9-8178-c62e1f86c80c",
            "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
            "66d100a7-32a0-4479-9f62-57e81c004eb6",
            "b7131d5c-8602-4af3-82a7-7c00e59ad384",
            "2d35c52b-5348-43d8-baf3-741d0b68c7ff",
            "8f46fba9-ba8b-4eaf-bb5f-2370fa61981b",
            "3b6d2215-7c30-4151-b9f1-7d1dc6e9d0de",
            "b41d10e9-7c12-482e-a1ff-612580407bc1",
            "5080976c-532d-492c-9735-9abf7dc903ae",
            "a0e8b380-dc71-4c5e-9564-5a6a96d413b0",
            "c70aafee-9819-4bd7-9b37-69e9f016666b",
            "2f06e164-6745-4c46-9402-92f51f9f9266",
            "b2086806-a259-48af-adcb-172245e66aa0",
            "0dfb5c8c-d986-4536-97a3-b3f543cfd7fa",
            "14d06bc1-b112-4b2f-a0a3-67a8dd9c958c",
            "4f68e8c3-ce07-490a-ad1e-1605c992a0ab",
            "f2023690-0f94-491a-ac9b-9c913f18d32c",
            "48c65d67-f77e-4b0b-b90a-83ab75bd68a9",
            "fc7b0093-a386-4cfb-9e24-ebd1f41fa3fa",
            "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
            "e105eeaa-e8c4-4f5c-b412-90c65bdf217a",
            "d5db2d0f-24c4-4bf6-a1d3-fc170bfb1b75",
            "b4ae7d5c-1d56-46c7-a0d9-9af16a5bad5f",
            "13e1fda6-ad15-4061-a10e-d4a621970eb7",
            "29483c03-d3f3-426c-bd91-6dba06c1c86f",
            "5731e795-bc6e-4f67-a20f-e1ea328ebb4e",
            "ffc91cd7-ce2e-43bd-83f9-dd500633c0a2",
            "50856007-ed7d-41fb-8551-374ecae3e24b",
            "69b8fd2c-ca44-4dcb-84cc-49ed820592d4",
            "cbbee582-eb1d-4f69-a297-e10ba2cd83ab",
            "e3f32187-64e1-4609-b294-74d479b50a70",
            "dadb2eed-6939-4a7d-9afa-46a0514a66be",
            "7933074e-4123-4c04-8235-24ded3b719ed",
            "3e515719-4b1e-4dc7-9955-45485e25e7d3",
            "c793f95d-c3c9-4e23-a753-d7b7871c3bbf",
            "f0479f5d-620b-453a-b476-4c9e9418b846",
            "020f0e91-0de0-4617-bb97-e4863949153d",
            "6dc44543-880c-4829-bd86-818b80f5aac6",
            "0cb787c7-79fb-4e4c-a8f2-c95bfa483953",
            "4e04587c-419b-4bb3-bcb4-efe6a43e35e9",
            "46b28c54-a7e1-4286-9bdc-69ae87c3bad3",
            "5e61d351-5c67-4222-b553-e5a42137412d",
            "e819fb9f-77e3-490d-9b3b-288189045e39",
            "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
            "05715f55-0a2a-4c15-8aa1-b8c1e8aa98a4",
            "f0a4483b-95d9-4c82-8e41-15c96d864674",
            "2dfdecd0-c228-4dc2-941d-0a4e53390d1c",
            "2172f363-6ba3-4c7d-b75a-95189cc14546",
            "6f1bdf3d-1474-4baa-98bd-f39758d46389",
            "03d0218f-3acf-4c09-8902-6b09a4f35be4",
            "5291840b-1ac0-4473-9bc3-691467a51c05",
            "83d53c9b-bf14-42a2-8fb8-238a2fcb905a",
            "8e4180b2-04a8-47ee-8473-9c3c632e261a",
            "10708491-24c3-48f4-b554-d2665157037f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550521908832,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1594594920000,
          "parent_id": "204dd4d3-a72c-4a9e-ba37-ebd5fc5ba989",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential C++"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 637
        }
      },
      "b40d33ee-ca20-4355-8cd5-46b3ecf8f2ae": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041455,
          "id": "b40d33ee-ca20-4355-8cd5-46b3ecf8f2ae",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041455,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "C++ thrives on what is known as a Regular type (or at least Pseudo-Regular)."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "cafd9607-1f8b-46bf-bb53-0c934a821ed8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041460,
          "id": "cafd9607-1f8b-46bf-bb53-0c934a821ed8",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041460,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "using dtor_unique_ptr = std::unique_ptr<void, void(*)(void*)>;\ntemplate<class T, class...Args>\ndtor_unique_ptr make_dtor_unique_ptr( Args&&... args ) {\n  return {new T(std::forward<Args>(args)...), [](void* self){ delete static_cast<T*>(self); }};\n}\nstruct regular_vtable {\n  void(*copy_assign)(void* dest, void const* src); // T&=(T const&)\n  void(*move_assign)(void* dest, void* src); // T&=(T&&)\n  bool(*equals)(void const* lhs, void const* rhs); // T const&==T const&\n  bool(*order)(void const* lhs, void const* rhs); // std::less<T>{}(T const&, T const&)\n  std::size_t(*hash)(void const* self); // std::hash<T>{}(T const&)\n  std::type_info const&(*type)(); // typeid(T)\n  dtor_unique_ptr(*clone)(void const* self); // T(T const&)\n};\n\ntemplate<class T>\nregular_vtable make_regular_vtable() noexcept {\n  return {\n    [](void* dest, void const* src){ *static_cast<T*>(dest) = *static_cast<T const*>(src); },\n    [](void* dest, void* src){ *static_cast<T*>(dest) = std::move(*static_cast<T*>(src)); },\n    [](void const* lhs, void const* rhs){ return *static_cast<T const*>(lhs) == *static_cast<T const*>(rhs); },\n    [](void const* lhs, void const* rhs) { return std::less<T>{}(*static_cast<T const*>(lhs),*static_cast<T const*>(rhs)); },\n    [](void const* self){ return std::hash<T>{}(*static_cast<T const*>(self)); },\n    []()->decltype(auto){ return typeid(T); },\n    [](void const* self){ return make_dtor_unique_ptr<T>(*static_cast<T const*>(self)); }\n  };\n}\ntemplate<class T>\nregular_vtable const* get_regular_vtable() noexcept {\n  static const regular_vtable vtable=make_regular_vtable<T>();\n  return &vtable;\n}\n\nstruct regular_type {\n  using self=regular_type;\n  regular_vtable const* vtable = 0;\n  dtor_unique_ptr ptr{nullptr, [](void*){}};\n  \n  bool empty() const { return !vtable; }\n\n  template<class T, class...Args>\n  void emplace( Args&&... args ) {\n    ptr = make_dtor_unique_ptr<T>(std::forward<Args>(args)...);\n    if (ptr)\n      vtable = get_regular_vtable<T>();\n    else\n      vtable = nullptr;\n  }\n  friend bool operator==(regular_type const& lhs, regular_type const& rhs) {\n    if (lhs.vtable != rhs.vtable) return false;\n    return lhs.vtable->equals( lhs.ptr.get(), rhs.ptr.get() );\n  }\n  bool before(regular_type const& rhs) const {\n    auto const& lhs = *this;\n    if (!lhs.vtable || !rhs.vtable)\n      return std::less<regular_vtable const*>{}(lhs.vtable,rhs.vtable);\n    if (lhs.vtable != rhs.vtable)\n      return lhs.vtable->type().before(rhs.vtable->type());\n    return lhs.vtable->order( lhs.ptr.get(), rhs.ptr.get() );\n  }\n  // technically friend bool operator< that calls before is also required\n\n  std::type_info const* type() const {\n    if (!vtable) return nullptr;\n    return &vtable->type();\n  }\n  regular_type(regular_type&& o):\n    vtable(o.vtable),\n    ptr(std::move(o.ptr))\n  {\n    o.vtable = nullptr;\n  }\n  friend void swap(regular_type& lhs, regular_type& rhs){\n    std::swap(lhs.ptr, rhs.ptr);\n    std::swap(lhs.vtable, rhs.vtable);\n  }\n  regular_type& operator=(regular_type&& o) {\n    if (o.vtable == vtable) {\n      vtable->move_assign(ptr.get(), o.ptr.get());\n      return *this;\n    }\n    auto tmp = std::move(o);\n    swap(*this, tmp);\n    return *this;\n  }\n  regular_type(regular_type const& o):\n    vtable(o.vtable),\n    ptr(o.vtable?o.vtable->clone(o.ptr.get()):dtor_unique_ptr{nullptr, [](void*){}})\n  {\n    if (!ptr && vtable) vtable = nullptr;\n  }\n  regular_type& operator=(regular_type const& o) {\n    if (o.vtable == vtable) {\n      vtable->copy_assign(ptr.get(), o.ptr.get());\n      return *this;\n    }\n    auto tmp = o;\n    swap(*this, tmp);\n    return *this;\n  }\n  std::size_t hash() const {\n    if (!vtable) return 0;\n    return vtable->hash(ptr.get());\n  }\n  template<class T,\n    std::enable_if_t< !std::is_same<std::decay_t<T>, regular_type>{}, int>* =nullptr\n  >\n  regular_type(T&& t) {\n    emplace<std::decay_t<T>>(std::forward<T>(t));\n  }\n};\nnamespace std {\n  template<>\n  struct hash<regular_type> {\n    std::size_t operator()( regular_type const& r )const {\n      return r.hash();\n    }\n  };\n  template<>\n  struct less<regular_type> {\n    bool operator()( regular_type const& lhs, regular_type const& rhs ) const {\n      return lhs.before(rhs);\n    }\n  };\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "d1712c7c-c2e9-4939-9a84-2bf872f7024d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041460,
          "id": "d1712c7c-c2e9-4939-9a84-2bf872f7024d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041460,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              ["I will use the manual vtable approach to type erasure here."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "e4e088c2-0f5f-4c58-9881-4397036110dd": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041461,
          "id": "e4e088c2-0f5f-4c58-9881-4397036110dd",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041461,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "live example",
                [["a", "http://coliru.stacked-crooked.com/a/28ef6be761012a81"]]
              ],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "ed302da3-2499-4376-be91-e6b53880d586": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041461,
          "id": "ed302da3-2499-4376-be91-e6b53880d586",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041461,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Unlike "],
              ["any", [["c"]]],
              [", my "],
              ["regular_type", [["c"]]],
              [
                " does no small object optimization nor does it support getting the original data back. Getting the original type back isn’t hard."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "f32b48cf-98ea-418f-b0d7-78f54d8d594f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041461,
          "id": "f32b48cf-98ea-418f-b0d7-78f54d8d594f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550523041461,
          "parent_id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "would be basically a map from anothing regular, to anything copyable."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "b40d33ee-ca20-4355-8cd5-46b3ecf8f2ae",
            "7dd745b5-6394-4b51-a18c-28ed8c821acb",
            "418f119f-cbb8-4349-9f19-8bc2d6de7e2a",
            "d1712c7c-c2e9-4939-9a84-2bf872f7024d",
            "cafd9607-1f8b-46bf-bb53-0c934a821ed8",
            "e4e088c2-0f5f-4c58-9881-4397036110dd",
            "93b3dd92-60d4-4727-b80a-bf061fe33920",
            "7018413b-4782-4ad2-9b96-f44c48f6e9ed",
            "f32b48cf-98ea-418f-b0d7-78f54d8d594f",
            "ed302da3-2499-4376-be91-e6b53880d586",
            "5ef7eae8-ea76-443f-9c74-1bfedb4c93f3",
            "1603b01d-ad16-4aeb-9179-e4c0328d42d0"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550523041462,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f7560e8b-f87b-484a-8cf5-1d6e1d46b6f8",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1595319840000,
          "parent_id": "5dbd715a-2e96-4062-9cda-4e181e63af5e",
          "parent_table": "block",
          "properties": {
            "title": [["Erasing down to a regular type with manual vtable"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      }
    },
    "space": {}
  }
}
