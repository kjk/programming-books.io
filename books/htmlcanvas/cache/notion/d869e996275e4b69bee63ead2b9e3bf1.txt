1856 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1"
      },
      "version": -1
    }
  ]
}
Response:+1604
{
  "recordMap": {
    "block": {
      "d869e996-275e-4b69-bee6-3ead2b9e3bf1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "9426c5d3-f19e-407f-a344-96be24c27dcb",
            "7cb42b3d-f785-48b7-ab6c-ee8d55412583",
            "1d53240f-1748-4320-8878-117a11206998",
            "d5e6fadd-80f3-4be3-85f7-1842f1dc8e43",
            "c81b43de-2eb4-40be-92b4-5e4ab00702e1",
            "d753b8ff-cef0-4f34-8714-0abc98aee078",
            "d23e4209-8c58-4eed-b548-b42aa1619d9a",
            "2b7c1708-81ae-4c88-a04e-92d9bd6df2d8"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688284,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688284,
          "parent_id": "4ce6605a-6537-4752-91ee-3480df7bacb9",
          "parent_table": "block",
          "properties": {
            "title": [["Capture canvas and Save as webM video"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      }
    }
  }
}
26158 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+25898
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "1d53240f-1748-4320-8878-117a11206998": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688281,
          "id": "1d53240f-1748-4320-8878-117a11206998",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688281,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "name = \"CanvasCapture\"; // Placed into the Mux and Write Application Name fields of the WebM header\nquality = 0.7; // good quality 1 Best < 0.7 ok to poor\nfps = 30; // I have tried all sorts of frame rates and all seem to work\n          // Do some test to workout what your machine can handle as there\n          // is a lot of variation between machines.\nvar video = new Groover.Video(fps,quality,name)\nfunction capture(){\n    if(video.timecode < 5000){ // 5 seconds\n         setTimeout(capture,video.frameDelay);             \n    }else{\n         var videoElement = document.createElement(\"video\");\n         videoElement.src = URL.createObjectURL(video.toBlob());\n         document.body.appendChild(videoElement);\n         video = undefined; // DeReference as it is memory hungry.\n         return;\n    }\n    // first frame sets the video size\n    video.addFrame(canvas); // Add current canvas frame\n}\ncapture(); // start capture"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "227fa77d-624c-441d-9801-1d7c998609a6": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "7d650957-f574-48d4-85d0-f1426726d652",
            "ba65754e-de34-461e-b1e1-560e2d6309e4",
            "db570444-b7a8-4c65-af50-7de125251743",
            "4ce6605a-6537-4752-91ee-3480df7bacb9",
            "43473e47-27d0-430a-914d-cd63a767322a",
            "c37198be-d8f3-48ef-8bfc-2cebe79b5d8b",
            "041fccae-eb96-4fce-9577-0aaf8da6dad2",
            "0d20929d-b856-4186-bfed-fbeecbb675d5",
            "28d114e4-4088-44fc-827c-5f73d6238ff8",
            "69ada749-d571-44f8-9e7e-47f98efde9a1",
            "dd776e0e-e228-4dd6-99b4-439d20e57076",
            "15ffc166-5db0-493f-b264-5df513042ee7",
            "55c84186-8698-41c9-8d2d-873c9b4a19c9",
            "e6a83a07-a607-45f6-8849-92715cb6dc6b",
            "90e27c41-8789-4f04-99f3-a04940f3821a",
            "d29786c7-8259-4e77-8b8c-65265f7b95e3",
            "de5b9aa7-4f44-4592-b8f3-47684b3408b3",
            "ac5cc01d-563d-4c52-a360-2801411c5860",
            "bdca4d70-e7e6-44fe-9570-6e68527f05d6"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949612631,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "227fa77d-624c-441d-9801-1d7c998609a6",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1570605000000,
          "parent_id": "04728687-1a4a-4462-8e20-53bfc46354c2",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential HTML5 Canvas"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 71
        }
      },
      "2b7c1708-81ae-4c88-a04e-92d9bd6df2d8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688283,
          "id": "2b7c1708-81ae-4c88-a04e-92d9bd6df2d8",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688283,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "var Groover = (function(){\n    // ensure webp is supported \n    function canEncode(){\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = 8;\n        canvas.height = 8;\n        return canvas.toDataURL(\"image/webp\",0.1).indexOf(\"image/webp\") > -1;\n    }\n    if(!canEncode()){\n        return undefined;\n    }    \n    var webmData = null;\n    var clusterTimecode = 0;\n    var clusterCounter = 0;\n    var CLUSTER_MAX_DURATION = 30000;\n    var frameNumber = 0;\n    var width;\n    var height;\n    var frameDelay;\n    var quality;\n    var name;\n    const videoMimeType = \"video/webm\"; // the only one.\n    const frameMimeType = 'image/webp'; // can be no other\n    const S = String.fromCharCode;\n    const dataTypes = {\n        object : function(data){ return toBlob(data);},\n        number : function(data){ return stream.num(data);},\n        string : function(data){ return stream.str(data);},\n        array  : function(data){ return data;}, \n        double2Str : function(num){\n            var c = new Uint8Array((new Float64Array([num])).buffer);\n            return S(c[7]) + S(c[6]) + S(c[5]) + S(c[4]) + S(c[3]) + S(c[2]) + S(c[1]) + S(c[0]);\n        }\n    };    \n   \n    const stream = {\n        num : function(num){ // writes int\n            var parts = [];\n            while(num > 0){ parts.push(num & 0xff); num = num >> 8; }\n            return new Uint8Array(parts.reverse());\n        },\n        str : function(str){ // writes string\n            var i, len, arr;\n            len = str.length;\n            arr = new Uint8Array(len);\n            for(i = 0; i < len; i++){arr[i] = str.charCodeAt(i);}\n            return arr;\n        },\n        compInt : function(num){ // could not find full details so bit of a guess\n            if(num < 128){       // number is prefixed with a bit (1000 is on byte 0100 two, 0010 three and so on)\n                num += 0x80;\n                return new Uint8Array([num]);\n            }else\n            if(num < 0x4000){\n                num += 0x4000;\n                return new Uint8Array([num>>8, num])\n            }else\n            if(num < 0x200000){\n                num += 0x200000;\n                return new Uint8Array([num>>16, num>>8, num])\n            }else\n            if(num < 0x10000000){\n                num += 0x10000000;\n                return new Uint8Array([num>>24, num>>16, num>>8, num])\n            }            \n        }\n    }\n    const ids = { // header names and values\n        videoData          : 0x1a45dfa3, \n        Version            : 0x4286,\n        ReadVersion        : 0x42f7,\n        MaxIDLength        : 0x42f2,\n        MaxSizeLength      : 0x42f3,\n        DocType            : 0x4282,\n        DocTypeVersion     : 0x4287,\n        DocTypeReadVersion : 0x4285,\n        Segment            : 0x18538067,\n        Info               : 0x1549a966,\n        TimecodeScale      : 0x2ad7b1,\n        MuxingApp          : 0x4d80,\n        WritingApp         : 0x5741,\n        Duration           : 0x4489,\n        Tracks             : 0x1654ae6b,\n        TrackEntry         : 0xae,\n        TrackNumber        : 0xd7,\n        TrackUID           : 0x63c5,\n        FlagLacing         : 0x9c,\n        Language           : 0x22b59c,\n        CodecID            : 0x86,\n        CodecName          : 0x258688,\n        TrackType          : 0x83,\n        Video              : 0xe0,\n        PixelWidth         : 0xb0,\n        PixelHeight        : 0xba,\n        Cluster            : 0x1f43b675,\n        Timecode           : 0xe7,\n        Frame              : 0xa3,\n        Keyframe           : 0x9d012a,\n        FrameBlock         : 0x81,\n    };\n    const keyframeD64Header = '\\x9d\\x01\\x2a'; //VP8 keyframe header 0x9d012a\n    const videoDataPos = 1; // data pos of frame data header\n    const defaultDelay = dataTypes.double2Str(1000/25);\n    const header = [  // structure of webM header/chunks what ever they are called.\n        ids.videoData,[\n            ids.Version, 1,\n            ids.ReadVersion, 1,\n            ids.MaxIDLength, 4,\n            ids.MaxSizeLength, 8,\n            ids.DocType, 'webm',\n            ids.DocTypeVersion, 2,\n            ids.DocTypeReadVersion, 2\n        ],\n        ids.Segment, [\n            ids.Info, [\n                ids.TimecodeScale, 1000000,\n                ids.MuxingApp, 'Groover',\n                ids.WritingApp, 'Groover',\n                ids.Duration, 0\n            ],\n            ids.Tracks,[\n                ids.TrackEntry,[\n                    ids.TrackNumber, 1,\n                    ids.TrackUID, 1,\n                    ids.FlagLacing, 0,     // always o\n                    ids.Language, 'und',   // undefined I think this means\n                    ids.CodecID, 'V_VP8',  // These I think must not change\n                    ids.CodecName, 'VP8',  // These I think must not change\n                    ids.TrackType, 1,\n                    ids.Video, [\n                        ids.PixelWidth, 0,\n                        ids.PixelHeight, 0\n                    ]\n                ]\n            ]\n        ]\n    ];    \n    function getHeader(){\n        header[3][2][3] = name;\n        header[3][2][5] = name;\n        header[3][2][7] =  dataTypes.double2Str(frameDelay);\n        header[3][3][1][15][1] =  width;\n        header[3][3][1][15][3] =  height;\n        function create(dat){\n            var i,kv,data;\n            data = [];\n            for(i = 0; i < dat.length; i += 2){\n                kv = {i : dat[i]};\n                if(Array.isArray(dat[i + 1])){\n                    kv.d = create(dat[i + 1]);\n                }else{\n                    kv.d = dat[i + 1];\n                }\n                data.push(kv);\n            }\n            return data;\n        }\n        return create(header);\n    }\n    function addCluster(){\n        webmData[videoDataPos].d.push({ i: ids.Cluster,d: [{ i: ids.Timecode, d: Math.round(clusterTimecode)}]}); // Fixed bug with Round\n        clusterCounter = 0;\n    }\n    function addFrame(frame){\n        var VP8, kfS,riff;\n        riff = getWebPChunks(atob(frame.toDataURL(frameMimeType, quality).slice(23)));\n        VP8 = riff.RIFF[0].WEBP[0];\n        kfS = VP8.indexOf(keyframeD64Header) + 3;\n        frame = {\n            width: ((VP8.charCodeAt(kfS + 1) << 8) | VP8.charCodeAt(kfS)) & 0x3FFF,\n            height: ((VP8.charCodeAt(kfS + 3) << 8) | VP8.charCodeAt(kfS + 2)) & 0x3FFF,\n            data: VP8,\n            riff: riff\n        };\n        if(clusterCounter > CLUSTER_MAX_DURATION){\n            addCluster();            \n        }\n        webmData[videoDataPos].d[webmData[videoDataPos].d.length-1].d.push({\n            i: ids.Frame, \n            d: S(ids.FrameBlock) + S( Math.round(clusterCounter) >> 8) +  S( Math.round(clusterCounter) & 0xff) + S(128) + frame.data.slice(4),\n        });\n        clusterCounter += frameDelay;        \n        clusterTimecode += frameDelay;\n        webmData[videoDataPos].d[0].d[3].d = dataTypes.double2Str(clusterTimecode);\n    }\n    function startEncoding(){\n        frameNumber = clusterCounter = clusterTimecode = 0;\n        webmData  = getHeader();\n        addCluster();\n    }    \n    function toBlob(vidData){\n        var data,i,vData, len;\n        vData = [];\n        for(i = 0; i < vidData.length; i++){\n            data = dataTypes[typeof vidData[i].d](vidData[i].d);\n            len  = data.size || data.byteLength || data.length;\n            vData.push(stream.num(vidData[i].i));\n            vData.push(stream.compInt(len));\n            vData.push(data)\n        }\n        return new Blob(vData, {type: videoMimeType});\n    }\n    function getWebPChunks(str){\n        var offset, chunks, id, len, data;\n        offset = 0;\n        chunks = {};\n        while (offset < str.length) {\n            id = str.substr(offset, 4);\n            // value will have top bit on (bit 32) so not simply a bitwise operation\n            // Warning little endian (Will not work on big endian systems)\n            len = new Uint32Array(\n                new Uint8Array([\n                    str.charCodeAt(offset + 7),\n                    str.charCodeAt(offset + 6),\n                    str.charCodeAt(offset + 5),\n                    str.charCodeAt(offset + 4)\n                ]).buffer)[0];\n            id = str.substr(offset, 4);\n            chunks[id] = chunks[id] === undefined ? [] : chunks[id];\n            if (id === 'RIFF' || id === 'LIST') {\n                chunks[id].push(getWebPChunks(str.substr(offset + 8, len)));\n                offset += 8 + len;\n            } else if (id === 'WEBP') {\n                chunks[id].push(str.substr(offset + 8));\n                break;\n            } else {\n                chunks[id].push(str.substr(offset + 4));\n                break;\n            }\n        }\n        return chunks;\n    }\n    function Encoder(fps, _quality = 0.8, _name = \"Groover\"){ \n        this.fps = fps;\n        this.quality = quality = _quality;\n        this.frameDelay = frameDelay = 1000 / fps;\n        this.frame = 0;\n        this.width = width = null;\n        this.timecode = 0;\n        this.name = name = _name;\n    }\n    Encoder.prototype = {\n        addFrame : function(frame){\n            if('canvas' in frame){\n                frame = frame.canvas;    \n            }\n            if(width === null){\n                this.width = width = frame.width,\n                this.height = height = frame.height\n                startEncoding();\n            }else\n            if(width !== frame.width || height !== frame.height){\n                throw RangeError(\"Frame size error. Frames must be the same size.\");\n            }            \n            addFrame(frame);   \n            this.frame += 1;\n            this.timecode = clusterTimecode;\n        },        \n        toBlob : function(){\n            return toBlob(webmData);\n        }\n    }\n    return {\n        Video: Encoder,\n    }\n})()"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "4ce6605a-6537-4752-91ee-3480df7bacb9": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "776dcd21-66d6-4075-931b-bc829bc864b0",
            "ec39f3c4-0c6d-42dd-97ae-0fa7ba650bfb",
            "8a98b36a-4ebc-4775-a31f-8cb8c5e2ea8f",
            "d39f9af2-3d53-42aa-8803-148d26582f7c",
            "d869e996-275e-4b69-bee6-3ead2b9e3bf1"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949680000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "4ce6605a-6537-4752-91ee-3480df7bacb9",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551950040000,
          "parent_id": "227fa77d-624c-441d-9801-1d7c998609a6",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["Media types and the canvas"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 40
        }
      },
      "7cb42b3d-f785-48b7-ab6c-ee8d55412583": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688281,
          "id": "7cb42b3d-f785-48b7-ab6c-ee8d55412583",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688281,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "title": [["Example capture and play canvas"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "9426c5d3-f19e-407f-a344-96be24c27dcb": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688278,
          "id": "9426c5d3-f19e-407f-a344-96be24c27dcb",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688278,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Creating a WebM video from canvas frames and playing in canvas, or upload, or downloading."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "c81b43de-2eb4-40be-92b4-5e4ab00702e1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688283,
          "id": "c81b43de-2eb4-40be-92b4-5e4ab00702e1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688283,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "title": [
              ["This was inspired by "],
              ["Wammy", [["a", "https://github.com/antimatter15/whammy"]]],
              [
                " but is a complete rewrite with encode as you go methodology, greatly reducing the memory required during capture. Can capture more than 30 seconds better data, handling algorithms."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "d23e4209-8c58-4eed-b548-b42aa1619d9a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688283,
          "id": "d23e4209-8c58-4eed-b548-b42aa1619d9a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688283,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "title": [
              ["The webM encoder inspired by "],
              [
                "Whammy: A Real Time Javascript WebM",
                [["a", "https://github.com/antimatter15/whammy"]]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "d5e6fadd-80f3-4be3-85f7-1842f1dc8e43": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688281,
          "id": "d5e6fadd-80f3-4be3-85f7-1842f1dc8e43",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688281,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Rather than put in a huge effort only to be rejected, this is a quick insert to see if acceptable. Will Give full details if accepted. Also include additional capture options for better HD capture rates (removed from this version, Can capture HD 1080 at 50fps on good machines.)"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "d753b8ff-cef0-4f34-8714-0abc98aee078": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688283,
          "id": "d753b8ff-cef0-4f34-8714-0abc98aee078",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688283,
          "parent_id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Note frames are encoded into webP images. Only Chrome supports webP canvas encoding. For other browsers (Firefox and Edge) you will need to use a 3rd party webP encoder such as Libwebp Javascript Encoding WebP images via Javascript is slow. (will include addition of raw webp images support if accepted)."
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "quote",
          "version": 1
        }
      },
      "d869e996-275e-4b69-bee6-3ead2b9e3bf1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "9426c5d3-f19e-407f-a344-96be24c27dcb",
            "7cb42b3d-f785-48b7-ab6c-ee8d55412583",
            "1d53240f-1748-4320-8878-117a11206998",
            "d5e6fadd-80f3-4be3-85f7-1842f1dc8e43",
            "c81b43de-2eb4-40be-92b4-5e4ab00702e1",
            "d753b8ff-cef0-4f34-8714-0abc98aee078",
            "d23e4209-8c58-4eed-b548-b42aa1619d9a",
            "2b7c1708-81ae-4c88-a04e-92d9bd6df2d8"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1551949688284,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "d869e996-275e-4b69-bee6-3ead2b9e3bf1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551949688284,
          "parent_id": "4ce6605a-6537-4752-91ee-3480df7bacb9",
          "parent_table": "block",
          "properties": {
            "title": [["Capture canvas and Save as webM video"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 7
        }
      }
    },
    "space": {}
  }
}
