2738 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/syncRecordValues
Body:+162
{
  "requests": [
    {
      "pointer": {
        "table": "block",
        "id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60"
      },
      "version": -1
    }
  ]
}
Response:+2486
{
  "recordMap": {
    "block": {
      "f8374e53-6d99-4a40-bac9-1bd872d8eb60": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "59375cd4-a18f-4513-b574-f4d5162446c1",
            "e0f46734-30d8-4a6b-98ae-7792c9789f03",
            "37f03dea-1e1d-4de7-87c4-85872ffb37a2",
            "9e7d1f47-2007-4466-bc4d-279367b75cbd",
            "1018f3ef-bcba-4f64-a8e5-358a154568f0",
            "d27bd733-4ff7-4d1f-9a75-225fa57b38c8",
            "e387d5b1-44a7-49c3-a872-64995ba94e3e",
            "08b88e45-dbbb-41a5-b5aa-79d8bd024e0b",
            "98128b91-c86d-4b54-8876-6d7cdd36d074",
            "9ee4bdb5-f840-4579-a063-93dbc8e05177",
            "783795c3-d17b-4c73-8988-910103a6b3f5",
            "b59ace52-dbb0-424e-840e-8c76f7fffc92",
            "682f6373-a6b2-44b4-ac1a-6021554c7a63",
            "139b4af4-45f0-4f99-b1d8-68ef796b9fde",
            "0cb6552a-f94c-4b6c-98b6-e54c7d8622f2",
            "0c5a62e0-79f6-479c-a362-61d4c4463560",
            "e1f399d1-7435-4fff-b467-bc3747f766b5",
            "7054d2b3-e5c1-4a85-926e-22dbb80a7b55",
            "b942a8c1-ed90-4039-ba95-24bdaddac694",
            "fbff58b6-9b06-4a9f-9e4b-f11c33ae3bde",
            "cf57cd5f-ae9b-4325-9d7e-e9b77fa0c75a",
            "36626e62-c177-4a37-961c-29a9b37082d0",
            "fa4b049e-5699-43c9-bffb-9dda4ade6b8b",
            "1bc8c17d-58cd-47c2-a1e2-5198b88fa138"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432011,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550713860000,
          "parent_id": "9dda7a1a-881c-4c8e-9319-248534575bdb",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Creating a Custom Dragging Behavior with UIDynamicAnimator"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 12
        }
      }
    }
  }
}
61297 noahttpcache
Method: POST
URL: https://www.notion.so/api/v3/loadCachedPageChunk
Body:+166
{
  "page": {
    "id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60"
  },
  "chunkNumber": 0,
  "limit": 50,
  "cursor": {
    "stack": []
  },
  "verticalColumns": false
}
Response:+61037
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "08b88e45-dbbb-41a5-b5aa-79d8bd024e0b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "08b88e45-dbbb-41a5-b5aa-79d8bd024e0b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "@implementation RectangleAttachmentBehavior\n\n- (instancetype)initWithItem:(id<UIDynamicItem>)item point:(CGPoint)point\n{\n    CGFloat frequency = 8.0f;\n    CGFloat damping = 0.6f;\n    self = [super init];\n    if (self)\n    {\n        NSArray <NSValue *> *pointValues = [self attachmentPointValuesForPoint:point];\n        for (NSValue *value in pointValues)\n        {\n            UIAttachmentBehavior *attachment = [[UIAttachmentBehavior alloc]initWithItem:item attachedToAnchor:[value CGPointValue]];\n            attachment.frequency = frequency;\n            attachment.damping = damping;\n            [self addChildBehavior:attachment];\n        }\n    }\n    return self;\n}\n\n- (void)updateAttachmentLocationWithPoint:(CGPoint)point\n{\n    NSArray <NSValue *> *pointValues = [self attachmentPointValuesForPoint:point];\n    for (NSInteger i = 0; i < pointValues.count; i++)\n    {\n        NSValue *pointValue = pointValues[i];\n        UIAttachmentBehavior *attachment = self.childBehaviors[i];\n        attachment.anchorPoint = [pointValue CGPointValue];\n    }\n}\n\n- (NSArray <NSValue *> *)attachmentPointValuesForPoint:(CGPoint)point\n{\n    CGFloat width = 40.0f;\n    CGFloat height = 40.0f;\n    \n    CGPoint topLeft = CGPointMake(point.x - width * 0.5, point.y - height * 0.5);\n    CGPoint topRight = CGPointMake(point.x + width * 0.5, point.y - height * 0.5);\n    CGPoint bottomLeft = CGPointMake(point.x - width * 0.5, point.y + height * 0.5);\n    CGPoint bottomRight = CGPointMake(point.x + width * 0.5, point.y + height * 0.5);\n    \n    NSArray <NSValue *> *pointValues = @[[NSValue valueWithCGPoint:topLeft], [NSValue valueWithCGPoint:topRight], [NSValue valueWithCGPoint:bottomLeft], [NSValue valueWithCGPoint:bottomRight]];\n    return pointValues;\n}\n\n@end"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "0c5a62e0-79f6-479c-a362-61d4c4463560": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "0c5a62e0-79f6-479c-a362-61d4c4463560",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "final class DraggableLayout: UICollectionViewFlowLayout\n{\n    // Array that holds dragged index paths\n    var indexPathsForDraggingElements: [IndexPath]?\n    \n    // The dynamic animator that will animate drag behavior\n    var animator: UIDynamicAnimator?\n    \n    // Custom high-level behavior that dictates drag animation\n    var dragBehavior: DragBehavior?\n    \n    // Where dragging starts so can return there once dragging ends\n    var startDragPoint = CGPoint.zero\n    \n    // Bool to keep track if dragging has ended\n    var isFinishedDragging = false\n    \n    \n    // Method to inform layout that dragging has started\n    func startDragging(indexPaths selectedIndexPaths: [IndexPath], from point: CGPoint)\n    {\n        indexPathsForDraggingElements = selectedIndexPaths\n        animator = UIDynamicAnimator(collectionViewLayout: self)\n        animator?.delegate = self\n        \n        // Get all of the draggable attributes but change zIndex so above other cells\n        let draggableAttributes: [UICollectionViewLayoutAttributes] = selectedIndexPaths.flatMap {\n            let attribute = super.layoutAttributesForItem(at: $0)\n            attribute?.zIndex = 1\n            return attribute\n        }\n        \n        startDragPoint = point\n        \n        // Add them to high-level behavior\n        dragBehavior = DragBehavior(items: draggableAttributes, point: point)\n        \n        // Add high-level behavior to animator\n        animator?.addBehavior(dragBehavior!)\n    }\n    \n    func updateDragLocation(_ point: CGPoint)\n    {\n        // Tell high-level behavior that point has updated\n        dragBehavior?.updateDragLocation(with: point)\n    }\n    \n    func endDragging()\n    {\n        isFinishedDragging = true\n        \n        // Return high-level behavior to starting point\n        dragBehavior?.updateDragLocation(with: startDragPoint)\n    }\n    \n    func clearDraggedIndexPaths()\n    {\n        // Reset state for next drag event\n        animator = nil\n        indexPathsForDraggingElements = nil\n        isFinishedDragging = false\n    }\n    \n    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]?\n    {\n        let existingAttributes: [UICollectionViewLayoutAttributes] = super.layoutAttributesForElements(in: rect) ?? []\n        var allAttributes = [UICollectionViewLayoutAttributes]()\n        \n        // Get normal flow layout attributes for non-drag items\n        for attributes in existingAttributes\n        {\n            if (indexPathsForDraggingElements?.contains(attributes.indexPath) ?? false) == false\n            {\n                allAttributes.append(attributes)\n            }\n        }\n        \n        // Add dragged item attributes by asking animator for them\n        if let animator = self.animator\n        {\n            let animatorAttributes: [UICollectionViewLayoutAttributes] = animator.items(in: rect).flatMap { $0 as? UICollectionViewLayoutAttributes }\n            allAttributes.append(contentsOf: animatorAttributes)\n        }\n        return allAttributes\n    }\n}\nextension DraggableLayout: UIDynamicAnimatorDelegate\n{\n    func dynamicAnimatorDidPause(_ animator: UIDynamicAnimator)\n    {\n        // Animator has paused and done dragging; reset state\n        guard isFinishedDragging else { return }\n        clearDraggedIndexPaths()\n    }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "0cb6552a-f94c-4b6c-98b6-e54c7d8622f2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "0cb6552a-f94c-4b6c-98b6-e54c7d8622f2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Swift"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "1018f3ef-bcba-4f64-a8e5-358a154568f0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "1018f3ef-bcba-4f64-a8e5-358a154568f0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Swift"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 5
        }
      },
      "139b4af4-45f0-4f99-b1d8-68ef796b9fde": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "139b4af4-45f0-4f99-b1d8-68ef796b9fde",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Now with our behaviors in place, the next step is to add them to our collection view when. Because normally we want a standard grid layout we can subclass "
              ],
              ["UICollectionViewFlowLayout", [["c"]]],
              [
                " and only change attributes when dragging. We do this mainly through overriding "
              ],
              ["layoutAttributesForElementsInRect", [["c"]]],
              [" and using the "],
              ["UIDynamicAnimator's", [["c"]]],
              [" convenience method "],
              ["itemsInRect", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "1bc8c17d-58cd-47c2-a1e2-5198b88fa138": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432011,
          "id": "1bc8c17d-58cd-47c2-a1e2-5198b88fa138",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432011,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [
              ["For more information "],
              [
                "2013 WWDC Session “Advanced Techniques with UIKit Dynamics”",
                [["a", "https://developer.apple.com/videos/play/wwdc2013/221/"]]
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "3626edc1-bd04-4431-afdd-c89648a7050f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "a5af1143-929b-47c9-9f11-f0339ebc9527",
            "507d8674-6569-42dd-8593-e80c9a53fdd8",
            "8c7bb37f-5fb6-45cd-b737-2eafb1a5cad2",
            "378b8c4b-615f-49cc-b272-6560a0b45048",
            "9aa8d1a9-074b-4599-9180-730b73cffa87",
            "f66ddbbe-f64d-49b6-b58c-064a51f37ad0",
            "8b631b09-13dd-423c-badd-4f689f60482c",
            "c0d09481-5218-4dda-bfe6-545ea61abcd8",
            "617ce87f-342c-4508-8060-64e96ea6829f",
            "e7e31a29-bf79-49d6-ba44-e09d1c896f24",
            "b7001b29-07c4-4eb6-a871-c66ebe2f51b1",
            "ff52502a-1a62-4615-9240-59266795e3cb",
            "f61c20e3-b986-483f-b8a1-4e7e26e443f7",
            "bf302578-5638-4b71-90e4-b0285c8d6b5b",
            "c21a56d6-07e0-4613-9800-14573c1e52e2",
            "8f113f49-b67b-443b-8457-519cda2513be",
            "e53c314d-8a34-4c36-8e8d-2f9f5c463738",
            "508a2ecb-183a-4fb4-b7e9-5dc621630efd",
            "2d98a507-fb06-4608-aa93-e65f9befc841",
            "ef1171bc-6dc0-4b79-a175-2ec143d37689",
            "e1a08c1c-c84f-4c65-ad80-3f4273841b57",
            "4b42e68c-0953-487c-8cf0-d8946283c2ea",
            "ac4e65ca-494a-4bc4-8e84-6508401d0760",
            "167fa3ac-e5a1-4223-9bf6-4451084a3bd2",
            "458606bd-6213-46bd-aaab-dcb8dbc1d5fc",
            "586fdbe7-c83e-44ea-9d8f-78e81c746dd3",
            "3a20abc9-acc0-4dbb-9b73-b4cbb4f1a829",
            "ab4dcbe6-9aca-4b6c-8649-f4bc5f82ebb4",
            "70285e23-8a3d-4791-9548-c1fb5ea195dc",
            "6322ab3e-c9a3-49a0-8146-3403ca605342",
            "b0d929fa-86c7-42fa-be42-10d70a6eecc3",
            "ef263014-bda3-40f6-bf71-d92405ecc883",
            "72b9755c-2fb0-40e9-bbe1-9e1dc991a815",
            "c05487c7-8854-4aec-8625-17129611e0b3",
            "4bb5da49-2abd-458e-a752-28b6f09f8259",
            "773b6f96-ffaf-4351-9c90-f5ce8c465bf3",
            "0ff3c3ad-ebbf-49a8-9738-406cae0aa48f",
            "376a847e-7f0c-468c-9e79-0f0948997637",
            "bd6930c5-69f6-41e6-97fd-c9dd073c68ba",
            "a7f937f4-36c0-42f5-8ab8-c9d208148af4",
            "f201afae-b539-4cee-a0e4-ee8405dcf919",
            "09f0e272-51ac-432f-a485-5f272ce058d6",
            "943929e1-0314-4523-a623-310918ccc622",
            "2ea198f9-ccd0-48dc-8c00-885293d6cd73",
            "8ec08eef-b3bf-4ed2-831e-f121a18abf8b",
            "154495b9-532b-4074-985f-059c30a6ff25",
            "cd6e656a-0998-4859-bcf6-635137b30854",
            "5a2590eb-a5eb-4d4d-9bb8-734f29f98b62",
            "b3127aad-3837-47cb-96f5-ea111e47a2a6",
            "464e82a4-9e05-4202-a5c5-14dceff8619b",
            "b0ed0a5d-7d43-46c4-998d-37710c86435c",
            "bb3b567e-bf4c-4f1a-b3c8-bbaeb5935cfd",
            "a7c90006-fcd8-4f9c-9129-07957fc6d7b8",
            "364d948a-b32a-4a45-b1e3-2e149eca790f",
            "1de88999-582e-454f-bf00-b62aa1e8c6c7",
            "756f49db-23fe-4784-bc16-345d72334010",
            "fbb0fcc5-2edc-4a7f-9db9-8f721d1d618e",
            "3e9fd345-ede2-4221-ab29-02a29f71d19c",
            "621d7607-1161-47a2-a2e2-85dd4b437d1d",
            "e78f1ff3-aef3-4dbe-b387-0d3349d5456e",
            "bc18d381-67f8-4027-ae9b-966c7d186f67",
            "9ba8f818-f42f-4eb2-a68e-67377a9543ce",
            "bdd611c5-cbce-4785-9d84-d23018d63eab",
            "e0be90a3-a70f-45c4-9fcf-e95f41050a71",
            "9cb08a2a-428d-4197-9569-66e693d603d8",
            "31ec28e4-4764-4c70-9411-216e1e5b70dc",
            "c908142e-b1bd-4464-8543-44a43929be0f",
            "daadaa42-7b59-4a17-b3af-0310c254d2e5",
            "0ec28f74-9022-4ac7-8d84-a19a3494f947",
            "f4e0fc1e-07d3-4cbd-8e65-bcefd0031b76",
            "d7cd40ee-c8db-49e1-a082-7f44bb1a37bb",
            "1a26d681-ef13-46e2-aeb0-df99b8a48186",
            "ec3b4c9d-97ac-484c-b205-5fe729490cae",
            "30bf9ef1-4efd-4efb-af05-4da373b3c272",
            "e8d0a3b9-30c0-4b30-b014-fea6a3f1c1c1",
            "9594d403-0ff2-42cc-a0e4-6075d4f869e1",
            "a4789cd8-edb8-4ea9-a217-42a296586739",
            "4a1fef4b-2ac9-4300-bf4b-425a6b82f9a7",
            "f3d87c1a-40a6-4b95-8592-90eaaaa9db6e",
            "9b7effe3-3c92-47b3-890a-34980fc6c2ba",
            "c446ba32-f064-4a2c-865a-fe679afd24f2",
            "de060d2a-5edd-4d74-aa93-9a10f5108cbb",
            "429a9b47-5f46-400a-b2c8-4915d2928b9b",
            "37452658-309f-4211-997e-ba7770e870b5",
            "7f229db5-64ee-45de-a6ab-0d61f675f6ff",
            "2c543993-7ee2-4035-9f63-ddd4de543fde",
            "25182a98-2d66-4298-8b39-71e23ab1ece4",
            "5265ac03-99db-4793-939c-1f4527e3dddc",
            "652de3ae-3b9e-4364-b4df-f861bab62742",
            "903fb5dd-a312-4f4e-80d7-612320135a0f",
            "f1c74aaa-2f08-4bc4-8519-01d4ca0bb7d5",
            "fd4852d9-10a3-457e-87aa-9be417584c87",
            "cd185718-00e1-4055-82db-654c8985c5a6",
            "0e3a98fa-3804-44cc-bd1b-1f55a9eae49d",
            "0a0f8fe3-ca06-4e0c-bf39-1e7c20e930d7",
            "cdea920c-ea3f-4c82-a7c0-54b300b11844",
            "a611ae19-6fe2-41db-84b2-aaf3937f742a",
            "59964cbb-2130-467c-aea4-81a2e963277d",
            "356a18ee-c88b-4763-be3f-36bfe1fbdf1a",
            "ac1527ac-26d8-4320-9652-d9d201b17026",
            "4ea4fd2d-3ed9-4da9-bbdc-00d277b59da1",
            "4c28c4b4-4b5c-4bee-a36e-0943b23b8fdc",
            "d5c372a9-5d4c-45f8-987c-a4f4c3727526",
            "c1d49004-2113-43e5-bec7-521bc6eda162",
            "e097ad83-05f2-4ba8-bac4-71c4d0b9dae8",
            "e145631c-a5c5-420a-a66a-8644c1a84d6c",
            "a86b05ef-a1e2-4169-91f8-3a6ffc7c127c",
            "412bcab7-8ba9-49f8-b92b-85545a0eff2a",
            "01d9ad72-5b37-4e4d-96ef-12541877ae55",
            "13746bb4-8e21-4cac-b126-fa1053d99ce5",
            "b5a324d7-bc78-4248-862e-18d76525e6ff",
            "ec2465ef-1d99-4aa2-aed0-12926b09bd1b",
            "a8d33480-b9e2-4db7-9e65-3241d9234f91",
            "38e6ff51-74c3-4a6e-8bb8-337b4df809f1",
            "816f799b-b145-4080-8c7b-59d441ea7611",
            "cffa9234-a8a5-42ea-a239-318800b722af",
            "38e1567f-9314-412d-8751-09ef7aaaee15",
            "eebd19bb-b45b-41c9-80e3-bddca0462d95",
            "9163750c-05c0-41a5-a347-b1d61085b7c8",
            "d219b2ed-8b80-43df-af87-c7056d275085",
            "8b055c18-65b8-44bd-93de-3f6853c8e88d",
            "2271c0f0-7b44-4845-a940-9b148a77ca5e",
            "3f86d524-b4e9-4909-972c-1b697a79898d",
            "48aa8251-6704-499e-9d43-6b571e771d32",
            "700d27b7-5d4b-47ff-abde-321ded732d61",
            "ecdeab5c-5d89-4f07-8a9d-3425f5e26e44",
            "268bd7f2-babb-4bdb-84f5-0dbf14e493ec",
            "af5267c7-21cb-4ae5-8a18-37c55c089715",
            "65adc4e0-7172-4277-a751-e6fbc60e5556",
            "61129e40-4b30-4080-9c05-fddea2874917",
            "8bb6db06-110e-4da5-a873-03004d0b018f",
            "e12aa083-07ca-4400-bddd-f814c6408490",
            "95bf2b82-5a26-44ab-8811-2b793708838f",
            "04b33a50-b352-42af-b013-4bb7d6cc53a5",
            "ba3eb74a-5a9c-470f-8570-b42a3e4615d2",
            "4d0bc171-666d-4011-91cc-35ada0815e6c",
            "89a8006e-e11e-41f0-be2a-f75b45cac04b",
            "56c78c8b-9070-4aac-925d-8a7d9ad40920",
            "847c272f-114e-41a8-ab2c-710754cbdf1a",
            "9e8d1004-e1d8-4e20-a199-f4e926c84945",
            "95d92daa-9086-4b6d-84fe-55e366e8d733",
            "44263bf7-2a18-423c-83fd-12b7304c9fb2",
            "7ce14f86-29be-46b5-b685-4f6d94259e09",
            "9574d17f-c1a7-42a7-9bfd-4aa1b5a11c24",
            "09f79be5-0207-46af-9894-b012f4cd8b28",
            "c0eec5a3-fda6-43b2-89c0-e6e298abbd4a",
            "b5f1c3f6-93c9-445d-882e-7e0b2821589a",
            "95004bf6-2de3-43cd-9c8f-148f5c80a5c5",
            "ac103a8f-5ae8-46f2-b260-680041442621",
            "f8959fe8-c6c0-43bf-b119-a204d400f7e3",
            "92332108-ac3a-4416-851e-b74328cd6cd3",
            "e9b75dc1-aa91-4870-a97c-903b327e12bc",
            "df86b4df-37ba-4d5e-bd83-80ef00c5983e",
            "12be2d52-9f43-4af3-9391-97b4c872653a",
            "e10567d9-4820-4d19-a89e-64d790f8a6a2",
            "c1a44650-6bd4-4064-9ab2-e370661c09f2",
            "6c0c16e2-cabf-4700-a91e-ff98681e30a4",
            "37a76baf-c0cb-4fca-9d29-52c69486b76a",
            "027db969-1832-48b0-9cae-5c215b45db87",
            "da6dea88-3208-42b8-9b30-f9d3f2dfb69a",
            "39522883-4ade-49d4-b21e-b7b60a133095",
            "f9664b17-97c8-4e5a-b19e-5027bb4abf2e",
            "f562fd86-1511-4b7b-8b5f-0bc31006abbc",
            "e42d494a-2375-4b37-920c-eab18d7e57e4",
            "afd320bd-3564-4367-9b59-ab9ae1d6a0a9",
            "5a7e3afb-64c2-4a15-8d2e-5f567c36424a",
            "5aa71e1f-99a6-44cb-9027-513bb5538289",
            "6ad358dd-fa86-41cc-ab80-7e138d125431",
            "6ea10b66-18a6-4bce-a7e3-5e6d48566644",
            "09a50530-90ab-4b4d-a937-6b974f063191",
            "56eeb7f8-8740-470c-b6ca-9ced00716b55",
            "acf782e7-6803-4e63-931f-895b6743a588",
            "e8c7e534-6b29-4776-91ff-1593e9bd6ff7",
            "cbac01a1-36d1-413c-af76-05b73711fafe",
            "468b0602-725a-4cb6-810e-ca88f35bd501",
            "7a56372d-fe11-400f-a027-df8c53584a7f",
            "a9319a1a-6ef7-4f69-9827-423bba1ebc3c",
            "71f71c73-6193-4e89-a63b-b7662d6e178a",
            "afa7082f-8037-499c-9c25-d8de44aeabb6",
            "edceef9b-446f-49b6-801b-444b155bb56c",
            "bc0a3c54-c970-4e70-9523-e069ba074e1a",
            "e430e55a-3d8e-4e3c-9869-9ce1b53e6fa4",
            "c65b7e00-f791-4f60-b501-fae4b825a166",
            "57b1a2aa-a531-4ad8-82ef-726a4cacdc88",
            "43538d33-f7fe-45b2-8ba7-bb5cf81a0ebb",
            "2b404ec5-be2d-4675-ab68-6fedcdca3bab",
            "25b599fb-7044-4e3c-a603-f884a6da9616",
            "80878da6-79ac-4ae3-b4ee-719e3e215987",
            "6fdc376a-c2bb-4c7c-abe1-f8dcffd133b9",
            "28e0a317-2515-4bb6-9408-4708535f868a",
            "380fc5fa-f930-4b28-8a76-819026b24346",
            "4e73988d-2cf8-4e3c-8ffc-6b2186d1dfd1",
            "521f8346-9197-4556-87c6-5fac50ff72d6",
            "9dda7a1a-881c-4c8e-9319-248534575bdb",
            "19cebc81-0504-47ae-87a1-26efb4712729",
            "63b092a2-190c-4b6d-b4c5-f227f136fbd9",
            "84329087-8614-4d9a-aa20-be012394b2e9",
            "32d11ee6-213b-4d34-9db9-a19e2d5e209c",
            "f381714a-782f-406a-ae00-cfa22899f875",
            "74e493df-4b36-450e-8b37-ed5523b6900d",
            "8b6ab10a-9ab5-4df1-b6a1-8d18cb9d3d8a",
            "fcb73185-91d1-4210-adea-dbbd2857920b",
            "05ad15e6-c0d6-4e79-b95b-c4dc5f834109",
            "b496eb6d-a677-4e1f-94a9-96f5881118b9",
            "fb26e620-8732-4182-8890-8cde57288290",
            "1c7d0afd-964c-4b18-a54f-77c4ea09f8f2",
            "e1621bc4-3129-41fe-8272-9f98ee34095c",
            "4e7f3250-f994-421d-ae43-93e687dcec25",
            "6b3e628c-8baa-405b-9e95-ac4553904020",
            "32466aa8-da8e-4c68-905d-b787606ff491",
            "05f80628-5dd6-4542-9fa7-02369c6aa696",
            "a6677ea4-b47a-4e94-9e0d-7d3f33d59c4d"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550394106834,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "3626edc1-bd04-4431-afdd-c89648a7050f",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1571298000000,
          "parent_id": "93230d97-d1d1-4ec4-bc18-7322135ae6ec",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [["Essential iOS"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 337
        }
      },
      "36626e62-c177-4a37-961c-29a9b37082d0": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "36626e62-c177-4a37-961c-29a9b37082d0",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Objective-C"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "37f03dea-1e1d-4de7-87c4-85872ffb37a2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432007,
          "id": "37f03dea-1e1d-4de7-87c4-85872ffb37a2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432007,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The dragging behavior is produced by combining a low-level behavior that adds a "
              ],
              ["UIAttachmentBehavior", [["c"]]],
              [" to the for corners of a "],
              ["UIDynamicItem", [["c"]]],
              [
                " and a high-level behavior that manages the low-level behavior for a number of "
              ],
              ["UIDynamicItems", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "59375cd4-a18f-4513-b574-f4d5162446c1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432005,
          "id": "59375cd4-a18f-4513-b574-f4d5162446c1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432005,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "This example shows how to create a custom dragging behavior by Subclassing "
              ],
              ["UIDynamicBehavior", [["c"]]],
              [" and subclassing "],
              ["UICollectionViewFlowLayout", [["c"]]],
              [". In the example, we have "],
              ["UICollectionView", [["c"]]],
              [
                " that allows for the selection of multiple items. Then with a long press gesture those items can be dragged in an elastic, “springy” animation driven by a "
              ],
              ["UIDynamicAnimator", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "682f6373-a6b2-44b4-ac1a-6021554c7a63": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "682f6373-a6b2-44b4-ac1a-6021554c7a63",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "@implementation DragBehavior\n\n- (instancetype)initWithItems:(NSArray <id<UIDynamicItem>> *)items point: (CGPoint)point\n{\n    self = [super init];\n    if (self)\n    {\n        for (id<UIDynamicItem> item in items)\n        {\n            RectangleAttachmentBehavior *rectAttachment = [[RectangleAttachmentBehavior alloc]initWithItem:item point:point];\n            [self addChildBehavior:rectAttachment];\n        }\n    }\n    return self;\n}\n\n- (void)updateDragLocationWithPoint:(CGPoint)point\n{\n    for (RectangleAttachmentBehavior *rectAttachment in self.childBehaviors)\n    {\n        [rectAttachment updateAttachmentLocationWithPoint:point];\n    }\n}\n\n@end"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "7054d2b3-e5c1-4a85-926e-22dbb80a7b55": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "7054d2b3-e5c1-4a85-926e-22dbb80a7b55",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "@interface DraggableLayout () <UIDynamicAnimatorDelegate>\n@property (nonatomic, strong) NSArray <NSIndexPath *> *indexPathsForDraggingElements;\n@property (nonatomic, strong) UIDynamicAnimator *animator;\n@property (nonatomic, assign) CGPoint startDragPoint;\n@property (nonatomic, assign) BOOL finishedDragging;\n@property (nonatomic, strong) DragBehavior *dragBehavior;\n@end\n\n@implementation DraggableLayout\n\n- (void)startDraggingWithIndexPaths:(NSArray <NSIndexPath *> *)selectedIndexPaths fromPoint:(CGPoint)point\n{\n    self.indexPathsForDraggingElements = selectedIndexPaths;\n    self.animator = [[UIDynamicAnimator alloc]initWithCollectionViewLayout:self];\n    self.animator.delegate = self;\n    NSMutableArray *draggableAttributes = [[NSMutableArray alloc]initWithCapacity:selectedIndexPaths.count];\n    for (NSIndexPath *indexPath in selectedIndexPaths)\n    {\n        UICollectionViewLayoutAttributes *attributes = [super layoutAttributesForItemAtIndexPath:indexPath];\n        attributes.zIndex = 1;\n        [draggableAttributes addObject:attributes];\n    }\n    self.startDragPoint = point;\n    self.dragBehavior = [[DragBehavior alloc]initWithItems:draggableAttributes point:point];\n    [self.animator addBehavior:self.dragBehavior];\n}\n\n- (void)updateDragLoactionWithPoint:(CGPoint)point\n{\n    [self.dragBehavior updateDragLocationWithPoint:point];\n}\n\n- (void)endDragging\n{\n    self.finishedDragging = YES;\n    [self.dragBehavior updateDragLocationWithPoint:self.startDragPoint];\n}\n\n- (void)clearDraggedIndexPath\n{\n    self.animator = nil;\n    self.indexPathsForDraggingElements = nil;\n    self.finishedDragging = NO;\n}\n\n- (void)dynamicAnimatorDidPause:(UIDynamicAnimator *)animator\n{\n    if (self.finishedDragging)\n    {\n        [self clearDraggedIndexPath];\n    }\n}\n\n- (NSArray<UICollectionViewLayoutAttributes *> *)layoutAttributesForElementsInRect:(CGRect)rect\n{\n    NSArray *existingAttributes = [super layoutAttributesForElementsInRect:rect];\n    NSMutableArray *allAttributes = [[NSMutableArray alloc]initWithCapacity:existingAttributes.count];\n    for (UICollectionViewLayoutAttributes *attributes in existingAttributes)\n    {\n        if (![self.indexPathsForDraggingElements containsObject:attributes.indexPath])\n        {\n            [allAttributes addObject:attributes];\n        }\n    }\n    [allAttributes addObjectsFromArray:[self.animator itemsInRect:rect]];\n    return allAttributes;\n}\n\n@end"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "783795c3-d17b-4c73-8988-910103a6b3f5": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "783795c3-d17b-4c73-8988-910103a6b3f5",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "final class DragBehavior: UIDynamicBehavior\n{\n    init(items: [UIDynamicItem], point: CGPoint)\n    {\n        super.init()\n        items.forEach\n        {\n            let rectAttachment = RectangleAttachmentBehavior(item: $0, point: point)\n            self.addChildBehavior(rectAttachment)\n        }\n    }\n    \n    func updateDragLocation(with point: CGPoint)\n    {\n        // Tell low-level behaviors location has changed\n        self.childBehaviors.flatMap { $0 as? RectangleAttachmentBehavior }.forEach { $0.updateAttachmentLocation(with: point) }\n    }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "98128b91-c86d-4b54-8876-6d7cdd36d074": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "98128b91-c86d-4b54-8876-6d7cdd36d074",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Next we can create the high-level behavior that will combine a number of "
              ],
              ["RectangleAttachmentBehavior", [["c"]]],
              ["."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "9dda7a1a-881c-4c8e-9319-248534575bdb": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "7ea09c37-a71e-4038-aaff-9e44b19acd15",
            "f8374e53-6d99-4a40-bac9-1bd872d8eb60"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442420000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "9dda7a1a-881c-4c8e-9319-248534575bdb",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442900000,
          "parent_id": "3626edc1-bd04-4431-afdd-c89648a7050f",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [["UIKit Dynamics with UICollectionView"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 51
        }
      },
      "9e7d1f47-2007-4466-bc4d-279367b75cbd": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "9e7d1f47-2007-4466-bc4d-279367b75cbd",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "We can begin by creating this low-level behavior, we’ll call "
              ],
              ["RectangleAttachmentBehavior", [["c"]]]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 1
        }
      },
      "9ee4bdb5-f840-4579-a063-93dbc8e05177": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "9ee4bdb5-f840-4579-a063-93dbc8e05177",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Swift"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "b59ace52-dbb0-424e-840e-8c76f7fffc92": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "b59ace52-dbb0-424e-840e-8c76f7fffc92",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Objective-C"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "b942a8c1-ed90-4039-ba95-24bdaddac694": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "b942a8c1-ed90-4039-ba95-24bdaddac694",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Finally, we’ll create a view controller that will create our "
              ],
              ["UICollectionView", [["c"]]],
              [" and handle our long press gesture."]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "text",
          "version": 5
        }
      },
      "cf57cd5f-ae9b-4325-9d7e-e9b77fa0c75a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "cf57cd5f-ae9b-4325-9d7e-e9b77fa0c75a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "final class ViewController: UIViewController\n{\n    // Collection view that displays cells\n    lazy var collectionView: UICollectionView =\n    {\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: DraggableLayout())\n        collectionView.backgroundColor = .white\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        self.view.addSubview(collectionView)\n        collectionView.topAnchor.constraint(equalTo: self.topLayoutGuide.bottomAnchor).isActive = true\n        collectionView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true\n        collectionView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true\n        collectionView.bottomAnchor.constraint(equalTo: self.bottomLayoutGuide.topAnchor).isActive = true\n        \n        return collectionView\n    }()\n    \n    // Gesture that drives dragging\n    lazy var longPress: UILongPressGestureRecognizer =\n    {\n        let longPress = UILongPressGestureRecognizer(target: self, action: #selector(self.handleLongPress(sender:)))\n        return longPress\n    }()\n    \n    // Array that holds selected index paths\n    var selectedIndexPaths = [IndexPath]()\n    \n    override func viewDidLoad()\n    {\n        super.viewDidLoad()\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"Cell\")\n        collectionView.addGestureRecognizer(longPress)\n    }\n    \n    func handleLongPress(sender: UILongPressGestureRecognizer)\n    {\n        guard let draggableLayout = collectionView.collectionViewLayout as? DraggableLayout else { return }\n        let location = sender.location(in: collectionView)\n        switch sender.state\n        {\n        case .began:\n            draggableLayout.startDragging(indexPaths: selectedIndexPaths, from: location)\n        case .changed:\n            draggableLayout.updateDragLocation(location)\n        case .ended, .failed, .cancelled:\n            draggableLayout.endDragging()\n        case .possible:\n            break\n        }\n    }\n}\nextension ViewController: UICollectionViewDelegate, UICollectionViewDataSource\n{\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int\n    {\n        return 1000\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell\n    {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"Cell\", for: indexPath)\n        cell.backgroundColor = .gray\n        if selectedIndexPaths.contains(indexPath) == true\n        {\n            cell.backgroundColor = .red\n        }\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)\n    {\n        // Bool that determines if cell is being selected or unselected\n        let isSelected = !selectedIndexPaths.contains(indexPath)\n        let cell = collectionView.cellForItem(at: indexPath)\n        cell?.backgroundColor = isSelected ? .red : .gray\n        if isSelected\n        {\n            selectedIndexPaths.append(indexPath)\n        }\n        else\n        {\n            selectedIndexPaths.remove(at: selectedIndexPaths.index(of: indexPath)!)\n        }\n    }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 1
        }
      },
      "d27bd733-4ff7-4d1f-9a75-225fa57b38c8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "d27bd733-4ff7-4d1f-9a75-225fa57b38c8",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "final class RectangleAttachmentBehavior: UIDynamicBehavior\n{\n    init(item: UIDynamicItem, point: CGPoint)\n    {\n        // Higher frequency more \"ridged\" formation\n        let frequency: CGFloat = 8.0\n        \n        // Lower damping longer animation takes to come to rest\n        let damping: CGFloat = 0.6\n        \n        super.init()\n        \n        // Attachment points are four corners of item\n        let points = self.attachmentPoints(for: point)\n        \n        let attachmentBehaviors: [UIAttachmentBehavior] = points.map\n        {\n            let attachmentBehavior = UIAttachmentBehavior(item: item, attachedToAnchor: $0)\n            attachmentBehavior.frequency = frequency\n            attachmentBehavior.damping = damping\n            return attachmentBehavior\n        }\n        \n        attachmentBehaviors.forEach\n        {\n            addChildBehavior($0)\n        }\n    }\n    \n    func updateAttachmentLocation(with point: CGPoint)\n    {\n        // Update anchor points to new attachment points\n        let points = self.attachmentPoints(for: point)\n        let attachments = self.childBehaviors.flatMap { $0 as? UIAttachmentBehavior }\n        let pairs = zip(points, attachments)\n        pairs.forEach { $0.1.anchorPoint = $0.0 }\n    }\n    \n    func attachmentPoints(for point: CGPoint) -> [CGPoint]\n    {\n        // Width and height should be close to the width and height of the item\n        let width: CGFloat = 40.0\n        let height: CGFloat = 40.0\n        \n        let topLeft = CGPoint(x: point.x - width * 0.5, y: point.y - height * 0.5)\n        let topRight = CGPoint(x: point.x + width * 0.5, y: point.y - height * 0.5)\n        let bottomLeft = CGPoint(x: point.x - width * 0.5, y: point.y + height * 0.5)\n        let bottomRight = CGPoint(x: point.x + width * 0.5, y: point.y + height * 0.5)\n        let points = [topLeft, topRight, bottomLeft, bottomRight]\n        return points\n    }\n}"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "e0f46734-30d8-4a6b-98ae-7792c9789f03": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432007,
          "id": "e0f46734-30d8-4a6b-98ae-7792c9789f03",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432007,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "source": [["https://i.stack.imgur.com/gIzQu.gif"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "image",
          "version": 5
        }
      },
      "e1f399d1-7435-4fff-b467-bc3747f766b5": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "e1f399d1-7435-4fff-b467-bc3747f766b5",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Objective-C"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 5
        }
      },
      "e387d5b1-44a7-49c3-a872-64995ba94e3e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432008,
          "id": "e387d5b1-44a7-49c3-a872-64995ba94e3e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432008,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Objective-C"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      },
      "f8374e53-6d99-4a40-bac9-1bd872d8eb60": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "59375cd4-a18f-4513-b574-f4d5162446c1",
            "e0f46734-30d8-4a6b-98ae-7792c9789f03",
            "37f03dea-1e1d-4de7-87c4-85872ffb37a2",
            "9e7d1f47-2007-4466-bc4d-279367b75cbd",
            "1018f3ef-bcba-4f64-a8e5-358a154568f0",
            "d27bd733-4ff7-4d1f-9a75-225fa57b38c8",
            "e387d5b1-44a7-49c3-a872-64995ba94e3e",
            "08b88e45-dbbb-41a5-b5aa-79d8bd024e0b",
            "98128b91-c86d-4b54-8876-6d7cdd36d074",
            "9ee4bdb5-f840-4579-a063-93dbc8e05177",
            "783795c3-d17b-4c73-8988-910103a6b3f5",
            "b59ace52-dbb0-424e-840e-8c76f7fffc92",
            "682f6373-a6b2-44b4-ac1a-6021554c7a63",
            "139b4af4-45f0-4f99-b1d8-68ef796b9fde",
            "0cb6552a-f94c-4b6c-98b6-e54c7d8622f2",
            "0c5a62e0-79f6-479c-a362-61d4c4463560",
            "e1f399d1-7435-4fff-b467-bc3747f766b5",
            "7054d2b3-e5c1-4a85-926e-22dbb80a7b55",
            "b942a8c1-ed90-4039-ba95-24bdaddac694",
            "fbff58b6-9b06-4a9f-9e4b-f11c33ae3bde",
            "cf57cd5f-ae9b-4325-9d7e-e9b77fa0c75a",
            "36626e62-c177-4a37-961c-29a9b37082d0",
            "fa4b049e-5699-43c9-bffb-9dda4ade6b8b",
            "1bc8c17d-58cd-47c2-a1e2-5198b88fa138"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432011,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550713860000,
          "parent_id": "9dda7a1a-881c-4c8e-9319-248534575bdb",
          "parent_table": "block",
          "properties": {
            "title": [
              ["Creating a Custom Dragging Behavior with UIDynamicAnimator"]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "page",
          "version": 12
        }
      },
      "fa4b049e-5699-43c9-bffb-9dda4ade6b8b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "fa4b049e-5699-43c9-bffb-9dda4ade6b8b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "language": [["Plain Text"]],
            "title": [
              [
                "@interface ViewController () <UICollectionViewDelegate, UICollectionViewDataSource>\n@property (nonatomic, strong) UICollectionView *collectionView;\n@property (nonatomic, strong) UILongPressGestureRecognizer *longPress;\n@property (nonatomic, strong) NSMutableArray <NSIndexPath *> *selectedIndexPaths;\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad\n{\n    [super viewDidLoad];\n    self.collectionView.delegate = self;\n    self.collectionView.dataSource = self;\n    [self.collectionView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@\"Cell\"];\n    [self.collectionView addGestureRecognizer:self.longPress];\n    self.selectedIndexPaths = [[NSMutableArray alloc]init];\n}\n\n- (UICollectionView *)collectionView\n{\n    if (!_collectionView)\n    {\n        _collectionView = [[UICollectionView alloc]initWithFrame:CGRectZero collectionViewLayout:[[DraggableLayout alloc]init]];\n        _collectionView.backgroundColor = [UIColor whiteColor];\n        _collectionView.translatesAutoresizingMaskIntoConstraints = NO;\n        [self.view addSubview:_collectionView];\n        [_collectionView.topAnchor constraintEqualToAnchor:self.topLayoutGuide.bottomAnchor].active = YES;\n        [_collectionView.leadingAnchor constraintEqualToAnchor:self.view.leadingAnchor].active = YES;\n        [_collectionView.trailingAnchor constraintEqualToAnchor:self.view.trailingAnchor].active = YES;\n        [_collectionView.bottomAnchor constraintEqualToAnchor:self.bottomLayoutGuide.topAnchor].active = YES;\n    }\n    return _collectionView;\n}\n\n- (UILongPressGestureRecognizer *)longPress\n{\n    if (!_longPress)\n    {\n        _longPress = [[UILongPressGestureRecognizer alloc]initWithTarget:self action:@selector(handleLongPress:)];\n    }\n    return _longPress;\n}\n\n- (void)handleLongPress:(UILongPressGestureRecognizer *)sender\n{\n    DraggableLayout *draggableLayout = (DraggableLayout *)self.collectionView.collectionViewLayout;\n    CGPoint location = [sender locationInView:self.collectionView];\n    if (sender.state == UIGestureRecognizerStateBegan)\n    {\n        [draggableLayout startDraggingWithIndexPaths:self.selectedIndexPaths fromPoint:location];\n    }\n    else if(sender.state == UIGestureRecognizerStateChanged)\n    {\n        [draggableLayout updateDragLoactionWithPoint:location];\n    }\n    else if(sender.state == UIGestureRecognizerStateEnded ||  sender.state == UIGestureRecognizerStateCancelled || sender.state == UIGestureRecognizerStateFailed)\n    {\n        [draggableLayout endDragging];\n    }\n}\n\n- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section\n{\n    return 1000;\n}\n\n- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@\"Cell\" forIndexPath:indexPath];\n    cell.backgroundColor = [UIColor grayColor];\n    if ([self.selectedIndexPaths containsObject:indexPath])\n    {\n        cell.backgroundColor = [UIColor redColor];\n    }\n    return cell;\n}\n\n- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    BOOL isSelected = ![self.selectedIndexPaths containsObject:indexPath];\n    UICollectionViewCell *cell = [collectionView cellForItemAtIndexPath:indexPath];\n    if (isSelected)\n    {\n        cell.backgroundColor = [UIColor redColor];\n        [self.selectedIndexPaths addObject:indexPath];\n    }\n    else\n    {\n        cell.backgroundColor = [UIColor grayColor];\n        [self.selectedIndexPaths removeObject:indexPath];\n    }\n}\n\n@end"
              ]
            ]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "code",
          "version": 5
        }
      },
      "fbff58b6-9b06-4a9f-9e4b-f11c33ae3bde": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550442432009,
          "id": "fbff58b6-9b06-4a9f-9e4b-f11c33ae3bde",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550442432009,
          "parent_id": "f8374e53-6d99-4a40-bac9-1bd872d8eb60",
          "parent_table": "block",
          "properties": {
            "title": [["Swift"]]
          },
          "space_id": "cf9fa7dd-b245-42a0-b929-d5a276b3afe0",
          "type": "sub_header",
          "version": 1
        }
      }
    },
    "space": {}
  }
}
